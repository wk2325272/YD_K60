###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     11/May/2013  11:35:21 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  L:\git_workspace\YD_PRJ_NEW_20130323_git_\Source\DisTime #
#                    .c                                                       #
#    Command line =  L:\git_workspace\YD_PRJ_NEW_20130323_git_\Source\DisTime #
#                    .c -D _DEBUG=1 -lC "L:\git_workspace\YD_PRJ_NEW_20130323 #
#                    _git_\IAR\twrk60n512\Int Flash Debug\List\" -lA          #
#                    "L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\twrk60n51 #
#                    2\Int Flash Debug\List\" --diag_suppress                 #
#                    Pa039,Pa082,Pe186 -o "L:\git_workspace\YD_PRJ_NEW_201303 #
#                    23_git_\IAR\twrk60n512\Int Flash Debug\Obj\" --no_cse    #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\..\lib\twr #
#                    k60n512.iar\ -I L:\git_workspace\YD_PRJ_NEW_20130323_git #
#                    _\IAR\..\lib\twrk60n512.iar\bsp\ -I                      #
#                    L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\..\lib\twr #
#                    k60n512.iar\psp\ -I L:\git_workspace\YD_PRJ_NEW_20130323 #
#                    _git_\IAR\..\lib\twrk60n512.iar\bsp\Generated_Code\ -I   #
#                    L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\..\lib\twr #
#                    k60n512.iar\rtcs\ -I L:\git_workspace\YD_PRJ_NEW_2013032 #
#                    3_git_\IAR\..\lib\twrk60n512.iar\mfs\ -I                 #
#                    L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\..\lib\twr #
#                    k60n512.iar\usb\host\ -I L:\git_workspace\YD_PRJ_NEW_201 #
#                    30323_git_\IAR\..\lib\twrk60n512.iar\shell\ -I           #
#                    L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\..\lib\twr #
#                    k60n512.iar\usb\ -I L:\git_workspace\YD_PRJ_NEW_20130323 #
#                    _git_\IAR\..\ -I L:\git_workspace\YD_PRJ_NEW_20130323_gi #
#                    t_\IAR\..\Source\Source_MQX\ -I                          #
#                    L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\..\Source\ #
#                     -I "E:\Freescale\Freescale MQX                          #
#                    3.8\shell\source\include\" -Ol --use_c++_inline          #
#    List file    =  L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\twrk60n512 #
#                    \Int Flash Debug\List\DisTime.lst                        #
#    Object file  =  L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\twrk60n512 #
#                    \Int Flash Debug\Obj\DisTime.o                           #
#                                                                             #
#                                                                             #
###############################################################################

L:\git_workspace\YD_PRJ_NEW_20130323_git_\Source\DisTime.c
      1          #include "includes.h"
      2          #include "DisTime.h"
      3          

   \                                 In section .data, align 1
      4          volatile U8 TimeFlg=1;
   \                     TimeFlg:
   \   00000000   0x01               DC8 1

   \                                 In section .bss, align 1
      5          U8 MinuteOld=0;
   \                     MinuteOld:
   \   00000000                      DS8 1
      6          
      7          /*******************************************************************************
      8          ** Function Name	：TimeSet
      9          ** Input		：
     10          ** Return		：
     11          ** Author		：wk
     12          ** Version	：
     13          ** Date		：
     14          ** Dessription	：设置系统时钟
     15          ** Reverse	：
     16          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     17          void TimeSet()
     18          {
   \                     TimeSet:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
     19             DATE_STRUCT     time_rtc;
     20             TIME_STRUCT     time_mqx;
     21              
     22             /* initialize time */
     23              time_rtc.YEAR     = (U16)SysFlashData[13]+((U16)SysFlashData[14]<<8);
   \   00000004   0x....             LDR.N    R0,??DataTable4_2
   \   00000006   0x7B40             LDRB     R0,[R0, #+13]
   \   00000008   0x....             LDR.N    R1,??DataTable4_2
   \   0000000A   0x7B89             LDRB     R1,[R1, #+14]
   \   0000000C   0x0209             LSLS     R1,R1,#+8
   \   0000000E   0x1808             ADDS     R0,R1,R0
   \   00000010   0xF8AD 0x0008      STRH     R0,[SP, #+8]
     24              time_rtc.MONTH    = (U16)SysFlashData[15]+((U16)SysFlashData[16]<<8);
   \   00000014   0x....             LDR.N    R0,??DataTable4_2
   \   00000016   0x7BC0             LDRB     R0,[R0, #+15]
   \   00000018   0x....             LDR.N    R1,??DataTable4_2
   \   0000001A   0x7C09             LDRB     R1,[R1, #+16]
   \   0000001C   0x0209             LSLS     R1,R1,#+8
   \   0000001E   0x1808             ADDS     R0,R1,R0
   \   00000020   0xF8AD 0x000A      STRH     R0,[SP, #+10]
     25              time_rtc.DAY      = (U16)SysFlashData[17];
   \   00000024   0x....             LDR.N    R0,??DataTable4_2
   \   00000026   0x7C40             LDRB     R0,[R0, #+17]
   \   00000028   0xF8AD 0x000C      STRH     R0,[SP, #+12]
     26              time_rtc.HOUR     = (U16)SysFlashData[19];
   \   0000002C   0x....             LDR.N    R0,??DataTable4_2
   \   0000002E   0x7CC0             LDRB     R0,[R0, #+19]
   \   00000030   0xF8AD 0x000E      STRH     R0,[SP, #+14]
     27              time_rtc.MINUTE   = (U16)SysFlashData[21];
   \   00000034   0x....             LDR.N    R0,??DataTable4_2
   \   00000036   0x7D40             LDRB     R0,[R0, #+21]
   \   00000038   0xF8AD 0x0010      STRH     R0,[SP, #+16]
     28              time_rtc.SECOND   = (U16)SysFlashData[23];
   \   0000003C   0x....             LDR.N    R0,??DataTable4_2
   \   0000003E   0x7DC0             LDRB     R0,[R0, #+23]
   \   00000040   0xF8AD 0x0012      STRH     R0,[SP, #+18]
     29              time_rtc.MILLISEC = 0;
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0xF8AD 0x0014      STRH     R0,[SP, #+20]
     30               
     31              _time_from_date (&time_rtc, &time_mqx);
   \   0000004A   0xA900             ADD      R1,SP,#+0
   \   0000004C   0xA802             ADD      R0,SP,#+8
   \   0000004E   0x.... 0x....      BL       _time_from_date
     32          
     33              _time_set( &time_mqx);
   \   00000052   0xA800             ADD      R0,SP,#+0
   \   00000054   0x.... 0x....      BL       _time_set
     34              if( _rtc_sync_with_mqx(FALSE) != MQX_OK )
   \   00000058   0x2000             MOVS     R0,#+0
   \   0000005A   0x.... 0x....      BL       _rtc_sync_with_mqx
   \   0000005E   0x2800             CMP      R0,#+0
   \   00000060   0xD004             BEQ.N    ??TimeSet_0
     35              {
     36                  printf("\nError synchronize time!\n");
   \   00000062   0x....             LDR.N    R0,??DataTable4_3
   \   00000064   0x.... 0x....      BL       _io_printf
     37                  _task_block();
   \   00000068   0x.... 0x....      BL       _task_block
     38              }
     39              _time_get (&time_mqx);
   \                     ??TimeSet_0:
   \   0000006C   0xA800             ADD      R0,SP,#+0
   \   0000006E   0x.... 0x....      BL       _time_get
     40          
     41              _time_to_date (&time_mqx, &time_rtc);
   \   00000072   0xA902             ADD      R1,SP,#+8
   \   00000074   0xA800             ADD      R0,SP,#+0
   \   00000076   0x.... 0x....      BL       _time_to_date
     42              
     43              print_mqx_time(&time_rtc, &time_mqx);
   \   0000007A   0xA900             ADD      R1,SP,#+0
   \   0000007C   0xA802             ADD      R0,SP,#+8
   \   0000007E   0x.... 0x....      BL       print_mqx_time
     44              print_current_time();
   \   00000082   0x.... 0x....      BL       print_current_time
     45              
     46              TimeFlg=1; // 设置完成全部显示时间
   \   00000086   0x....             LDR.N    R0,??DataTable4_4
   \   00000088   0x2101             MOVS     R1,#+1
   \   0000008A   0x7001             STRB     R1,[R0, #+0]
     47              _rtc_init (RTC_INIT_FLAG_CLEAR);
   \   0000008C   0x2001             MOVS     R0,#+1
   \   0000008E   0x.... 0x....      BL       _rtc_init
     48              _rtc_init ( RTC_INIT_FLAG_ENABLE); 
   \   00000092   0x2004             MOVS     R0,#+4
   \   00000094   0x.... 0x....      BL       _rtc_init
     49          }
   \   00000098   0xB007             ADD      SP,SP,#+28
   \   0000009A   0xBD00             POP      {PC}             ;; return
     50          
     51          /*******************************************************************************
     52          ** Function Name	：TimeDis
     53          ** Input		：
     54          ** Return		：
     55          ** Author		： wk
     56          ** Version	：
     57          ** Date		：
     58          ** Dessription	：在液晶屏上显示时间
     59          ** Reverse	：
     60          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     61          void TimeDis(U8 DisType)
     62          {
   \                     TimeDis:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB0A4             SUB      SP,SP,#+144
   \   00000004   0x0004             MOVS     R4,R0
     63            if (Dis_PicID != MenuTop)
   \   00000006   0x....             LDR.N    R0,??DataTable4_5
   \   00000008   0x7800             LDRB     R0,[R0, #+0]
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xF000 0x810E      BEQ.W    ??TimeDis_0
     64            {
     65                  TIME_STRUCT             time_sf;
     66                  DATE_STRUCT             date_sf;
     67                  _time_get(&time_sf);
   \   00000010   0xA809             ADD      R0,SP,#+36
   \   00000012   0x.... 0x....      BL       _time_get
     68                  _time_to_date(&time_sf,&date_sf);
   \   00000016   0xA905             ADD      R1,SP,#+20
   \   00000018   0xA809             ADD      R0,SP,#+36
   \   0000001A   0x.... 0x....      BL       _time_to_date
     69                  
     70                  if(DisType)
   \   0000001E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000020   0x2C00             CMP      R4,#+0
   \   00000022   0xF000 0x80DD      BEQ.W    ??TimeDis_1
     71                  { 
     72                    U8 CurrentTime[7]= {0x00,0x00,0x00,0x00,0x00,0x00,0x00}; //秒，分，时，周，日，月，年
   \   00000026   0xA800             ADD      R0,SP,#+0
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0x2200             MOVS     R2,#+0
   \   0000002C   0xC006             STM      R0!,{R1,R2}
   \   0000002E   0x3808             SUBS     R0,R0,#+8
     73                    U16 TimeX[6]= {214,178,142,106,70,10};
   \   00000030   0xA802             ADD      R0,SP,#+8
   \   00000032   0x....             LDR.N    R1,??DataTable4_6
   \   00000034   0xC91C             LDM      R1!,{R2-R4}
   \   00000036   0xC01C             STM      R0!,{R2-R4}
   \   00000038   0x390C             SUBS     R1,R1,#+12
   \   0000003A   0x380C             SUBS     R0,R0,#+12
     74                    U16 TimeC108[42];
     75                    
     76                    CurrentTime[6]=date_sf.YEAR>>8;
   \   0000003C   0xF8BD 0x0014      LDRH     R0,[SP, #+20]
   \   00000040   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000042   0x0A00             LSRS     R0,R0,#+8
   \   00000044   0xF88D 0x0006      STRB     R0,[SP, #+6]
     77                    CurrentTime[5]=(U8)date_sf.YEAR&0x00ff;
   \   00000048   0xF8BD 0x0014      LDRH     R0,[SP, #+20]
   \   0000004C   0xF88D 0x0005      STRB     R0,[SP, #+5]
     78                    CurrentTime[4]=date_sf.MONTH;
   \   00000050   0xF8BD 0x0016      LDRH     R0,[SP, #+22]
   \   00000054   0xF88D 0x0004      STRB     R0,[SP, #+4]
     79                    CurrentTime[3]=date_sf.DAY;
   \   00000058   0xF8BD 0x0018      LDRH     R0,[SP, #+24]
   \   0000005C   0xF88D 0x0003      STRB     R0,[SP, #+3]
     80                    CurrentTime[2]=date_sf.HOUR;
   \   00000060   0xF8BD 0x001A      LDRH     R0,[SP, #+26]
   \   00000064   0xF88D 0x0002      STRB     R0,[SP, #+2]
     81                    CurrentTime[1]=date_sf.MINUTE;
   \   00000068   0xF8BD 0x001C      LDRH     R0,[SP, #+28]
   \   0000006C   0xF88D 0x0001      STRB     R0,[SP, #+1]
     82                    CurrentTime[0]=date_sf.SECOND;
   \   00000070   0xF8BD 0x001E      LDRH     R0,[SP, #+30]
   \   00000074   0xF88D 0x0000      STRB     R0,[SP, #+0]
     83          
     84                    for(U8 i=0; i<6; i++)
   \   00000078   0x2000             MOVS     R0,#+0
   \   0000007A   0xE00B             B.N      ??TimeDis_2
     85                    {            
     86                        TimeC108[7*i]=0x2084;//显示控制，2位整数，无效0显示，字体大小12*24
     87                        TimeC108[7*i+1]=TimeX[i];
     88                        TimeC108[7*i+2]=5;
     89                        TimeC108[7*i+3]=0xffff;
     90                        TimeC108[7*i+4]=0x0000;
     91                        TimeC108[7*i+5]=0x0000;
     92                        if(i==5)
     93                        {
     94                          TimeC108[7*i+6]=((U16)CurrentTime[i+1]<<8)+CurrentTime[i]; 
     95                        }
     96                        else
     97                        {
     98                          TimeC108[7*i+6]=CurrentTime[i];
   \                     ??TimeDis_3:
   \   0000007C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000007E   0x2107             MOVS     R1,#+7
   \   00000080   0xFB01 0xF100      MUL      R1,R1,R0
   \   00000084   0xAA0F             ADD      R2,SP,#+60
   \   00000086   0xEB12 0x0141      ADDS     R1,R2,R1, LSL #+1
   \   0000008A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000008C   0xAA00             ADD      R2,SP,#+0
   \   0000008E   0x5C82             LDRB     R2,[R0, R2]
   \   00000090   0x818A             STRH     R2,[R1, #+12]
     99                        }
   \                     ??TimeDis_4:
   \   00000092   0x1C40             ADDS     R0,R0,#+1
   \                     ??TimeDis_2:
   \   00000094   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000096   0x2806             CMP      R0,#+6
   \   00000098   0xD24E             BCS.N    ??TimeDis_5
   \   0000009A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000009C   0x210E             MOVS     R1,#+14
   \   0000009E   0xAA0F             ADD      R2,SP,#+60
   \   000000A0   0xFB01 0x2100      MLA      R1,R1,R0,R2
   \   000000A4   0xF242 0x0284      MOVW     R2,#+8324
   \   000000A8   0x800A             STRH     R2,[R1, #+0]
   \   000000AA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000AC   0x2107             MOVS     R1,#+7
   \   000000AE   0xFB01 0xF100      MUL      R1,R1,R0
   \   000000B2   0xAA0F             ADD      R2,SP,#+60
   \   000000B4   0xEB12 0x0141      ADDS     R1,R2,R1, LSL #+1
   \   000000B8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000BA   0xAA02             ADD      R2,SP,#+8
   \   000000BC   0xF832 0x2010      LDRH     R2,[R2, R0, LSL #+1]
   \   000000C0   0x804A             STRH     R2,[R1, #+2]
   \   000000C2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000C4   0x2107             MOVS     R1,#+7
   \   000000C6   0xFB01 0xF100      MUL      R1,R1,R0
   \   000000CA   0xAA0F             ADD      R2,SP,#+60
   \   000000CC   0xEB12 0x0141      ADDS     R1,R2,R1, LSL #+1
   \   000000D0   0x2205             MOVS     R2,#+5
   \   000000D2   0x808A             STRH     R2,[R1, #+4]
   \   000000D4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000D6   0x2107             MOVS     R1,#+7
   \   000000D8   0xFB01 0xF100      MUL      R1,R1,R0
   \   000000DC   0xAA0F             ADD      R2,SP,#+60
   \   000000DE   0xEB12 0x0141      ADDS     R1,R2,R1, LSL #+1
   \   000000E2   0xF64F 0x72FF      MOVW     R2,#+65535
   \   000000E6   0x80CA             STRH     R2,[R1, #+6]
   \   000000E8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000EA   0x2107             MOVS     R1,#+7
   \   000000EC   0xFB01 0xF100      MUL      R1,R1,R0
   \   000000F0   0xAA0F             ADD      R2,SP,#+60
   \   000000F2   0xEB12 0x0141      ADDS     R1,R2,R1, LSL #+1
   \   000000F6   0x2200             MOVS     R2,#+0
   \   000000F8   0x810A             STRH     R2,[R1, #+8]
   \   000000FA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000FC   0x2107             MOVS     R1,#+7
   \   000000FE   0xFB01 0xF100      MUL      R1,R1,R0
   \   00000102   0xAA0F             ADD      R2,SP,#+60
   \   00000104   0xEB12 0x0141      ADDS     R1,R2,R1, LSL #+1
   \   00000108   0x2200             MOVS     R2,#+0
   \   0000010A   0x814A             STRH     R2,[R1, #+10]
   \   0000010C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000010E   0x2805             CMP      R0,#+5
   \   00000110   0xD1B4             BNE.N    ??TimeDis_3
   \   00000112   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000114   0x2107             MOVS     R1,#+7
   \   00000116   0xFB01 0xF100      MUL      R1,R1,R0
   \   0000011A   0xAA0F             ADD      R2,SP,#+60
   \   0000011C   0xEB12 0x0141      ADDS     R1,R2,R1, LSL #+1
   \   00000120   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000122   0xAA00             ADD      R2,SP,#+0
   \   00000124   0x1882             ADDS     R2,R0,R2
   \   00000126   0x7852             LDRB     R2,[R2, #+1]
   \   00000128   0x0212             LSLS     R2,R2,#+8
   \   0000012A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000012C   0xAB00             ADD      R3,SP,#+0
   \   0000012E   0x5CC3             LDRB     R3,[R0, R3]
   \   00000130   0xFA52 0xF283      UXTAB    R2,R2,R3
   \   00000134   0x818A             STRH     R2,[R1, #+12]
   \   00000136   0xE7AC             B.N      ??TimeDis_4
    100                          
    101                    }
    102                    TimeC108[35]=0x4084;//年的显示控制
   \                     ??TimeDis_5:
   \   00000138   0xF244 0x0084      MOVW     R0,#+16516
   \   0000013C   0xF8AD 0x0082      STRH     R0,[SP, #+130]
    103                    YADA_C0(RX8025C108Addr,TimeC108,42);
   \   00000140   0x222A             MOVS     R2,#+42
   \   00000142   0xA90F             ADD      R1,SP,#+60
   \   00000144   0xF44F 0x400F      MOV      R0,#+36608
   \   00000148   0x.... 0x....      BL       YADA_C0
    104                    YADA_C108(RX8025C108Addr,6);
   \   0000014C   0x2106             MOVS     R1,#+6
   \   0000014E   0xF44F 0x400F      MOV      R0,#+36608
   \   00000152   0x.... 0x....      BL       YADA_C108
    105                    
    106                    YADA_98 (70,5,0x20,0x82,0x02,0xffff,0x0000,"-",2);
   \   00000156   0x2002             MOVS     R0,#+2
   \   00000158   0x9004             STR      R0,[SP, #+16]
   \   0000015A   0x....             ADR.N    R0,??DataTable4  ;; "-"
   \   0000015C   0x9003             STR      R0,[SP, #+12]
   \   0000015E   0x2000             MOVS     R0,#+0
   \   00000160   0x9002             STR      R0,[SP, #+8]
   \   00000162   0xF64F 0x70FF      MOVW     R0,#+65535
   \   00000166   0x9001             STR      R0,[SP, #+4]
   \   00000168   0x2002             MOVS     R0,#+2
   \   0000016A   0x9000             STR      R0,[SP, #+0]
   \   0000016C   0x2382             MOVS     R3,#+130
   \   0000016E   0x2220             MOVS     R2,#+32
   \   00000170   0x2105             MOVS     R1,#+5
   \   00000172   0x2046             MOVS     R0,#+70
   \   00000174   0x.... 0x....      BL       YADA_98
    107                    YADA_98 (106,5,0x20,0x82,0x02,0xffff,0x0000,"-",2);
   \   00000178   0x2002             MOVS     R0,#+2
   \   0000017A   0x9004             STR      R0,[SP, #+16]
   \   0000017C   0x....             ADR.N    R0,??DataTable4  ;; "-"
   \   0000017E   0x9003             STR      R0,[SP, #+12]
   \   00000180   0x2000             MOVS     R0,#+0
   \   00000182   0x9002             STR      R0,[SP, #+8]
   \   00000184   0xF64F 0x70FF      MOVW     R0,#+65535
   \   00000188   0x9001             STR      R0,[SP, #+4]
   \   0000018A   0x2002             MOVS     R0,#+2
   \   0000018C   0x9000             STR      R0,[SP, #+0]
   \   0000018E   0x2382             MOVS     R3,#+130
   \   00000190   0x2220             MOVS     R2,#+32
   \   00000192   0x2105             MOVS     R1,#+5
   \   00000194   0x206A             MOVS     R0,#+106
   \   00000196   0x.... 0x....      BL       YADA_98
    108                    YADA_98 (178,5,0x20,0x82,0x02,0xffff,0x0000,":",2);
   \   0000019A   0x2002             MOVS     R0,#+2
   \   0000019C   0x9004             STR      R0,[SP, #+16]
   \   0000019E   0x....             ADR.N    R0,??DataTable4_1  ;; ":"
   \   000001A0   0x9003             STR      R0,[SP, #+12]
   \   000001A2   0x2000             MOVS     R0,#+0
   \   000001A4   0x9002             STR      R0,[SP, #+8]
   \   000001A6   0xF64F 0x70FF      MOVW     R0,#+65535
   \   000001AA   0x9001             STR      R0,[SP, #+4]
   \   000001AC   0x2002             MOVS     R0,#+2
   \   000001AE   0x9000             STR      R0,[SP, #+0]
   \   000001B0   0x2382             MOVS     R3,#+130
   \   000001B2   0x2220             MOVS     R2,#+32
   \   000001B4   0x2105             MOVS     R1,#+5
   \   000001B6   0x20B2             MOVS     R0,#+178
   \   000001B8   0x.... 0x....      BL       YADA_98
    109                    YADA_98 (214,5,0x20,0x82,0x02,0xffff,0x0000,":",2);  
   \   000001BC   0x2002             MOVS     R0,#+2
   \   000001BE   0x9004             STR      R0,[SP, #+16]
   \   000001C0   0x....             ADR.N    R0,??DataTable4_1  ;; ":"
   \   000001C2   0x9003             STR      R0,[SP, #+12]
   \   000001C4   0x2000             MOVS     R0,#+0
   \   000001C6   0x9002             STR      R0,[SP, #+8]
   \   000001C8   0xF64F 0x70FF      MOVW     R0,#+65535
   \   000001CC   0x9001             STR      R0,[SP, #+4]
   \   000001CE   0x2002             MOVS     R0,#+2
   \   000001D0   0x9000             STR      R0,[SP, #+0]
   \   000001D2   0x2382             MOVS     R3,#+130
   \   000001D4   0x2220             MOVS     R2,#+32
   \   000001D6   0x2105             MOVS     R1,#+5
   \   000001D8   0x20D6             MOVS     R0,#+214
   \   000001DA   0x.... 0x....      BL       YADA_98
   \   000001DE   0xE025             B.N      ??TimeDis_0
    110                  }
    111                  else
    112                  { 
    113                    U8 CurrentTime;
    114                    CurrentTime=date_sf.SECOND;
   \                     ??TimeDis_1:
   \   000001E0   0xF8BD 0x401E      LDRH     R4,[SP, #+30]
    115                    U16 sC108[]= {0x2084,214,5,0xffff,0x0000,0x0000,CurrentTime};
   \   000001E4   0xA80B             ADD      R0,SP,#+44
   \   000001E6   0x....             LDR.N    R1,??DataTable4_7
   \   000001E8   0x2210             MOVS     R2,#+16
   \   000001EA   0x.... 0x....      BL       __aeabi_memcpy4
   \   000001EE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001F0   0xF8AD 0x4038      STRH     R4,[SP, #+56]
    116                    
    117                    YADA_C0(RX8025C108Addr+35,sC108,7);
   \   000001F4   0x2207             MOVS     R2,#+7
   \   000001F6   0xA90B             ADD      R1,SP,#+44
   \   000001F8   0xF648 0x7023      MOVW     R0,#+36643
   \   000001FC   0x.... 0x....      BL       YADA_C0
    118                    YADA_C108(RX8025C108Addr+35,1);
   \   00000200   0x2101             MOVS     R1,#+1
   \   00000202   0xF648 0x7023      MOVW     R0,#+36643
   \   00000206   0x.... 0x....      BL       YADA_C108
    119                    YADA_98 (214,5,0x20,0x82,0x02,0xffff,0x0000,":",1);
   \   0000020A   0x2001             MOVS     R0,#+1
   \   0000020C   0x9004             STR      R0,[SP, #+16]
   \   0000020E   0x....             ADR.N    R0,??DataTable4_1  ;; ":"
   \   00000210   0x9003             STR      R0,[SP, #+12]
   \   00000212   0x2000             MOVS     R0,#+0
   \   00000214   0x9002             STR      R0,[SP, #+8]
   \   00000216   0xF64F 0x70FF      MOVW     R0,#+65535
   \   0000021A   0x9001             STR      R0,[SP, #+4]
   \   0000021C   0x2002             MOVS     R0,#+2
   \   0000021E   0x9000             STR      R0,[SP, #+0]
   \   00000220   0x2382             MOVS     R3,#+130
   \   00000222   0x2220             MOVS     R2,#+32
   \   00000224   0x2105             MOVS     R1,#+5
   \   00000226   0x20D6             MOVS     R0,#+214
   \   00000228   0x.... 0x....      BL       YADA_98
    120                  }
    121            }
    122          }
   \                     ??TimeDis_0:
   \   0000022C   0xB024             ADD      SP,SP,#+144
   \   0000022E   0xBD10             POP      {R4,PC}          ;; return
    123          /*******************************************************************************
    124          ** Function Name	：DisTimeFlg
    125          ** Input		：
    126          ** Return		：
    127          ** Author		：WK
    128          ** Version	：
    129          ** Date		：
    130          ** Dessription	：时间显示的标志位设置，根据“分”是否变化，判断是否全部显示时间还是只显示秒
    131          ** Reverse	：
    132          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    133          void DisTimeFlg()
    134          {
   \                     DisTimeFlg:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
    135              TIME_STRUCT             time_sf;
    136              DATE_STRUCT             date_sf;
    137              _time_get(&time_sf);
   \   00000004   0xA800             ADD      R0,SP,#+0
   \   00000006   0x.... 0x....      BL       _time_get
    138              _time_to_date(&time_sf,&date_sf);
   \   0000000A   0xA902             ADD      R1,SP,#+8
   \   0000000C   0xA800             ADD      R0,SP,#+0
   \   0000000E   0x.... 0x....      BL       _time_to_date
    139              
    140              if(MinuteOld!=date_sf.MINUTE)
   \   00000012   0x....             LDR.N    R0,??DataTable4_8
   \   00000014   0x7800             LDRB     R0,[R0, #+0]
   \   00000016   0xF8BD 0x1010      LDRH     R1,[SP, #+16]
   \   0000001A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000001C   0x4288             CMP      R0,R1
   \   0000001E   0xD007             BEQ.N    ??DisTimeFlg_0
    141              {
    142                 MinuteOld=date_sf.MINUTE;
   \   00000020   0xF8BD 0x0010      LDRH     R0,[SP, #+16]
   \   00000024   0x....             LDR.N    R1,??DataTable4_8
   \   00000026   0x7008             STRB     R0,[R1, #+0]
    143                 TimeFlg=1;
   \   00000028   0x....             LDR.N    R0,??DataTable4_4
   \   0000002A   0x2101             MOVS     R1,#+1
   \   0000002C   0x7001             STRB     R1,[R0, #+0]
   \   0000002E   0xE002             B.N      ??DisTimeFlg_1
    144              }
    145              else
    146                 TimeFlg=2;
   \                     ??DisTimeFlg_0:
   \   00000030   0x....             LDR.N    R0,??DataTable4_4
   \   00000032   0x2102             MOVS     R1,#+2
   \   00000034   0x7001             STRB     R1,[R0, #+0]
    147          }
   \                     ??DisTimeFlg_1:
   \   00000036   0xB007             ADD      SP,SP,#+28
   \   00000038   0xBD00             POP      {PC}             ;; return
    148          

   \                                 In section .text, align 2, keep-with-next
    149          static void print_mqx_time
    150          (
    151                  DATE_STRUCT_PTR     time_rtc,
    152                  TIME_STRUCT_PTR     time_mqx
    153          )
    154          {
   \                     print_mqx_time:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
    155              printf ("MQX : %d s, %d ms (%02d.%02d.%4d %02d:%02d:%02d )\n", time_mqx->SECONDS, time_mqx->MILLISECONDS,time_rtc->DAY, time_rtc->MONTH, time_rtc->YEAR, time_rtc->HOUR, time_rtc->MINUTE, time_rtc->SECOND);
   \   00000004   0x8942             LDRH     R2,[R0, #+10]
   \   00000006   0x9204             STR      R2,[SP, #+16]
   \   00000008   0x8902             LDRH     R2,[R0, #+8]
   \   0000000A   0x9203             STR      R2,[SP, #+12]
   \   0000000C   0x88C2             LDRH     R2,[R0, #+6]
   \   0000000E   0x9202             STR      R2,[SP, #+8]
   \   00000010   0x8802             LDRH     R2,[R0, #+0]
   \   00000012   0x9201             STR      R2,[SP, #+4]
   \   00000014   0x8842             LDRH     R2,[R0, #+2]
   \   00000016   0x9200             STR      R2,[SP, #+0]
   \   00000018   0x8883             LDRH     R3,[R0, #+4]
   \   0000001A   0x684A             LDR      R2,[R1, #+4]
   \   0000001C   0x6809             LDR      R1,[R1, #+0]
   \   0000001E   0x....             LDR.N    R0,??DataTable4_9
   \   00000020   0x.... 0x....      BL       _io_printf
    156          }
   \   00000024   0xB005             ADD      SP,SP,#+20
   \   00000026   0xBD00             POP      {PC}             ;; return
    157          
    158          
    159          /*FUNCTION**********************************************************************
    160           *
    161           * Function Name    : print_current_time
    162           * Returned Value   :
    163           * Comments         :
    164           *
    165           *END**************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    166          static void print_current_time(void)
    167          {
   \                     print_current_time:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
    168              DATE_STRUCT     time_rtc;
    169              TIME_STRUCT     time_mqx;
    170          
    171              _rtc_get_time_mqxd (&time_rtc);
   \   00000004   0xA802             ADD      R0,SP,#+8
   \   00000006   0x.... 0x....      BL       _rtc_get_time_mqxd
    172              _time_from_date (&time_rtc, &time_mqx);
   \   0000000A   0xA900             ADD      R1,SP,#+0
   \   0000000C   0xA802             ADD      R0,SP,#+8
   \   0000000E   0x.... 0x....      BL       _time_from_date
    173              print_rtc_time(&time_rtc, &time_mqx);
   \   00000012   0xA900             ADD      R1,SP,#+0
   \   00000014   0xA802             ADD      R0,SP,#+8
   \   00000016   0x.... 0x....      BL       print_rtc_time
    174          }
   \   0000001A   0xB007             ADD      SP,SP,#+28
   \   0000001C   0xBD00             POP      {PC}             ;; return
    175          
    176          /*FUNCTION**********************************************************************
    177           *
    178           * Function Name    : print_rtc_time
    179           * Returned Value   :
    180           * Comments         : Print rtc time to terminal
    181           *
    182           *END**************************************************************************/
    183          

   \                                 In section .text, align 2, keep-with-next
    184          static void print_rtc_time
    185          (
    186                  DATE_STRUCT_PTR     time_rtc,
    187                  TIME_STRUCT_PTR     time_mqx
    188          )
    189          {
   \                     print_rtc_time:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
    190              printf ("RTC : %02d.%02d.%4d %02d:%02d:%02d (%02d s, %03d ms)\n", time_rtc->DAY, time_rtc->MONTH, time_rtc->YEAR, time_rtc->HOUR, time_rtc->MINUTE, time_rtc->SECOND, time_mqx->SECONDS, time_mqx->MILLISECONDS);
   \   00000004   0x684A             LDR      R2,[R1, #+4]
   \   00000006   0x9204             STR      R2,[SP, #+16]
   \   00000008   0x6809             LDR      R1,[R1, #+0]
   \   0000000A   0x9103             STR      R1,[SP, #+12]
   \   0000000C   0x8941             LDRH     R1,[R0, #+10]
   \   0000000E   0x9102             STR      R1,[SP, #+8]
   \   00000010   0x8901             LDRH     R1,[R0, #+8]
   \   00000012   0x9101             STR      R1,[SP, #+4]
   \   00000014   0x88C1             LDRH     R1,[R0, #+6]
   \   00000016   0x9100             STR      R1,[SP, #+0]
   \   00000018   0x8803             LDRH     R3,[R0, #+0]
   \   0000001A   0x8842             LDRH     R2,[R0, #+2]
   \   0000001C   0x8881             LDRH     R1,[R0, #+4]
   \   0000001E   0x....             LDR.N    R0,??DataTable4_10
   \   00000020   0x.... 0x....      BL       _io_printf
    191          
    192          }
   \   00000024   0xB005             ADD      SP,SP,#+20
   \   00000026   0xBD00             POP      {PC}             ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x2D 0x00          DC8      "-",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x3A 0x00          DC8      ":",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x........         DC32     SysFlashData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     `?<Constant "\\nError synchronize ti...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x........         DC32     TimeFlg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x........         DC32     Dis_PicID

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x........         DC32     `?<Constant {214, 178, 142, 106, 70, 10}>`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x........         DC32     `?<Constant {8324, 214, 5, 65535, 0, 0, 0}>`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0x........         DC32     MinuteOld

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   0x........         DC32     `?<Constant "MQX : %d s, %d ms (%0...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \   00000000   0x........         DC32     `?<Constant "RTC : %02d.%02d.%4d %...">`

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nError synchronize ti...">`:
   \   00000000   0x0A 0x45          DC8 "\012Error synchronize time!\012"
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x20 0x73    
   \              0x79 0x6E    
   \              0x63 0x68    
   \              0x72 0x6F    
   \              0x6E 0x69    
   \              0x7A 0x65    
   \              0x20 0x74    
   \              0x69 0x6D    
   \              0x65 0x21    
   \              0x0A 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant {214, 178, 142, 106, 70, 10}>`:
   \   00000000   0x00D6 0x00B2      DC16 214, 178, 142, 106, 70, 10
   \              0x008E 0x006A
   \              0x0046 0x000A

   \                                 In section .rodata, align 2
   \   00000000   0x2D 0x00          DC8 "-"

   \                                 In section .rodata, align 2
   \   00000000   0x3A 0x00          DC8 ":"

   \                                 In section .rodata, align 4
   \                     `?<Constant {8324, 214, 5, 65535, 0, 0, 0}>`:
   \   00000000   0x2084 0x00D6      DC16 8324, 214, 5, 65535, 0, 0, 0
   \              0x0005 0xFFFF
   \              0x0000 0x0000
   \              0x0000       
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "MQX : %d s, %d ms (%0...">`:
   \   00000000   0x4D 0x51          DC8 4DH, 51H, 58H, 20H, 3AH, 20H, 25H, 64H
   \              0x58 0x20    
   \              0x3A 0x20    
   \              0x25 0x64    
   \   00000008   0x20 0x73          DC8 20H, 73H, 2CH, 20H, 25H, 64H, 20H, 6DH
   \              0x2C 0x20    
   \              0x25 0x64    
   \              0x20 0x6D    
   \   00000010   0x73 0x20          DC8 73H, 20H, 28H, 25H, 30H, 32H, 64H, 2EH
   \              0x28 0x25    
   \              0x30 0x32    
   \              0x64 0x2E    
   \   00000018   0x25 0x30          DC8 25H, 30H, 32H, 64H, 2EH, 25H, 34H, 64H
   \              0x32 0x64    
   \              0x2E 0x25    
   \              0x34 0x64    
   \   00000020   0x20 0x25          DC8 20H, 25H, 30H, 32H, 64H, 3AH, 25H, 30H
   \              0x30 0x32    
   \              0x64 0x3A    
   \              0x25 0x30    
   \   00000028   0x32 0x64          DC8 32H, 64H, 3AH, 25H, 30H, 32H, 64H, 20H
   \              0x3A 0x25    
   \              0x30 0x32    
   \              0x64 0x20    
   \   00000030   0x29 0x0A          DC8 29H, 0AH, 0
   \              0x00         
   \   00000033   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RTC : %02d.%02d.%4d %...">`:
   \   00000000   0x52 0x54          DC8 52H, 54H, 43H, 20H, 3AH, 20H, 25H, 30H
   \              0x43 0x20    
   \              0x3A 0x20    
   \              0x25 0x30    
   \   00000008   0x32 0x64          DC8 32H, 64H, 2EH, 25H, 30H, 32H, 64H, 2EH
   \              0x2E 0x25    
   \              0x30 0x32    
   \              0x64 0x2E    
   \   00000010   0x25 0x34          DC8 25H, 34H, 64H, 20H, 25H, 30H, 32H, 64H
   \              0x64 0x20    
   \              0x25 0x30    
   \              0x32 0x64    
   \   00000018   0x3A 0x25          DC8 3AH, 25H, 30H, 32H, 64H, 3AH, 25H, 30H
   \              0x30 0x32    
   \              0x64 0x3A    
   \              0x25 0x30    
   \   00000020   0x32 0x64          DC8 32H, 64H, 20H, 28H, 25H, 30H, 32H, 64H
   \              0x20 0x28    
   \              0x25 0x30    
   \              0x32 0x64    
   \   00000028   0x20 0x73          DC8 20H, 73H, 2CH, 20H, 25H, 30H, 33H, 64H
   \              0x2C 0x20    
   \              0x25 0x30    
   \              0x33 0x64    
   \   00000030   0x20 0x6D          DC8 20H, 6DH, 73H, 29H, 0AH, 0
   \              0x73 0x29    
   \              0x0A 0x00    
   \   00000036   0x00 0x00          DC8 0, 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       32  DisTimeFlg
              32 -> _time_get
              32 -> _time_to_date
      152  TimeDis
             152 -> YADA_98
             152 -> YADA_C0
             152 -> YADA_C108
             152 -> __aeabi_memcpy4
             152 -> _time_get
             152 -> _time_to_date
       32  TimeSet
              32 -> _io_printf
              32 -> _rtc_init
              32 -> _rtc_sync_with_mqx
              32 -> _task_block
              32 -> _time_from_date
              32 -> _time_get
              32 -> _time_set
              32 -> _time_to_date
              32 -> print_current_time
              32 -> print_mqx_time
       32  print_current_time
              32 -> _rtc_get_time_mqxd
              32 -> _time_from_date
              32 -> print_rtc_time
       24  print_mqx_time
              24 -> _io_printf
       24  print_rtc_time
              24 -> _io_printf


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Constant "-">
       2  ?<Constant ":">
      52  ?<Constant "MQX : %d s, %d ms (%0...">
      56  ?<Constant "RTC : %02d.%02d.%4d %...">
      28  ?<Constant "\nError synchronize ti...">
       8  ?<Constant {0, 0, 0, 0, 0, 0, 0}>
      12  ?<Constant {214, 178, 142, 106, 70, 10}>
      16  ?<Constant {8324, 214, 5, 65535, 0, 0, 0}>
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
      58  DisTimeFlg
       1  MinuteOld
     560  TimeDis
       1  TimeFlg
     156  TimeSet
      30  print_current_time
      40  print_mqx_time
      40  print_rtc_time

 
   1 byte  in section .bss
   1 byte  in section .data
 176 bytes in section .rodata
 928 bytes in section .text
 
 928 bytes of CODE  memory
 176 bytes of CONST memory
   2 bytes of DATA  memory

Errors: none
Warnings: none
