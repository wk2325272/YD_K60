###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     14/May/2013  13:51:20 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\Freescale\Freescale MQX 3.8\shell\source\mfs\sh_di.c  #
#    Command line =  "E:\Freescale\Freescale MQX                              #
#                    3.8\shell\source\mfs\sh_di.c" -D _DEBUG=1 -lC            #
#                    "L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\twrk60n51 #
#                    2\Int Flash Debug\List\" -lA                             #
#                    "L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\twrk60n51 #
#                    2\Int Flash Debug\List\" --diag_suppress                 #
#                    Pa039,Pa082,Pe186 -o "L:\git_workspace\YD_PRJ_NEW_201303 #
#                    23_git_\IAR\twrk60n512\Int Flash Debug\Obj\" --no_cse    #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\..\lib\twr #
#                    k60n512.iar\ -I L:\git_workspace\YD_PRJ_NEW_20130323_git #
#                    _\IAR\..\lib\twrk60n512.iar\bsp\ -I                      #
#                    L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\..\lib\twr #
#                    k60n512.iar\psp\ -I L:\git_workspace\YD_PRJ_NEW_20130323 #
#                    _git_\IAR\..\lib\twrk60n512.iar\bsp\Generated_Code\ -I   #
#                    L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\..\lib\twr #
#                    k60n512.iar\rtcs\ -I L:\git_workspace\YD_PRJ_NEW_2013032 #
#                    3_git_\IAR\..\lib\twrk60n512.iar\mfs\ -I                 #
#                    L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\..\lib\twr #
#                    k60n512.iar\usb\host\ -I L:\git_workspace\YD_PRJ_NEW_201 #
#                    30323_git_\IAR\..\lib\twrk60n512.iar\shell\ -I           #
#                    L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\..\lib\twr #
#                    k60n512.iar\usb\ -I L:\git_workspace\YD_PRJ_NEW_20130323 #
#                    _git_\IAR\..\ -I L:\git_workspace\YD_PRJ_NEW_20130323_gi #
#                    t_\IAR\..\Source\Source_MQX\ -I                          #
#                    L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\..\Source\ #
#                     -I "E:\Freescale\Freescale MQX                          #
#                    3.8\shell\source\include\" -Ol --use_c++_inline          #
#    List file    =  L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\twrk60n512 #
#                    \Int Flash Debug\List\sh_di.lst                          #
#    Object file  =  L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\twrk60n512 #
#                    \Int Flash Debug\Obj\sh_di.o                             #
#                                                                             #
#                                                                             #
###############################################################################

E:\Freescale\Freescale MQX 3.8\shell\source\mfs\sh_di.c
      1          /**HEADER********************************************************************
      2          * 
      3          * Copyright (c) 2008 Freescale Semiconductor;
      4          * All Rights Reserved
      5          *
      6          * Copyright (c) 2004-2008 Embedded Access Inc.;
      7          * All Rights Reserved
      8          *
      9          * Copyright (c) 1989-2008 ARC International;
     10          * All Rights Reserved
     11          *
     12          *************************************************************************** 
     13          *
     14          * THIS SOFTWARE IS PROVIDED BY FREESCALE "AS IS" AND ANY EXPRESSED OR 
     15          * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
     16          * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  
     17          * IN NO EVENT SHALL FREESCALE OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
     18          * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
     19          * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
     20          * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
     21          * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
     22          * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
     23          * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
     24          * THE POSSIBILITY OF SUCH DAMAGE.
     25          *
     26          **************************************************************************
     27          *
     28          * $FileName: sh_di.c$
     29          * $Version : 3.8.9.0$
     30          * $Date    : Sep-19-2011$
     31          *
     32          * Comments:
     33          *
     34          *   This file contains the source for an MFS shell function.
     35          *
     36          *END************************************************************************/
     37          
     38          
     39          #include <string.h>
     40          #include <mqx.h>
     41          #include <fio.h>
     42          #include <mfs.h>
     43          #include <shell.h>
     44          #include <sh_mfs.h>
     45          
     46          
     47          #define SECTOR_SIZE MFS_DEFAULT_SECTOR_SIZE
     48          
     49          typedef struct 
     50          {
     51             uchar    JMP[3];
     52             uchar    OEMNAME[8];
     53             uchar    BPB_SECTOR_SIZE[2];
     54             uchar    SECTORS_PER_CLUSTER[1];
     55             uchar    RESERVED_SECTORS[2];
     56             uchar    NUMBER_OF_FAT[1];
     57             uchar    ROOT_ENTRIES[2];
     58             uchar    NUMBER_SECTORS[2];
     59             uchar    MEDIA_TYPE[1];
     60             uchar    SECTORS_PER_FAT[2];
     61             uchar    SECTORS_PER_TRACK[2];
     62             uchar    NUM_HEADS[2];
     63             uchar    HIDDEN_SECTORS[4];
     64             uchar    MEGA_SECTORS[4];
     65          
     66             uchar    FAT_SIZE[4];
     67             uchar    EXT_FLAGS[2];
     68             uchar    FS_VER[2];
     69             uchar    ROOT_CLUSTER[4];
     70             uchar    FS_INFO[2];
     71             uchar    BK_BOOT_SEC[2];
     72             uchar    RESERVED[12];
     73             uchar    DRVNUM[1];
     74             uchar    RESERVED1[1];
     75             uchar    BOOTSIG[1];
     76             uchar    VOLID[4];
     77             uchar    VOLLAB[11];
     78             uchar    FILSYSTYPE[8];
     79          } BIOS_PARAM_STRUCT_DISK, _PTR_ BIOS_PARAM_STRUCT_DISK_PTR;
     80          
     81          /* The file system info struct. For FAT32 only */
     82          typedef struct filesystem_info_disk  {
     83             uchar    LEAD_SIG[4];
     84             uchar    RESERVED1[480];
     85             uchar    STRUCT_SIG[4];
     86             uchar    FREE_COUNT[4];
     87             uchar    NEXT_FREE[4];
     88             uchar    RESERVED2[12];
     89             uchar    TRAIL_SIG[4];  
     90          } FILESYSTEM_INFO_DISK, _PTR_ FILESYSTEM_INFO_DISK_PTR;
     91          
     92          
     93          

   \                                 In section .text, align 2, keep-with-next
     94          static uint_32 print_bpb(pointer bpb) {
   \                     print_bpb:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
     95             BIOS_PARAM_STRUCT_DISK_PTR bpb_ptr = (BIOS_PARAM_STRUCT_DISK_PTR) bpb;
     96             uint_32 i,backup=0;
   \   00000006   0x2500             MOVS     R5,#+0
     97          
     98          
     99             printf("OEMNAME            = ");
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable2_2
   \   0000000C   0x.... 0x....      BL       _io_printf
    100             for(i=0;i<8;i++) printf("%c", bpb_ptr->OEMNAME[i]);  printf("\n");
   \   00000010   0x2600             MOVS     R6,#+0
   \   00000012   0xE005             B.N      ??print_bpb_0
   \                     ??print_bpb_1:
   \   00000014   0x1930             ADDS     R0,R6,R4
   \   00000016   0x78C1             LDRB     R1,[R0, #+3]
   \   00000018   0x....             ADR.N    R0,??DataTable1  ;; 0x25, 0x63, 0x00, 0x00
   \   0000001A   0x.... 0x....      BL       _io_printf
   \   0000001E   0x1C76             ADDS     R6,R6,#+1
   \                     ??print_bpb_0:
   \   00000020   0x2E08             CMP      R6,#+8
   \   00000022   0xD3F7             BCC.N    ??print_bpb_1
   \   00000024   0x....             ADR.N    R0,??DataTable1_1  ;; "\n"
   \   00000026   0x.... 0x....      BL       _io_printf
    101             printf("SECTOR_SIZE        = %02x%02x\n",bpb_ptr->BPB_SECTOR_SIZE[1] ,bpb_ptr->BPB_SECTOR_SIZE[0] );
   \   0000002A   0x7AE2             LDRB     R2,[R4, #+11]
   \   0000002C   0x7B21             LDRB     R1,[R4, #+12]
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable2_3
   \   00000032   0x.... 0x....      BL       _io_printf
    102             printf("SECTORS_PER_CLUSTER= %02x%\n",(uint_32) bpb_ptr->SECTORS_PER_CLUSTER[0]  );
   \   00000036   0x7B61             LDRB     R1,[R4, #+13]
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable2_4
   \   0000003C   0x.... 0x....      BL       _io_printf
    103             printf("RESERVED_SECTORS   = %02x%02x\n",bpb_ptr->RESERVED_SECTORS[1] ,bpb_ptr->RESERVED_SECTORS[0] );
   \   00000040   0x7BA2             LDRB     R2,[R4, #+14]
   \   00000042   0x7BE1             LDRB     R1,[R4, #+15]
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable2_5
   \   00000048   0x.... 0x....      BL       _io_printf
    104             printf("NUMBER_OF_FAT      = %02x\n",(uint_32) bpb_ptr->NUMBER_OF_FAT[0]  );
   \   0000004C   0x7C21             LDRB     R1,[R4, #+16]
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable2_6
   \   00000052   0x.... 0x....      BL       _io_printf
    105             printf("ROOT_ENTRIES       = %02x%02x\n",bpb_ptr->ROOT_ENTRIES[1] ,bpb_ptr->ROOT_ENTRIES[0] );
   \   00000056   0x7C62             LDRB     R2,[R4, #+17]
   \   00000058   0x7CA1             LDRB     R1,[R4, #+18]
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable2_7
   \   0000005E   0x.... 0x....      BL       _io_printf
    106             printf("NUMBER_SECTORS     = %02x%02x\n",bpb_ptr->NUMBER_SECTORS[1] ,bpb_ptr->NUMBER_SECTORS[0] );
   \   00000062   0x7CE2             LDRB     R2,[R4, #+19]
   \   00000064   0x7D21             LDRB     R1,[R4, #+20]
   \   00000066   0x.... 0x....      LDR.W    R0,??DataTable2_8
   \   0000006A   0x.... 0x....      BL       _io_printf
    107             printf("MEDIA_TYPE         = %02x\n",(uint_32) bpb_ptr->MEDIA_TYPE[0] );
   \   0000006E   0x7D61             LDRB     R1,[R4, #+21]
   \   00000070   0x.... 0x....      LDR.W    R0,??DataTable2_9
   \   00000074   0x.... 0x....      BL       _io_printf
    108             printf("SECTORS_PER_FAT    = %02x%02x\n",bpb_ptr->SECTORS_PER_FAT[1] ,bpb_ptr->SECTORS_PER_FAT[0] );
   \   00000078   0x7DA2             LDRB     R2,[R4, #+22]
   \   0000007A   0x7DE1             LDRB     R1,[R4, #+23]
   \   0000007C   0x.... 0x....      LDR.W    R0,??DataTable2_10
   \   00000080   0x.... 0x....      BL       _io_printf
    109             printf("SECTORS_PER_TRACK  = %02x%02x\n",bpb_ptr->SECTORS_PER_TRACK[1] ,bpb_ptr->SECTORS_PER_TRACK[0] );
   \   00000084   0x7E22             LDRB     R2,[R4, #+24]
   \   00000086   0x7E61             LDRB     R1,[R4, #+25]
   \   00000088   0x.... 0x....      LDR.W    R0,??DataTable2_11
   \   0000008C   0x.... 0x....      BL       _io_printf
    110             printf("NUM_HEADS          = %02x%02x\n",bpb_ptr->NUM_HEADS[1] ,bpb_ptr->NUM_HEADS[0] );
   \   00000090   0x7EA2             LDRB     R2,[R4, #+26]
   \   00000092   0x7EE1             LDRB     R1,[R4, #+27]
   \   00000094   0x.... 0x....      LDR.W    R0,??DataTable2_12
   \   00000098   0x.... 0x....      BL       _io_printf
    111             printf("HIDDEN_SECTORS     = %02x%02x%02x%02x\n",bpb_ptr->HIDDEN_SECTORS[3] ,bpb_ptr->HIDDEN_SECTORS[2],bpb_ptr->HIDDEN_SECTORS[1] ,bpb_ptr->HIDDEN_SECTORS[0] );
   \   0000009C   0x7F20             LDRB     R0,[R4, #+28]
   \   0000009E   0x9000             STR      R0,[SP, #+0]
   \   000000A0   0x7F63             LDRB     R3,[R4, #+29]
   \   000000A2   0x7FA2             LDRB     R2,[R4, #+30]
   \   000000A4   0x7FE1             LDRB     R1,[R4, #+31]
   \   000000A6   0x.... 0x....      LDR.W    R0,??DataTable2_13
   \   000000AA   0x.... 0x....      BL       _io_printf
    112             printf("MEGA_SECTORS       = %02x%02x%02x%02x\n",bpb_ptr->MEGA_SECTORS[3] ,bpb_ptr->MEGA_SECTORS[2],bpb_ptr->MEGA_SECTORS[1] ,bpb_ptr->MEGA_SECTORS[0] );
   \   000000AE   0xF894 0x0020      LDRB     R0,[R4, #+32]
   \   000000B2   0x9000             STR      R0,[SP, #+0]
   \   000000B4   0xF894 0x3021      LDRB     R3,[R4, #+33]
   \   000000B8   0xF894 0x2022      LDRB     R2,[R4, #+34]
   \   000000BC   0xF894 0x1023      LDRB     R1,[R4, #+35]
   \   000000C0   0x....             LDR.N    R0,??DataTable2_14
   \   000000C2   0x.... 0x....      BL       _io_printf
    113          
    114             if ( bpb_ptr->SECTORS_PER_FAT[1]|| bpb_ptr->SECTORS_PER_FAT[0] ) {
   \   000000C6   0x7DE0             LDRB     R0,[R4, #+23]
   \   000000C8   0x2800             CMP      R0,#+0
   \   000000CA   0xD174             BNE.N    ??print_bpb_2
   \   000000CC   0x7DA0             LDRB     R0,[R4, #+22]
   \   000000CE   0x2800             CMP      R0,#+0
   \   000000D0   0xD171             BNE.N    ??print_bpb_2
    115                // FAT 12/16
    116          
    117             } else {
    118             
    119                // FAT 32
    120                printf("FAT_SIZE           = %02x%02x%02x%02x\n",bpb_ptr->FAT_SIZE[3] ,bpb_ptr->FAT_SIZE[2],bpb_ptr->FAT_SIZE[1] ,bpb_ptr->FAT_SIZE[0] );
   \   000000D2   0xF894 0x0024      LDRB     R0,[R4, #+36]
   \   000000D6   0x9000             STR      R0,[SP, #+0]
   \   000000D8   0xF894 0x3025      LDRB     R3,[R4, #+37]
   \   000000DC   0xF894 0x2026      LDRB     R2,[R4, #+38]
   \   000000E0   0xF894 0x1027      LDRB     R1,[R4, #+39]
   \   000000E4   0x....             LDR.N    R0,??DataTable2_15
   \   000000E6   0x.... 0x....      BL       _io_printf
    121                printf("EXT_FLAGS          = %02x%02x\n",bpb_ptr->EXT_FLAGS[1] ,bpb_ptr->EXT_FLAGS[0] );
   \   000000EA   0xF894 0x2028      LDRB     R2,[R4, #+40]
   \   000000EE   0xF894 0x1029      LDRB     R1,[R4, #+41]
   \   000000F2   0x....             LDR.N    R0,??DataTable2_16
   \   000000F4   0x.... 0x....      BL       _io_printf
    122                printf("FS_VER             = %02x%02x\n",bpb_ptr->FS_VER[1] ,bpb_ptr->FS_VER[0] );
   \   000000F8   0xF894 0x202A      LDRB     R2,[R4, #+42]
   \   000000FC   0xF894 0x102B      LDRB     R1,[R4, #+43]
   \   00000100   0x....             LDR.N    R0,??DataTable2_17
   \   00000102   0x.... 0x....      BL       _io_printf
    123          
    124                printf("ROOT_CLUSTER       = %02x%02x%02x%02x\n",bpb_ptr->ROOT_CLUSTER[3] ,bpb_ptr->ROOT_CLUSTER[2],bpb_ptr->ROOT_CLUSTER[1] ,bpb_ptr->ROOT_CLUSTER[0] );
   \   00000106   0xF894 0x002C      LDRB     R0,[R4, #+44]
   \   0000010A   0x9000             STR      R0,[SP, #+0]
   \   0000010C   0xF894 0x302D      LDRB     R3,[R4, #+45]
   \   00000110   0xF894 0x202E      LDRB     R2,[R4, #+46]
   \   00000114   0xF894 0x102F      LDRB     R1,[R4, #+47]
   \   00000118   0x....             LDR.N    R0,??DataTable2_18
   \   0000011A   0x.... 0x....      BL       _io_printf
    125                printf("FS_INFO            = %02x%02x\n",bpb_ptr->FS_INFO[1] ,bpb_ptr->FS_INFO[0] );
   \   0000011E   0xF894 0x2030      LDRB     R2,[R4, #+48]
   \   00000122   0xF894 0x1031      LDRB     R1,[R4, #+49]
   \   00000126   0x....             LDR.N    R0,??DataTable2_19
   \   00000128   0x.... 0x....      BL       _io_printf
    126                printf("BK_BOOT_SEC        = %02x%02x\n",bpb_ptr->BK_BOOT_SEC[1] ,bpb_ptr->BK_BOOT_SEC[0] );
   \   0000012C   0xF894 0x2032      LDRB     R2,[R4, #+50]
   \   00000130   0xF894 0x1033      LDRB     R1,[R4, #+51]
   \   00000134   0x....             LDR.N    R0,??DataTable2_20
   \   00000136   0x.... 0x....      BL       _io_printf
    127          
    128                backup = (bpb_ptr->BK_BOOT_SEC[1] << 8) | bpb_ptr->BK_BOOT_SEC[0];
   \   0000013A   0xF894 0x0033      LDRB     R0,[R4, #+51]
   \   0000013E   0xF894 0x1032      LDRB     R1,[R4, #+50]
   \   00000142   0xEA51 0x2500      ORRS     R5,R1,R0, LSL #+8
    129                printf("DRVNUM             = %02x\n",(uint_32) bpb_ptr->DRVNUM[0] );
   \   00000146   0xF894 0x1040      LDRB     R1,[R4, #+64]
   \   0000014A   0x....             LDR.N    R0,??DataTable2_21
   \   0000014C   0x.... 0x....      BL       _io_printf
    130                printf("BOOTSIG            = %02x\n",(uint_32) bpb_ptr->BOOTSIG[0] );
   \   00000150   0xF894 0x1042      LDRB     R1,[R4, #+66]
   \   00000154   0x....             LDR.N    R0,??DataTable2_22
   \   00000156   0x.... 0x....      BL       _io_printf
    131                printf("VOLID              = %02x%02x%02x%02x\n",bpb_ptr->VOLID[3] ,bpb_ptr->VOLID[2],bpb_ptr->VOLID[1] ,bpb_ptr->VOLID[0] );
   \   0000015A   0xF894 0x0043      LDRB     R0,[R4, #+67]
   \   0000015E   0x9000             STR      R0,[SP, #+0]
   \   00000160   0xF894 0x3044      LDRB     R3,[R4, #+68]
   \   00000164   0xF894 0x2045      LDRB     R2,[R4, #+69]
   \   00000168   0xF894 0x1046      LDRB     R1,[R4, #+70]
   \   0000016C   0x....             LDR.N    R0,??DataTable2_23
   \   0000016E   0x.... 0x....      BL       _io_printf
    132                printf("VOLLAB             = ");
   \   00000172   0x....             LDR.N    R0,??DataTable2_24
   \   00000174   0x.... 0x....      BL       _io_printf
    133                for(i=0;i<11;i++) printf("%c", bpb_ptr->VOLLAB[i]);  printf("\n");
   \   00000178   0x2600             MOVS     R6,#+0
   \   0000017A   0xE006             B.N      ??print_bpb_3
   \                     ??print_bpb_4:
   \   0000017C   0x1930             ADDS     R0,R6,R4
   \   0000017E   0xF890 0x1047      LDRB     R1,[R0, #+71]
   \   00000182   0x....             ADR.N    R0,??DataTable1  ;; 0x25, 0x63, 0x00, 0x00
   \   00000184   0x.... 0x....      BL       _io_printf
   \   00000188   0x1C76             ADDS     R6,R6,#+1
   \                     ??print_bpb_3:
   \   0000018A   0x2E0B             CMP      R6,#+11
   \   0000018C   0xD3F6             BCC.N    ??print_bpb_4
   \   0000018E   0x....             ADR.N    R0,??DataTable1_1  ;; "\n"
   \   00000190   0x.... 0x....      BL       _io_printf
    134                printf("FILSYSTYPE         = ");
   \   00000194   0x....             LDR.N    R0,??DataTable2_25
   \   00000196   0x.... 0x....      BL       _io_printf
    135                for(i=0;i<8;i++) printf("%c", bpb_ptr->FILSYSTYPE[i]);  printf("\n");
   \   0000019A   0x2600             MOVS     R6,#+0
   \   0000019C   0xE006             B.N      ??print_bpb_5
   \                     ??print_bpb_6:
   \   0000019E   0x1930             ADDS     R0,R6,R4
   \   000001A0   0xF890 0x1052      LDRB     R1,[R0, #+82]
   \   000001A4   0x....             ADR.N    R0,??DataTable1  ;; 0x25, 0x63, 0x00, 0x00
   \   000001A6   0x.... 0x....      BL       _io_printf
   \   000001AA   0x1C76             ADDS     R6,R6,#+1
   \                     ??print_bpb_5:
   \   000001AC   0x2E08             CMP      R6,#+8
   \   000001AE   0xD3F6             BCC.N    ??print_bpb_6
   \   000001B0   0x....             ADR.N    R0,??DataTable1_1  ;; "\n"
   \   000001B2   0x.... 0x....      BL       _io_printf
    136          
    137             }
    138             return backup;
   \                     ??print_bpb_2:
   \   000001B6   0x0028             MOVS     R0,R5
   \   000001B8   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    139          }
    140          
    141          

   \                                 In section .text, align 2, keep-with-next
    142          static void print_fsi(pointer bpb) 
    143          {
   \                     print_fsi:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    144             FILESYSTEM_INFO_DISK_PTR bpb_ptr = (FILESYSTEM_INFO_DISK_PTR) bpb;
    145             
    146             printf("LEAD_SIG   = %02x%02x%02x%02x\n",bpb_ptr->LEAD_SIG[3],  bpb_ptr->LEAD_SIG[2],  bpb_ptr->LEAD_SIG[1],  bpb_ptr->LEAD_SIG[0] );
   \   00000006   0x7820             LDRB     R0,[R4, #+0]
   \   00000008   0x9000             STR      R0,[SP, #+0]
   \   0000000A   0x7863             LDRB     R3,[R4, #+1]
   \   0000000C   0x78A2             LDRB     R2,[R4, #+2]
   \   0000000E   0x78E1             LDRB     R1,[R4, #+3]
   \   00000010   0x....             LDR.N    R0,??DataTable2_26
   \   00000012   0x.... 0x....      BL       _io_printf
    147             printf("STRUCT_SIG = %02x%02x%02x%02x\n",bpb_ptr->STRUCT_SIG[3],bpb_ptr->STRUCT_SIG[2],bpb_ptr->STRUCT_SIG[1],bpb_ptr->STRUCT_SIG[0] );
   \   00000016   0xF894 0x01E4      LDRB     R0,[R4, #+484]
   \   0000001A   0x9000             STR      R0,[SP, #+0]
   \   0000001C   0xF894 0x31E5      LDRB     R3,[R4, #+485]
   \   00000020   0xF894 0x21E6      LDRB     R2,[R4, #+486]
   \   00000024   0xF894 0x11E7      LDRB     R1,[R4, #+487]
   \   00000028   0x....             LDR.N    R0,??DataTable2_27
   \   0000002A   0x.... 0x....      BL       _io_printf
    148             printf("FREE_COUNT = %02x%02x%02x%02x\n",bpb_ptr->FREE_COUNT[3],bpb_ptr->FREE_COUNT[2],bpb_ptr->FREE_COUNT[1],bpb_ptr->FREE_COUNT[0] );
   \   0000002E   0xF894 0x01E8      LDRB     R0,[R4, #+488]
   \   00000032   0x9000             STR      R0,[SP, #+0]
   \   00000034   0xF894 0x31E9      LDRB     R3,[R4, #+489]
   \   00000038   0xF894 0x21EA      LDRB     R2,[R4, #+490]
   \   0000003C   0xF894 0x11EB      LDRB     R1,[R4, #+491]
   \   00000040   0x....             LDR.N    R0,??DataTable2_28
   \   00000042   0x.... 0x....      BL       _io_printf
    149             printf("NEXT_FREE  = %02x%02x%02x%02x\n",bpb_ptr->NEXT_FREE[3], bpb_ptr->NEXT_FREE[2], bpb_ptr->NEXT_FREE[1], bpb_ptr->NEXT_FREE[0] );
   \   00000046   0xF894 0x01EC      LDRB     R0,[R4, #+492]
   \   0000004A   0x9000             STR      R0,[SP, #+0]
   \   0000004C   0xF894 0x31ED      LDRB     R3,[R4, #+493]
   \   00000050   0xF894 0x21EE      LDRB     R2,[R4, #+494]
   \   00000054   0xF894 0x11EF      LDRB     R1,[R4, #+495]
   \   00000058   0x....             LDR.N    R0,??DataTable2_29
   \   0000005A   0x.... 0x....      BL       _io_printf
    150             printf("TRAIL_SIG  = %02x%02x%02x%02x\n",bpb_ptr->TRAIL_SIG[3], bpb_ptr->TRAIL_SIG[2], bpb_ptr->TRAIL_SIG[1], bpb_ptr->TRAIL_SIG[0] );
   \   0000005E   0xF894 0x01FC      LDRB     R0,[R4, #+508]
   \   00000062   0x9000             STR      R0,[SP, #+0]
   \   00000064   0xF894 0x31FD      LDRB     R3,[R4, #+509]
   \   00000068   0xF894 0x21FE      LDRB     R2,[R4, #+510]
   \   0000006C   0xF894 0x11FF      LDRB     R1,[R4, #+511]
   \   00000070   0x....             LDR.N    R0,??DataTable2_30
   \   00000072   0x.... 0x....      BL       _io_printf
    151          }
   \   00000076   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    152          
    153          
    154          /*FUNCTION*-------------------------------------------------------------------
    155          *
    156          * Function Name    :   Shell_di
    157          * Returned Value   :  int_32 error code
    158          * Comments  :  Reads from a file .
    159          *
    160          *END*---------------------------------------------------------------------*/
    161          

   \                                 In section .text, align 2, keep-with-next
    162          int_32  Shell_di(int_32 argc, char_ptr argv[] )
    163          { /* Body */
   \                     Shell_di:
   \   00000000   0xE92D 0x43FE      PUSH     {R1-R9,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    164             boolean           print_usage, shorthelp = FALSE;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x9001             STR      R0,[SP, #+4]
    165             int_32            return_code = SHELL_EXIT_SUCCESS;
   \   0000000C   0x2700             MOVS     R7,#+0
    166             int_32            offset;
    167          
    168             MQX_FILE_PTR      fd, fs;
    169          
    170             uint_32           backup=0;
   \   0000000E   0xF05F 0x0800      MOVS     R8,#+0
    171             uchar_ptr         buffer=NULL;
   \   00000012   0xF05F 0x0900      MOVS     R9,#+0
    172          
    173             print_usage = Shell_check_help_request(argc, argv, &shorthelp );
   \   00000016   0xAA01             ADD      R2,SP,#+4
   \   00000018   0x0029             MOVS     R1,R5
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0x.... 0x....      BL       Shell_check_help_request
   \   00000020   0x0006             MOVS     R6,R0
    174          
    175             if (!print_usage)  {
   \   00000022   0x2E00             CMP      R6,#+0
   \   00000024   0xF040 0x80B0      BNE.W    ??Shell_di_0
    176                if ((argc < 2 ) || (argc > 3)) {
   \   00000028   0x1EA0             SUBS     R0,R4,#+2
   \   0000002A   0x2802             CMP      R0,#+2
   \   0000002C   0xD306             BCC.N    ??Shell_di_1
    177                   printf("Invalid number of parameters\n");
   \   0000002E   0x....             LDR.N    R0,??DataTable2_31
   \   00000030   0x.... 0x....      BL       _io_printf
    178                   return_code = SHELL_EXIT_ERROR;
   \   00000034   0xF05F 0x37FF      MOVS     R7,#-1
    179                   print_usage=TRUE;
   \   00000038   0x2601             MOVS     R6,#+1
   \   0000003A   0xE0A5             B.N      ??Shell_di_0
    180                } else if ( !Shell_parse_uint_32(argv[1], (uint_32_ptr) &offset ))  {
   \                     ??Shell_di_1:
   \   0000003C   0xA902             ADD      R1,SP,#+8
   \   0000003E   0x6868             LDR      R0,[R5, #+4]
   \   00000040   0x.... 0x....      BL       Shell_parse_uint_32
   \   00000044   0x2800             CMP      R0,#+0
   \   00000046   0xD106             BNE.N    ??Shell_di_2
    181                   printf("Error, invalid length\n");
   \   00000048   0x....             LDR.N    R0,??DataTable2_32
   \   0000004A   0x.... 0x....      BL       _io_printf
    182                   return_code = SHELL_EXIT_ERROR;
   \   0000004E   0xF05F 0x37FF      MOVS     R7,#-1
    183                   print_usage=TRUE;
   \   00000052   0x2601             MOVS     R6,#+1
   \   00000054   0xE098             B.N      ??Shell_di_0
    184                } else {
    185                   buffer = _mem_alloc(SECTOR_SIZE);
   \                     ??Shell_di_2:
   \   00000056   0xF44F 0x7000      MOV      R0,#+512
   \   0000005A   0x.... 0x....      BL       _lwmem_alloc
   \   0000005E   0x4681             MOV      R9,R0
    186                   if (buffer==NULL) {
   \   00000060   0xF1B9 0x0F00      CMP      R9,#+0
   \   00000064   0xD105             BNE.N    ??Shell_di_3
    187                      printf("Error, unable to allocate sector buffer\n");
   \   00000066   0x....             LDR.N    R0,??DataTable2_33
   \   00000068   0x.... 0x....      BL       _io_printf
    188                      return  SHELL_EXIT_ERROR;
   \   0000006C   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000070   0xE09F             B.N      ??Shell_di_4
    189                   }
    190          
    191                   if (argc==3) {
   \                     ??Shell_di_3:
   \   00000072   0x2C03             CMP      R4,#+3
   \   00000074   0xD105             BNE.N    ??Shell_di_5
    192                      fd = fopen(argv[2], "b");
   \   00000076   0x....             ADR.N    R1,??DataTable2  ;; "b"
   \   00000078   0x68A8             LDR      R0,[R5, #+8]
   \   0000007A   0x.... 0x....      BL       _io_fopen
   \   0000007E   0x9000             STR      R0,[SP, #+0]
   \   00000080   0xE007             B.N      ??Shell_di_6
    193                   } else {   
    194                      fs = Shell_get_current_filesystem(argv);
   \                     ??Shell_di_5:
   \   00000082   0x0028             MOVS     R0,R5
   \   00000084   0x.... 0x....      BL       Shell_get_current_filesystem
    195                      _io_ioctl(fs, IO_IOCTL_GET_DEVICE_HANDLE, &fd);
   \   00000088   0xAA00             ADD      R2,SP,#+0
   \   0000008A   0xF240 0x1127      MOVW     R1,#+295
   \   0000008E   0x.... 0x....      BL       _io_ioctl
    196                   }
    197                        
    198          
    199                   if (fd)  {
   \                     ??Shell_di_6:
   \   00000092   0x9800             LDR      R0,[SP, #+0]
   \   00000094   0x2800             CMP      R0,#+0
   \   00000096   0xD074             BEQ.N    ??Shell_di_7
    200                      if (fseek(fd, offset, IO_SEEK_SET) == IO_ERROR)  {
   \   00000098   0x2201             MOVS     R2,#+1
   \   0000009A   0x9902             LDR      R1,[SP, #+8]
   \   0000009C   0x9800             LDR      R0,[SP, #+0]
   \   0000009E   0x.... 0x....      BL       _io_fseek
   \   000000A2   0xF110 0x0F01      CMN      R0,#+1
   \   000000A6   0xD106             BNE.N    ??Shell_di_8
    201                         printf("Error, unable to seek to sector %s.\n", argv[1] );
   \   000000A8   0x6869             LDR      R1,[R5, #+4]
   \   000000AA   0x....             LDR.N    R0,??DataTable2_34
   \   000000AC   0x.... 0x....      BL       _io_printf
    202                         return_code = SHELL_EXIT_ERROR;
   \   000000B0   0xF05F 0x37FF      MOVS     R7,#-1
   \   000000B4   0xE00C             B.N      ??Shell_di_9
    203                      } else if (_io_read(fd, (char_ptr) buffer, 1) != 1) {
   \                     ??Shell_di_8:
   \   000000B6   0x2201             MOVS     R2,#+1
   \   000000B8   0x4649             MOV      R1,R9
   \   000000BA   0x9800             LDR      R0,[SP, #+0]
   \   000000BC   0x.... 0x....      BL       _io_read
   \   000000C0   0x2801             CMP      R0,#+1
   \   000000C2   0xD005             BEQ.N    ??Shell_di_9
    204                         printf("Error, unable to read sector %s.\n", argv[1] );
   \   000000C4   0x6869             LDR      R1,[R5, #+4]
   \   000000C6   0x....             LDR.N    R0,??DataTable2_35
   \   000000C8   0x.... 0x....      BL       _io_printf
    205                         return_code = SHELL_EXIT_ERROR;
   \   000000CC   0xF05F 0x37FF      MOVS     R7,#-1
    206                      }
    207                      
    208                      if (return_code == SHELL_EXIT_SUCCESS) {
   \                     ??Shell_di_9:
   \   000000D0   0x2F00             CMP      R7,#+0
   \   000000D2   0xD12D             BNE.N    ??Shell_di_10
    209                         printf("\n");
   \   000000D4   0x....             ADR.N    R0,??DataTable2_1  ;; "\n"
   \   000000D6   0x.... 0x....      BL       _io_printf
    210                         backup = print_bpb(buffer);
   \   000000DA   0x4648             MOV      R0,R9
   \   000000DC   0x.... 0x....      BL       print_bpb
   \   000000E0   0x4680             MOV      R8,R0
    211                         if (backup) {
   \   000000E2   0xF1B8 0x0F00      CMP      R8,#+0
   \   000000E6   0xD023             BEQ.N    ??Shell_di_10
    212                            if (fseek(fd, backup, IO_SEEK_SET) == IO_ERROR)  {
   \   000000E8   0x2201             MOVS     R2,#+1
   \   000000EA   0x4641             MOV      R1,R8
   \   000000EC   0x9800             LDR      R0,[SP, #+0]
   \   000000EE   0x.... 0x....      BL       _io_fseek
   \   000000F2   0xF110 0x0F01      CMN      R0,#+1
   \   000000F6   0xD106             BNE.N    ??Shell_di_11
    213                               printf("Error, unable to seek to sector %s.\n", argv[1] );
   \   000000F8   0x6869             LDR      R1,[R5, #+4]
   \   000000FA   0x....             LDR.N    R0,??DataTable2_34
   \   000000FC   0x.... 0x....      BL       _io_printf
    214                               return_code = SHELL_EXIT_ERROR;
   \   00000100   0xF05F 0x37FF      MOVS     R7,#-1
   \   00000104   0xE00C             B.N      ??Shell_di_12
    215                            } else if (_io_read(fd, (char_ptr) buffer, 1) != 1) {
   \                     ??Shell_di_11:
   \   00000106   0x2201             MOVS     R2,#+1
   \   00000108   0x4649             MOV      R1,R9
   \   0000010A   0x9800             LDR      R0,[SP, #+0]
   \   0000010C   0x.... 0x....      BL       _io_read
   \   00000110   0x2801             CMP      R0,#+1
   \   00000112   0xD005             BEQ.N    ??Shell_di_12
    216                               printf("Error, unable to read sector %s.\n", argv[1] );
   \   00000114   0x6869             LDR      R1,[R5, #+4]
   \   00000116   0x....             LDR.N    R0,??DataTable2_35
   \   00000118   0x.... 0x....      BL       _io_printf
    217                               return_code = SHELL_EXIT_ERROR;
   \   0000011C   0xF05F 0x37FF      MOVS     R7,#-1
    218                            }  
    219                            if (return_code == SHELL_EXIT_SUCCESS) {
   \                     ??Shell_di_12:
   \   00000120   0x2F00             CMP      R7,#+0
   \   00000122   0xD105             BNE.N    ??Shell_di_10
    220                               printf("\n");
   \   00000124   0x....             ADR.N    R0,??DataTable2_1  ;; "\n"
   \   00000126   0x.... 0x....      BL       _io_printf
    221                               print_bpb(buffer);
   \   0000012A   0x4648             MOV      R0,R9
   \   0000012C   0x.... 0x....      BL       print_bpb
    222                            }
    223                         }
    224                      }
    225                      if (fseek(fd, 1, IO_SEEK_SET) == IO_ERROR)  {
   \                     ??Shell_di_10:
   \   00000130   0x2201             MOVS     R2,#+1
   \   00000132   0x2101             MOVS     R1,#+1
   \   00000134   0x9800             LDR      R0,[SP, #+0]
   \   00000136   0x.... 0x....      BL       _io_fseek
   \   0000013A   0xF110 0x0F01      CMN      R0,#+1
   \   0000013E   0xD106             BNE.N    ??Shell_di_13
    226                         printf("Error, unable to seek to sector %s.\n", argv[1] );
   \   00000140   0x6869             LDR      R1,[R5, #+4]
   \   00000142   0x....             LDR.N    R0,??DataTable2_34
   \   00000144   0x.... 0x....      BL       _io_printf
    227                         return_code = SHELL_EXIT_ERROR;
   \   00000148   0xF05F 0x37FF      MOVS     R7,#-1
   \   0000014C   0xE00C             B.N      ??Shell_di_14
    228                      } else if (_io_read(fd, (char_ptr) buffer, 1) != 1) {
   \                     ??Shell_di_13:
   \   0000014E   0x2201             MOVS     R2,#+1
   \   00000150   0x4649             MOV      R1,R9
   \   00000152   0x9800             LDR      R0,[SP, #+0]
   \   00000154   0x.... 0x....      BL       _io_read
   \   00000158   0x2801             CMP      R0,#+1
   \   0000015A   0xD005             BEQ.N    ??Shell_di_14
    229                         printf("Error, unable to read sector %s.\n", argv[1] );
   \   0000015C   0x6869             LDR      R1,[R5, #+4]
   \   0000015E   0x....             LDR.N    R0,??DataTable2_35
   \   00000160   0x.... 0x....      BL       _io_printf
    230                         return_code = SHELL_EXIT_ERROR;
   \   00000164   0xF05F 0x37FF      MOVS     R7,#-1
    231                      }  
    232                      if (return_code == SHELL_EXIT_SUCCESS) {
   \                     ??Shell_di_14:
   \   00000168   0x2F00             CMP      R7,#+0
   \   0000016A   0xD105             BNE.N    ??Shell_di_15
    233                         printf("\n");
   \   0000016C   0x....             ADR.N    R0,??DataTable2_1  ;; "\n"
   \   0000016E   0x.... 0x....      BL       _io_printf
    234                         print_fsi(buffer);
   \   00000172   0x4648             MOV      R0,R9
   \   00000174   0x.... 0x....      BL       print_fsi
    235                      }
    236                      if (argc==3) {
   \                     ??Shell_di_15:
   \   00000178   0x2C03             CMP      R4,#+3
   \   0000017A   0xD102             BNE.N    ??Shell_di_7
    237                         fclose(fd);
   \   0000017C   0x9800             LDR      R0,[SP, #+0]
   \   0000017E   0x.... 0x....      BL       _io_fclose
    238                      }
    239                   }
    240                   _mem_free(buffer);
   \                     ??Shell_di_7:
   \   00000182   0x4648             MOV      R0,R9
   \   00000184   0x.... 0x....      BL       _lwmem_free
    241                }
    242             }
    243             
    244             
    245             if (print_usage)  {
   \                     ??Shell_di_0:
   \   00000188   0x2E00             CMP      R6,#+0
   \   0000018A   0xD011             BEQ.N    ??Shell_di_16
    246                if (shorthelp)  {
   \   0000018C   0x9801             LDR      R0,[SP, #+4]
   \   0000018E   0x2800             CMP      R0,#+0
   \   00000190   0xD004             BEQ.N    ??Shell_di_17
    247                   printf("%s <sector> [<device>]\n", argv[0]);
   \   00000192   0x6829             LDR      R1,[R5, #+0]
   \   00000194   0x....             LDR.N    R0,??DataTable2_36
   \   00000196   0x.... 0x....      BL       _io_printf
   \   0000019A   0xE009             B.N      ??Shell_di_16
    248                } else  {
    249                   printf("Usage: %s <sector> [<device>]\n", argv[0]);
   \                     ??Shell_di_17:
   \   0000019C   0x6829             LDR      R1,[R5, #+0]
   \   0000019E   0x....             LDR.N    R0,??DataTable2_37
   \   000001A0   0x.... 0x....      BL       _io_printf
    250                   printf("   <sector>     = sector number\n");
   \   000001A4   0x....             LDR.N    R0,??DataTable2_38
   \   000001A6   0x.... 0x....      BL       _io_printf
    251                   printf("   <device>     = low level device\n");
   \   000001AA   0x....             LDR.N    R0,??DataTable2_39
   \   000001AC   0x.... 0x....      BL       _io_printf
    252                }
    253             }
    254             return return_code;
   \                     ??Shell_di_16:
   \   000001B0   0x0038             MOVS     R0,R7
   \                     ??Shell_di_4:
   \   000001B2   0xE8BD 0x83FE      POP      {R1-R9,PC}       ;; return
    255          } /* Endbody */

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x25 0x63          DC8      0x25, 0x63, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x0A 0x00          DC8      "\n",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x62 0x00          DC8      "b",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x0A 0x00          DC8      "\n",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x........         DC32     `?<Constant "OEMNAME            = ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x........         DC32     `?<Constant "SECTOR_SIZE        = ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x........         DC32     `?<Constant "SECTORS_PER_CLUSTER= ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x........         DC32     `?<Constant "RESERVED_SECTORS   = ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0x........         DC32     `?<Constant "NUMBER_OF_FAT      = ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   0x........         DC32     `?<Constant "ROOT_ENTRIES       = ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   0x........         DC32     `?<Constant "NUMBER_SECTORS     = ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \   00000000   0x........         DC32     `?<Constant "MEDIA_TYPE         = ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \   00000000   0x........         DC32     `?<Constant "SECTORS_PER_FAT    = ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_11:
   \   00000000   0x........         DC32     `?<Constant "SECTORS_PER_TRACK  = ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_12:
   \   00000000   0x........         DC32     `?<Constant "NUM_HEADS          = ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_13:
   \   00000000   0x........         DC32     `?<Constant "HIDDEN_SECTORS     = ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_14:
   \   00000000   0x........         DC32     `?<Constant "MEGA_SECTORS       = ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_15:
   \   00000000   0x........         DC32     `?<Constant "FAT_SIZE           = ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_16:
   \   00000000   0x........         DC32     `?<Constant "EXT_FLAGS          = ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_17:
   \   00000000   0x........         DC32     `?<Constant "FS_VER             = ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_18:
   \   00000000   0x........         DC32     `?<Constant "ROOT_CLUSTER       = ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_19:
   \   00000000   0x........         DC32     `?<Constant "FS_INFO            = ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_20:
   \   00000000   0x........         DC32     `?<Constant "BK_BOOT_SEC        = ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_21:
   \   00000000   0x........         DC32     `?<Constant "DRVNUM             = ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_22:
   \   00000000   0x........         DC32     `?<Constant "BOOTSIG            = ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_23:
   \   00000000   0x........         DC32     `?<Constant "VOLID              = ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_24:
   \   00000000   0x........         DC32     `?<Constant "VOLLAB             = ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_25:
   \   00000000   0x........         DC32     `?<Constant "FILSYSTYPE         = ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_26:
   \   00000000   0x........         DC32     `?<Constant "LEAD_SIG   = %02x%02x...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_27:
   \   00000000   0x........         DC32     `?<Constant "STRUCT_SIG = %02x%02x...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_28:
   \   00000000   0x........         DC32     `?<Constant "FREE_COUNT = %02x%02x...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_29:
   \   00000000   0x........         DC32     `?<Constant "NEXT_FREE  = %02x%02x...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_30:
   \   00000000   0x........         DC32     `?<Constant "TRAIL_SIG  = %02x%02x...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_31:
   \   00000000   0x........         DC32     `?<Constant "Invalid number of par...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_32:
   \   00000000   0x........         DC32     `?<Constant "Error, invalid length\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_33:
   \   00000000   0x........         DC32     `?<Constant "Error, unable to allo...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_34:
   \   00000000   0x........         DC32     `?<Constant "Error, unable to seek...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_35:
   \   00000000   0x........         DC32     `?<Constant "Error, unable to read...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_36:
   \   00000000   0x........         DC32     `?<Constant "%s <sector> [<device>]\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_37:
   \   00000000   0x........         DC32     `?<Constant "Usage: %s <sector> [<...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_38:
   \   00000000   0x........         DC32     `?<Constant "   <sector>     = sec...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_39:
   \   00000000   0x........         DC32     `?<Constant "   <device>     = low...">`

   \                                 In section .rodata, align 4
   \                     `?<Constant "OEMNAME            = ">`:
   \   00000000   0x4F 0x45          DC8 "OEMNAME            = "
   \              0x4D 0x4E    
   \              0x41 0x4D    
   \              0x45 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x3D    
   \              0x20 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \   00000000   0x25 0x63          DC8 "%c"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 2
   \   00000000   0x0A 0x00          DC8 "\012"

   \                                 In section .rodata, align 4
   \                     `?<Constant "SECTOR_SIZE        = ...">`:
   \   00000000   0x53 0x45          DC8 "SECTOR_SIZE        = %02x%02x\012"
   \              0x43 0x54    
   \              0x4F 0x52    
   \              0x5F 0x53    
   \              0x49 0x5A    
   \              0x45 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x30 0x32    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x78 0x0A    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "SECTORS_PER_CLUSTER= ...">`:
   \   00000000   0x53 0x45          DC8 "SECTORS_PER_CLUSTER= %02x%\012"
   \              0x43 0x54    
   \              0x4F 0x52    
   \              0x53 0x5F    
   \              0x50 0x45    
   \              0x52 0x5F    
   \              0x43 0x4C    
   \              0x55 0x53    
   \              0x54 0x45    
   \              0x52 0x3D    
   \              0x20 0x25    
   \              0x30 0x32    
   \              0x78 0x25    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "RESERVED_SECTORS   = ...">`:
   \   00000000   0x52 0x45          DC8 "RESERVED_SECTORS   = %02x%02x\012"
   \              0x53 0x45    
   \              0x52 0x56    
   \              0x45 0x44    
   \              0x5F 0x53    
   \              0x45 0x43    
   \              0x54 0x4F    
   \              0x52 0x53    
   \              0x20 0x20    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x30 0x32    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x78 0x0A    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "NUMBER_OF_FAT      = ...">`:
   \   00000000   0x4E 0x55          DC8 "NUMBER_OF_FAT      = %02x\012"
   \              0x4D 0x42    
   \              0x45 0x52    
   \              0x5F 0x4F    
   \              0x46 0x5F    
   \              0x46 0x41    
   \              0x54 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x30 0x32    
   \              0x78 0x0A    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "ROOT_ENTRIES       = ...">`:
   \   00000000   0x52 0x4F          DC8 "ROOT_ENTRIES       = %02x%02x\012"
   \              0x4F 0x54    
   \              0x5F 0x45    
   \              0x4E 0x54    
   \              0x52 0x49    
   \              0x45 0x53    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x30 0x32    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x78 0x0A    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "NUMBER_SECTORS     = ...">`:
   \   00000000   0x4E 0x55          DC8 "NUMBER_SECTORS     = %02x%02x\012"
   \              0x4D 0x42    
   \              0x45 0x52    
   \              0x5F 0x53    
   \              0x45 0x43    
   \              0x54 0x4F    
   \              0x52 0x53    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x30 0x32    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x78 0x0A    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "MEDIA_TYPE         = ...">`:
   \   00000000   0x4D 0x45          DC8 "MEDIA_TYPE         = %02x\012"
   \              0x44 0x49    
   \              0x41 0x5F    
   \              0x54 0x59    
   \              0x50 0x45    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x30 0x32    
   \              0x78 0x0A    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "SECTORS_PER_FAT    = ...">`:
   \   00000000   0x53 0x45          DC8 "SECTORS_PER_FAT    = %02x%02x\012"
   \              0x43 0x54    
   \              0x4F 0x52    
   \              0x53 0x5F    
   \              0x50 0x45    
   \              0x52 0x5F    
   \              0x46 0x41    
   \              0x54 0x20    
   \              0x20 0x20    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x30 0x32    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x78 0x0A    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "SECTORS_PER_TRACK  = ...">`:
   \   00000000   0x53 0x45          DC8 "SECTORS_PER_TRACK  = %02x%02x\012"
   \              0x43 0x54    
   \              0x4F 0x52    
   \              0x53 0x5F    
   \              0x50 0x45    
   \              0x52 0x5F    
   \              0x54 0x52    
   \              0x41 0x43    
   \              0x4B 0x20    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x30 0x32    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x78 0x0A    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "NUM_HEADS          = ...">`:
   \   00000000   0x4E 0x55          DC8 "NUM_HEADS          = %02x%02x\012"
   \              0x4D 0x5F    
   \              0x48 0x45    
   \              0x41 0x44    
   \              0x53 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x30 0x32    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x78 0x0A    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "HIDDEN_SECTORS     = ...">`:
   \   00000000   0x48 0x49          DC8 "HIDDEN_SECTORS     = %02x%02x%02x%02x\012"
   \              0x44 0x44    
   \              0x45 0x4E    
   \              0x5F 0x53    
   \              0x45 0x43    
   \              0x54 0x4F    
   \              0x52 0x53    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x30 0x32    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x78 0x0A    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "MEGA_SECTORS       = ...">`:
   \   00000000   0x4D 0x45          DC8 "MEGA_SECTORS       = %02x%02x%02x%02x\012"
   \              0x47 0x41    
   \              0x5F 0x53    
   \              0x45 0x43    
   \              0x54 0x4F    
   \              0x52 0x53    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x30 0x32    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x78 0x0A    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "FAT_SIZE           = ...">`:
   \   00000000   0x46 0x41          DC8 "FAT_SIZE           = %02x%02x%02x%02x\012"
   \              0x54 0x5F    
   \              0x53 0x49    
   \              0x5A 0x45    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x30 0x32    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x78 0x0A    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "EXT_FLAGS          = ...">`:
   \   00000000   0x45 0x58          DC8 "EXT_FLAGS          = %02x%02x\012"
   \              0x54 0x5F    
   \              0x46 0x4C    
   \              0x41 0x47    
   \              0x53 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x30 0x32    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x78 0x0A    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "FS_VER             = ...">`:
   \   00000000   0x46 0x53          DC8 "FS_VER             = %02x%02x\012"
   \              0x5F 0x56    
   \              0x45 0x52    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x30 0x32    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x78 0x0A    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "ROOT_CLUSTER       = ...">`:
   \   00000000   0x52 0x4F          DC8 "ROOT_CLUSTER       = %02x%02x%02x%02x\012"
   \              0x4F 0x54    
   \              0x5F 0x43    
   \              0x4C 0x55    
   \              0x53 0x54    
   \              0x45 0x52    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x30 0x32    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x78 0x0A    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "FS_INFO            = ...">`:
   \   00000000   0x46 0x53          DC8 "FS_INFO            = %02x%02x\012"
   \              0x5F 0x49    
   \              0x4E 0x46    
   \              0x4F 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x30 0x32    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x78 0x0A    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "BK_BOOT_SEC        = ...">`:
   \   00000000   0x42 0x4B          DC8 "BK_BOOT_SEC        = %02x%02x\012"
   \              0x5F 0x42    
   \              0x4F 0x4F    
   \              0x54 0x5F    
   \              0x53 0x45    
   \              0x43 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x30 0x32    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x78 0x0A    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "DRVNUM             = ...">`:
   \   00000000   0x44 0x52          DC8 "DRVNUM             = %02x\012"
   \              0x56 0x4E    
   \              0x55 0x4D    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x30 0x32    
   \              0x78 0x0A    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "BOOTSIG            = ...">`:
   \   00000000   0x42 0x4F          DC8 "BOOTSIG            = %02x\012"
   \              0x4F 0x54    
   \              0x53 0x49    
   \              0x47 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x30 0x32    
   \              0x78 0x0A    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "VOLID              = ...">`:
   \   00000000   0x56 0x4F          DC8 "VOLID              = %02x%02x%02x%02x\012"
   \              0x4C 0x49    
   \              0x44 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x30 0x32    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x78 0x0A    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "VOLLAB             = ">`:
   \   00000000   0x56 0x4F          DC8 "VOLLAB             = "
   \              0x4C 0x4C    
   \              0x41 0x42    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x3D    
   \              0x20 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "FILSYSTYPE         = ">`:
   \   00000000   0x46 0x49          DC8 "FILSYSTYPE         = "
   \              0x4C 0x53    
   \              0x59 0x53    
   \              0x54 0x59    
   \              0x50 0x45    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x3D    
   \              0x20 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "LEAD_SIG   = %02x%02x...">`:
   \   00000000   0x4C 0x45          DC8 "LEAD_SIG   = %02x%02x%02x%02x\012"
   \              0x41 0x44    
   \              0x5F 0x53    
   \              0x49 0x47    
   \              0x20 0x20    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x30 0x32    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x78 0x0A    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "STRUCT_SIG = %02x%02x...">`:
   \   00000000   0x53 0x54          DC8 "STRUCT_SIG = %02x%02x%02x%02x\012"
   \              0x52 0x55    
   \              0x43 0x54    
   \              0x5F 0x53    
   \              0x49 0x47    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x30 0x32    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x78 0x0A    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "FREE_COUNT = %02x%02x...">`:
   \   00000000   0x46 0x52          DC8 "FREE_COUNT = %02x%02x%02x%02x\012"
   \              0x45 0x45    
   \              0x5F 0x43    
   \              0x4F 0x55    
   \              0x4E 0x54    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x30 0x32    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x78 0x0A    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "NEXT_FREE  = %02x%02x...">`:
   \   00000000   0x4E 0x45          DC8 "NEXT_FREE  = %02x%02x%02x%02x\012"
   \              0x58 0x54    
   \              0x5F 0x46    
   \              0x52 0x45    
   \              0x45 0x20    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x30 0x32    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x78 0x0A    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "TRAIL_SIG  = %02x%02x...">`:
   \   00000000   0x54 0x52          DC8 "TRAIL_SIG  = %02x%02x%02x%02x\012"
   \              0x41 0x49    
   \              0x4C 0x5F    
   \              0x53 0x49    
   \              0x47 0x20    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x30 0x32    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x78 0x0A    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Invalid number of par...">`:
   \   00000000   0x49 0x6E          DC8 "Invalid number of parameters\012"
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x6E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x70 0x61    
   \              0x72 0x61    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x73    
   \              0x0A 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Error, invalid length\\n">`:
   \   00000000   0x45 0x72          DC8 "Error, invalid length\012"
   \              0x72 0x6F    
   \              0x72 0x2C    
   \              0x20 0x69    
   \              0x6E 0x76    
   \              0x61 0x6C    
   \              0x69 0x64    
   \              0x20 0x6C    
   \              0x65 0x6E    
   \              0x67 0x74    
   \              0x68 0x0A    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Error, unable to allo...">`:
   \   00000000   0x45 0x72          DC8 "Error, unable to allocate sector buffer\012"
   \              0x72 0x6F    
   \              0x72 0x2C    
   \              0x20 0x75    
   \              0x6E 0x61    
   \              0x62 0x6C    
   \              0x65 0x20    
   \              0x74 0x6F    
   \              0x20 0x61    
   \              0x6C 0x6C    
   \              0x6F 0x63    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x73 0x65    
   \              0x63 0x74    
   \              0x6F 0x72    
   \              0x20 0x62    
   \              0x75 0x66    
   \              0x66 0x65    
   \              0x72 0x0A    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 2
   \   00000000   0x62 0x00          DC8 "b"

   \                                 In section .rodata, align 4
   \                     `?<Constant "Error, unable to seek...">`:
   \   00000000   0x45 0x72          DC8 "Error, unable to seek to sector %s.\012"
   \              0x72 0x6F    
   \              0x72 0x2C    
   \              0x20 0x75    
   \              0x6E 0x61    
   \              0x62 0x6C    
   \              0x65 0x20    
   \              0x74 0x6F    
   \              0x20 0x73    
   \              0x65 0x65    
   \              0x6B 0x20    
   \              0x74 0x6F    
   \              0x20 0x73    
   \              0x65 0x63    
   \              0x74 0x6F    
   \              0x72 0x20    
   \              0x25 0x73    
   \              0x2E 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "Error, unable to read...">`:
   \   00000000   0x45 0x72          DC8 "Error, unable to read sector %s.\012"
   \              0x72 0x6F    
   \              0x72 0x2C    
   \              0x20 0x75    
   \              0x6E 0x61    
   \              0x62 0x6C    
   \              0x65 0x20    
   \              0x74 0x6F    
   \              0x20 0x72    
   \              0x65 0x61    
   \              0x64 0x20    
   \              0x73 0x65    
   \              0x63 0x74    
   \              0x6F 0x72    
   \              0x20 0x25    
   \              0x73 0x2E    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "%s <sector> [<device>]\\n">`:
   \   00000000   0x25 0x73          DC8 "%s <sector> [<device>]\012"
   \              0x20 0x3C    
   \              0x73 0x65    
   \              0x63 0x74    
   \              0x6F 0x72    
   \              0x3E 0x20    
   \              0x5B 0x3C    
   \              0x64 0x65    
   \              0x76 0x69    
   \              0x63 0x65    
   \              0x3E 0x5D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "Usage: %s <sector> [<...">`:
   \   00000000   0x55 0x73          DC8 "Usage: %s <sector> [<device>]\012"
   \              0x61 0x67    
   \              0x65 0x3A    
   \              0x20 0x25    
   \              0x73 0x20    
   \              0x3C 0x73    
   \              0x65 0x63    
   \              0x74 0x6F    
   \              0x72 0x3E    
   \              0x20 0x5B    
   \              0x3C 0x64    
   \              0x65 0x76    
   \              0x69 0x63    
   \              0x65 0x3E    
   \              0x5D 0x0A    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "   <sector>     = sec...">`:
   \   00000000   0x20 0x20          DC8 "   <sector>     = sector number\012"
   \              0x20 0x3C    
   \              0x73 0x65    
   \              0x63 0x74    
   \              0x6F 0x72    
   \              0x3E 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x3D 0x20    
   \              0x73 0x65    
   \              0x63 0x74    
   \              0x6F 0x72    
   \              0x20 0x6E    
   \              0x75 0x6D    
   \              0x62 0x65    
   \              0x72 0x0A    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "   <device>     = low...">`:
   \   00000000   0x20 0x20          DC8 "   <device>     = low level device\012"
   \              0x20 0x3C    
   \              0x64 0x65    
   \              0x76 0x69    
   \              0x63 0x65    
   \              0x3E 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x3D 0x20    
   \              0x6C 0x6F    
   \              0x77 0x20    
   \              0x6C 0x65    
   \              0x76 0x65    
   \              0x6C 0x20    
   \              0x64 0x65    
   \              0x76 0x69    
   \              0x63 0x65    
   \              0x0A 0x00    
    256          
    257          /* EOF*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       40  Shell_di
             40 -> Shell_check_help_request
             40 -> Shell_get_current_filesystem
             40 -> Shell_parse_uint_32
             40 -> _io_fclose
             40 -> _io_fopen
             40 -> _io_fseek
             40 -> _io_ioctl
             40 -> _io_printf
             40 -> _io_read
             40 -> _lwmem_alloc
             40 -> _lwmem_free
             40 -> print_bpb
             40 -> print_fsi
       24  print_bpb
             24 -> _io_printf
       16  print_fsi
             16 -> _io_printf


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      36  ?<Constant "   <device>     = low...">
      36  ?<Constant "   <sector>     = sec...">
       4  ?<Constant "%c">
      24  ?<Constant "%s <sector> [<device>]\n">
      32  ?<Constant "BK_BOOT_SEC        = ...">
      28  ?<Constant "BOOTSIG            = ...">
      28  ?<Constant "DRVNUM             = ...">
      32  ?<Constant "EXT_FLAGS          = ...">
      24  ?<Constant "Error, invalid length\n">
      44  ?<Constant "Error, unable to allo...">
      36  ?<Constant "Error, unable to read...">
      40  ?<Constant "Error, unable to seek...">
      40  ?<Constant "FAT_SIZE           = ...">
      24  ?<Constant "FILSYSTYPE         = ">
      32  ?<Constant "FREE_COUNT = %02x%02x...">
      32  ?<Constant "FS_INFO            = ...">
      32  ?<Constant "FS_VER             = ...">
      40  ?<Constant "HIDDEN_SECTORS     = ...">
      32  ?<Constant "Invalid number of par...">
      32  ?<Constant "LEAD_SIG   = %02x%02x...">
      28  ?<Constant "MEDIA_TYPE         = ...">
      40  ?<Constant "MEGA_SECTORS       = ...">
      32  ?<Constant "NEXT_FREE  = %02x%02x...">
      28  ?<Constant "NUMBER_OF_FAT      = ...">
      32  ?<Constant "NUMBER_SECTORS     = ...">
      32  ?<Constant "NUM_HEADS          = ...">
      24  ?<Constant "OEMNAME            = ">
      32  ?<Constant "RESERVED_SECTORS   = ...">
      40  ?<Constant "ROOT_CLUSTER       = ...">
      32  ?<Constant "ROOT_ENTRIES       = ...">
      28  ?<Constant "SECTORS_PER_CLUSTER= ...">
      32  ?<Constant "SECTORS_PER_FAT    = ...">
      32  ?<Constant "SECTORS_PER_TRACK  = ...">
      32  ?<Constant "SECTOR_SIZE        = ...">
      32  ?<Constant "STRUCT_SIG = %02x%02x...">
      32  ?<Constant "TRAIL_SIG  = %02x%02x...">
      32  ?<Constant "Usage: %s <sector> [<...">
      40  ?<Constant "VOLID              = ...">
      24  ?<Constant "VOLLAB             = ">
       2  ?<Constant "\n">
       2  ?<Constant "b">
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_12
       4  ??DataTable2_13
       4  ??DataTable2_14
       4  ??DataTable2_15
       4  ??DataTable2_16
       4  ??DataTable2_17
       4  ??DataTable2_18
       4  ??DataTable2_19
       4  ??DataTable2_2
       4  ??DataTable2_20
       4  ??DataTable2_21
       4  ??DataTable2_22
       4  ??DataTable2_23
       4  ??DataTable2_24
       4  ??DataTable2_25
       4  ??DataTable2_26
       4  ??DataTable2_27
       4  ??DataTable2_28
       4  ??DataTable2_29
       4  ??DataTable2_3
       4  ??DataTable2_30
       4  ??DataTable2_31
       4  ??DataTable2_32
       4  ??DataTable2_33
       4  ??DataTable2_34
       4  ??DataTable2_35
       4  ??DataTable2_36
       4  ??DataTable2_37
       4  ??DataTable2_38
       4  ??DataTable2_39
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
     438  Shell_di
     442  print_bpb
     120  print_fsi

 
 1 236 bytes in section .rodata
 1 168 bytes in section .text
 
 1 168 bytes of CODE  memory
 1 236 bytes of CONST memory

Errors: none
Warnings: none
