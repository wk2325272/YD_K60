###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     05/Apr/2013  18:51:00 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  L:\git_workspace\YD_PRJ_NEW_20130323_git_\Source\DataCon #
#                    vert.c                                                   #
#    Command line =  L:\git_workspace\YD_PRJ_NEW_20130323_git_\Source\DataCon #
#                    vert.c -D _DEBUG=1 -lC "L:\git_workspace\YD_PRJ_NEW_2013 #
#                    0323_git_\IAR\twrk60n512\Int Flash Debug\List\" -lA      #
#                    "L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\twrk60n51 #
#                    2\Int Flash Debug\List\" --diag_suppress                 #
#                    Pa039,Pa082,Pe186 -o "L:\git_workspace\YD_PRJ_NEW_201303 #
#                    23_git_\IAR\twrk60n512\Int Flash Debug\Obj\" --no_cse    #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\..\lib\twr #
#                    k60n512.iar\ -I L:\git_workspace\YD_PRJ_NEW_20130323_git #
#                    _\IAR\..\lib\twrk60n512.iar\bsp\ -I                      #
#                    L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\..\lib\twr #
#                    k60n512.iar\psp\ -I L:\git_workspace\YD_PRJ_NEW_20130323 #
#                    _git_\IAR\..\lib\twrk60n512.iar\bsp\Generated_Code\ -I   #
#                    L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\..\lib\twr #
#                    k60n512.iar\rtcs\ -I L:\git_workspace\YD_PRJ_NEW_2013032 #
#                    3_git_\IAR\..\lib\twrk60n512.iar\mfs\ -I                 #
#                    L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\..\lib\twr #
#                    k60n512.iar\usb\host\ -I L:\git_workspace\YD_PRJ_NEW_201 #
#                    30323_git_\IAR\..\lib\twrk60n512.iar\shell\ -I           #
#                    L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\..\lib\twr #
#                    k60n512.iar\usb\ -I L:\git_workspace\YD_PRJ_NEW_20130323 #
#                    _git_\IAR\..\ -I L:\git_workspace\YD_PRJ_NEW_20130323_gi #
#                    t_\IAR\..\Source\Source_MQX\ -I "E:\Freescale\Freescale  #
#                    MQX 3.8\shell\source\include\" -Ol --use_c++_inline      #
#    List file    =  L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\twrk60n512 #
#                    \Int Flash Debug\List\DataConvert.lst                    #
#    Object file  =  L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\twrk60n512 #
#                    \Int Flash Debug\Obj\DataConvert.o                       #
#                                                                             #
#                                                                             #
###############################################################################

L:\git_workspace\YD_PRJ_NEW_20130323_git_\Source\DataConvert.c
      1          /*******************************************************************************
      2          * File Name        : DataConvert.c
      3          * Author             : LB&TX
      4          * Version            : V1.0.0
      5          * Date                :
      6          * Description        :数据转换函数
      7          *******************************************************************************/
      8          //#define  DataCnvt_GLOBALS
      9          
     10          #include  "stdlib.h" 
     11          #include "math.h"
     12          #include "DataConvert.h"
     13          #include "LCDDriver.h"
     14          
     15          /*******************************************************************************
     16          * 函  数  名      : UIValues2HR
     17          * 描      述      :压电流谐波有效值转换为100000倍谐波含有率(无符号的实数转换为4个
     18                            字节供C108显示用)，显示时控制小数位为3即可，需要将接受到的四
     19                            个字节电压电流谐波值先转换为float型
     20          * 输      入      : UIValues[]
     21          * 返      回      : HR[]
     22          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     23          void UIValues2HR(float UIValues[],U16 HR[])
     24          {
   \                     UIValues2HR:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     25              float temp=UIValues[0];
   \   00000006   0x6826             LDR      R6,[R4, #+0]
     26              U32 t=0;
   \   00000008   0x2000             MOVS     R0,#+0
     27              for(U8 i=0; i<50; i++)
   \   0000000A   0x2700             MOVS     R7,#+0
   \   0000000C   0xE014             B.N      ??UIValues2HR_0
     28              {
     29                  t=(U32)((UIValues[i]/temp)*100000);
   \                     ??UIValues2HR_1:
   \   0000000E   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000010   0xF854 0x0027      LDR      R0,[R4, R7, LSL #+2]
   \   00000014   0x0031             MOVS     R1,R6
   \   00000016   0x.... 0x....      BL       __aeabi_fdiv
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable3  ;; 0x47c35000
   \   0000001E   0x.... 0x....      BL       __aeabi_fmul
   \   00000022   0x.... 0x....      BL       __aeabi_f2uiz
     30                  *(HR+2*i)=(t&0xffff0000)>>16;
   \   00000026   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000028   0x0C01             LSRS     R1,R0,#+16
   \   0000002A   0xF825 0x1027      STRH     R1,[R5, R7, LSL #+2]
     31                  *(HR+2*i+1)=t&0x0000ffff;
   \   0000002E   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000030   0xEB15 0x0187      ADDS     R1,R5,R7, LSL #+2
   \   00000034   0x8048             STRH     R0,[R1, #+2]
     32              }
   \   00000036   0x1C7F             ADDS     R7,R7,#+1
   \                     ??UIValues2HR_0:
   \   00000038   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000003A   0x2F32             CMP      R7,#+50
   \   0000003C   0xD3E7             BCC.N    ??UIValues2HR_1
     33          }
   \   0000003E   0xBDF0             POP      {R4-R7,PC}       ;; return
     34          /*************************************************
     35            Function:       ChartoFloat
     36            Description:    将SPI接收到的连续四个字节的数据转换成一个浮点数(除以10000还原)
     37            Input:          CharIn[],输入的字节数组
     38                            FloatOut[],转换以后的数据存放的起始地址
     39                            FNum,转换以后的浮点数个数
     40            Return:         无
     41            Others:         0321暂时将所有接收到的数据转换成浮点型
     42                            ???可否进行优化???
     43          *************************************************/

   \                                 In section .text, align 2, keep-with-next
     44          void ChartoFloat(U8 CharIn[],float FloatOut[],U16 FNum,U16 times)
     45          {
   \                     ChartoFloat:
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
     46          //    long  temp; 
     47              float temp;  // wk --> modifeid 
     48              for(U16 i=0; i<FNum; i++)
   \   0000000C   0xF05F 0x0800      MOVS     R8,#+0
   \   00000010   0xE02A             B.N      ??ChartoFloat_0
     49              {
     50                /* wk --> 此处影响：进入谐波列表项后，程序卡死在这里，触摸屏死掉   --> 解决： 标志位未初始化问题导致*/
     51                  temp=((long)(CharIn[4*i])<<24)+((long)(CharIn[4*i+1])<<16)+((long)(CharIn[4*i+2])<<8)+(long)(CharIn[4*i+3]);
   \                     ??ChartoFloat_1:
   \   00000012   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000016   0xF814 0x0028      LDRB     R0,[R4, R8, LSL #+2]
   \   0000001A   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000001E   0xEB14 0x0188      ADDS     R1,R4,R8, LSL #+2
   \   00000022   0x7849             LDRB     R1,[R1, #+1]
   \   00000024   0x0409             LSLS     R1,R1,#+16
   \   00000026   0xEB11 0x6000      ADDS     R0,R1,R0, LSL #+24
   \   0000002A   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000002E   0xEB14 0x0188      ADDS     R1,R4,R8, LSL #+2
   \   00000032   0x7889             LDRB     R1,[R1, #+2]
   \   00000034   0xEB10 0x2001      ADDS     R0,R0,R1, LSL #+8
   \   00000038   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000003C   0xEB14 0x0188      ADDS     R1,R4,R8, LSL #+2
   \   00000040   0x78C9             LDRB     R1,[R1, #+3]
   \   00000042   0xFA50 0xF081      UXTAB    R0,R0,R1
   \   00000046   0x.... 0x....      BL       __aeabi_i2f
   \   0000004A   0x4681             MOV      R9,R0
     52                  *(FloatOut+i)=((float)temp)/times;
   \   0000004C   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000004E   0x0038             MOVS     R0,R7
   \   00000050   0x.... 0x....      BL       __aeabi_ui2f
   \   00000054   0x0001             MOVS     R1,R0
   \   00000056   0x4648             MOV      R0,R9
   \   00000058   0x.... 0x....      BL       __aeabi_fdiv
   \   0000005C   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000060   0xF845 0x0028      STR      R0,[R5, R8, LSL #+2]
     53              }
   \   00000064   0xF118 0x0801      ADDS     R8,R8,#+1
   \                     ??ChartoFloat_0:
   \   00000068   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000006C   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000006E   0x45B0             CMP      R8,R6
   \   00000070   0xD3CF             BCC.N    ??ChartoFloat_1
     54          }
   \   00000072   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
     55          /*******************************************************************************
     56          * 函  数  名      : FloatTo4DecimalsC108
     57          * 描      述      :将浮点数转换为供C108显示用的四个字节，浮点数乘以了10000，因此
     58                             C108显示时需要控制是4位小数，只用于显示正数
     59          * 输      入      : DataIn[]，U8 Num
     60          * 返      回      : DataBack[]
     61          *******************************************************************************/
     62          /*
     63          void FloatTo4DecimalsC108(float DataIn[],U16 DataBack[],U8 Num)
     64          {
     65              U32 t=0;
     66              for(U8 i=0; i<Num; i++)
     67              {
     68                  t=(U32)((DataIn[i])*10000);
     69                  *(DataBack+2*i)=(t&0xffff0000)>>16;
     70                  *(DataBack+2*i+1)=t&0x0000ffff;
     71              }
     72          }
     73          */
     74          /*******************************************************************************
     75          * 函  数  名      : CharToInt
     76          * 描      述      : 将波形采样值扩充并赋给WAVE_UI数组字节变为字，
     77                              80个字节变为100个字,WordOut个数为100*LineNum
     78          * 输      入      : CharIn[]，LineNum
     79          * 返      回      : WordOut[]
     80          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     81          void CharToInt(U8 CharIn[], U16 WordOut[],U8 LineNum,U8 HalfRange)
     82          {
   \                     CharToInt:
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
     83              U8 i,j,temp;
     84              U16 abstemp;
     85              for (j = 0; j < LineNum; j++)
   \   0000000C   0xF05F 0x0800      MOVS     R8,#+0
   \   00000010   0xE001             B.N      ??CharToInt_0
   \                     ??CharToInt_1:
   \   00000012   0xF118 0x0801      ADDS     R8,R8,#+1
   \                     ??CharToInt_0:
   \   00000016   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000001A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000001C   0x45B0             CMP      R8,R6
   \   0000001E   0xD254             BCS.N    ??CharToInt_2
     86                  for (i = 0; i < Cycledot; i++)  // wk -->  Cycledot = 80 //实时波形的点数
   \   00000020   0xF05F 0x0900      MOVS     R9,#+0
   \   00000024   0xE025             B.N      ??CharToInt_3
     87                  {
     88                      temp=CharIn[i + j*Cycledot];
     89                      abstemp = abs(temp-127) * HalfRange*2/255;
     90                      if((temp-127)<0)
     91                      {
     92                          WordOut[i + j*size_UI] =HalfRange-abstemp; //
     93                      }
     94                      else
     95                      {
     96                          WordOut[i + j*size_UI] =HalfRange+abstemp; //
   \                     ??CharToInt_4:
   \   00000026   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000002A   0x2164             MOVS     R1,#+100
   \   0000002C   0xFB01 0xF108      MUL      R1,R1,R8
   \   00000030   0xFA51 0xF189      UXTAB    R1,R1,R9
   \   00000034   0xFA50 0xF087      UXTAB    R0,R0,R7
   \   00000038   0xF825 0x0011      STRH     R0,[R5, R1, LSL #+1]
     97                      }
     98                      if(i<20)
   \                     ??CharToInt_5:
   \   0000003C   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000040   0xF1B9 0x0F14      CMP      R9,#+20
   \   00000044   0xD213             BCS.N    ??CharToInt_6
     99                      {
    100                          WordOut[i + j*size_UI+Cycledot]=WordOut[i + j*size_UI];
   \   00000046   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000004A   0x2064             MOVS     R0,#+100
   \   0000004C   0xFB00 0xF008      MUL      R0,R0,R8
   \   00000050   0xFA50 0xF089      UXTAB    R0,R0,R9
   \   00000054   0xEB15 0x0040      ADDS     R0,R5,R0, LSL #+1
   \   00000058   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000005C   0x2164             MOVS     R1,#+100
   \   0000005E   0xFB01 0xF108      MUL      R1,R1,R8
   \   00000062   0xFA51 0xF189      UXTAB    R1,R1,R9
   \   00000066   0xF835 0x1011      LDRH     R1,[R5, R1, LSL #+1]
   \   0000006A   0xF8A0 0x10A0      STRH     R1,[R0, #+160]
    101                      }
   \                     ??CharToInt_6:
   \   0000006E   0xF119 0x0901      ADDS     R9,R9,#+1
   \                     ??CharToInt_3:
   \   00000072   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000076   0xF1B9 0x0F50      CMP      R9,#+80
   \   0000007A   0xD2CA             BCS.N    ??CharToInt_1
   \   0000007C   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000080   0x2050             MOVS     R0,#+80
   \   00000082   0xFB00 0xF008      MUL      R0,R0,R8
   \   00000086   0xFA50 0xF089      UXTAB    R0,R0,R9
   \   0000008A   0xF810 0xA004      LDRB     R10,[R0, R4]
   \   0000008E   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000092   0xF1BA 0x007F      SUBS     R0,R10,#+127
   \   00000096   0x.... 0x....      BL       abs
   \   0000009A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000009C   0x4378             MULS     R0,R7,R0
   \   0000009E   0x0040             LSLS     R0,R0,#+1
   \   000000A0   0x21FF             MOVS     R1,#+255
   \   000000A2   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   000000A6   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   000000AA   0xF1BA 0x017F      SUBS     R1,R10,#+127
   \   000000AE   0x2900             CMP      R1,#+0
   \   000000B0   0xD5B9             BPL.N    ??CharToInt_4
   \   000000B2   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000000B6   0x2164             MOVS     R1,#+100
   \   000000B8   0xFB01 0xF108      MUL      R1,R1,R8
   \   000000BC   0xFA51 0xF189      UXTAB    R1,R1,R9
   \   000000C0   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000C2   0x1A38             SUBS     R0,R7,R0
   \   000000C4   0xF825 0x0011      STRH     R0,[R5, R1, LSL #+1]
   \   000000C8   0xE7B8             B.N      ??CharToInt_5
    102                  }
    103          }
   \                     ??CharToInt_2:
   \   000000CA   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return

   \                                 In section .text, align 2, keep-with-next
    104          void BCD2Decimal(U8 Data[],U8 Num)///将BCD码转换为10进制数
    105          {
   \                     BCD2Decimal:
   \   00000000   0xB430             PUSH     {R4,R5}
    106              for(U8 i=0; i<Num; i++)
   \   00000002   0x2200             MOVS     R2,#+0
   \   00000004   0xE00E             B.N      ??BCD2Decimal_0
    107              {
    108                  Data[i] = (Data[i] >> 4) *10+(Data[i] &0x0f);
   \                     ??BCD2Decimal_1:
   \   00000006   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000008   0x5C13             LDRB     R3,[R2, R0]
   \   0000000A   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000000C   0x091B             LSRS     R3,R3,#+4
   \   0000000E   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000010   0x240A             MOVS     R4,#+10
   \   00000012   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000014   0x5C15             LDRB     R5,[R2, R0]
   \   00000016   0xF015 0x050F      ANDS     R5,R5,#0xF
   \   0000001A   0xFB04 0x5303      MLA      R3,R4,R3,R5
   \   0000001E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000020   0x5413             STRB     R3,[R2, R0]
    109              }
   \   00000022   0x1C52             ADDS     R2,R2,#+1
   \                     ??BCD2Decimal_0:
   \   00000024   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000026   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000028   0x428A             CMP      R2,R1
   \   0000002A   0xD3EC             BCC.N    ??BCD2Decimal_1
    110          }
   \   0000002C   0xBC30             POP      {R4,R5}
   \   0000002E   0x4770             BX       LR               ;; return
    111          /*******************************************************************************
    112          * 函  数  名      : PhaseShift
    113          * 描      述      : 电压电流相位转换为与UA的差值，且变为角度。
    114          * 输      入      : DataIn[]，Num
    115          * 返      回      : DataBack[]
    116          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    117          void PhaseShift(float DataIn[],U16 DataBack[],U8 Num,U32 DATABACK[])
    118          {
   \                     PhaseShift:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
    119              U8 i;
    120              for(i=0; i<Num; i++)
   \   0000000C   0xF05F 0x0800      MOVS     R8,#+0
   \   00000010   0xE01E             B.N      ??PhaseShift_0
    121              {
    122                  if(((DataIn[i]-DataIn[0])<0)==1)
    123                  {
    124                      //DataBack[i]=(int)((DataIn[i]-DataIn[0]+360)*PI/180);
    125                      DataBack[i]=(int)((DataIn[i]-DataIn[0]+360));
    126                      DATABACK[i]=(U32)((DataIn[i]-DataIn[0]+360)*10000);
    127                  }
    128                  else
    129                  {
    130                      //DataBack[i]=(int)((DataIn[i]-DataIn[0])*PI/180);
    131                      DataBack[i]=(int)((DataIn[i]-DataIn[0]));
   \                     ??PhaseShift_1:
   \   00000012   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000016   0xF854 0x0028      LDR      R0,[R4, R8, LSL #+2]
   \   0000001A   0x6821             LDR      R1,[R4, #+0]
   \   0000001C   0x.... 0x....      BL       __aeabi_fsub
   \   00000020   0x.... 0x....      BL       __aeabi_f2iz
   \   00000024   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000028   0xF825 0x0018      STRH     R0,[R5, R8, LSL #+1]
    132                      DATABACK[i]=(U32)((DataIn[i]-DataIn[0])*10000);
   \   0000002C   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000030   0xF854 0x0028      LDR      R0,[R4, R8, LSL #+2]
   \   00000034   0x6821             LDR      R1,[R4, #+0]
   \   00000036   0x.... 0x....      BL       __aeabi_fsub
   \   0000003A   0x....             LDR.N    R1,??DataTable3_1  ;; 0x461c4000
   \   0000003C   0x.... 0x....      BL       __aeabi_fmul
   \   00000040   0x.... 0x....      BL       __aeabi_f2uiz
   \   00000044   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000048   0xF847 0x0028      STR      R0,[R7, R8, LSL #+2]
    133                  }
   \                     ??PhaseShift_2:
   \   0000004C   0xF118 0x0801      ADDS     R8,R8,#+1
   \                     ??PhaseShift_0:
   \   00000050   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000054   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000056   0x45B0             CMP      R8,R6
   \   00000058   0xD22E             BCS.N    ??PhaseShift_3
   \   0000005A   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000005E   0xF854 0x0028      LDR      R0,[R4, R8, LSL #+2]
   \   00000062   0x6821             LDR      R1,[R4, #+0]
   \   00000064   0x.... 0x....      BL       __aeabi_fsub
   \   00000068   0x2100             MOVS     R1,#+0
   \   0000006A   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000006E   0xD2D0             BCS.N    ??PhaseShift_1
   \   00000070   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000074   0xF854 0x0028      LDR      R0,[R4, R8, LSL #+2]
   \   00000078   0x6821             LDR      R1,[R4, #+0]
   \   0000007A   0x.... 0x....      BL       __aeabi_fsub
   \   0000007E   0x....             LDR.N    R1,??DataTable3_2  ;; 0x43b40000
   \   00000080   0x.... 0x....      BL       __aeabi_fadd
   \   00000084   0x.... 0x....      BL       __aeabi_f2iz
   \   00000088   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000008C   0xF825 0x0018      STRH     R0,[R5, R8, LSL #+1]
   \   00000090   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000094   0xF854 0x0028      LDR      R0,[R4, R8, LSL #+2]
   \   00000098   0x6821             LDR      R1,[R4, #+0]
   \   0000009A   0x.... 0x....      BL       __aeabi_fsub
   \   0000009E   0x....             LDR.N    R1,??DataTable3_2  ;; 0x43b40000
   \   000000A0   0x.... 0x....      BL       __aeabi_fadd
   \   000000A4   0x....             LDR.N    R1,??DataTable3_1  ;; 0x461c4000
   \   000000A6   0x.... 0x....      BL       __aeabi_fmul
   \   000000AA   0x.... 0x....      BL       __aeabi_f2uiz
   \   000000AE   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000000B2   0xF847 0x0028      STR      R0,[R7, R8, LSL #+2]
   \   000000B6   0xE7C9             B.N      ??PhaseShift_2
    134              }
    135          }
   \                     ??PhaseShift_3:
   \   000000B8   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    136          /*******************************************************************************
    137          * 函  数  名      : WR_WAVE_UI
    138          * 描      述      : 将WAVE_UI写入触摸屏，一次最多248个字节，所以分次写入
    139                              用C104画波形，需将数据再写入触摸屏。
    140          * 输      入      : DataIn[]，UI_U_I，rewrite
    141          * 返      回      : 无
    142          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    143          void WR_WAVE_UI(U16 DATAIN[],U8 UI_U_I, U8 rewrite)
    144          {
   \                     WR_WAVE_UI:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0015             MOVS     R5,R2
    145              switch(UI_U_I)
   \   00000006   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000008   0x2901             CMP      R1,#+1
   \   0000000A   0xD005             BEQ.N    ??WR_WAVE_UI_0
   \   0000000C   0xF0C0 0x808E      BCC.W    ??WR_WAVE_UI_1
   \   00000010   0x2903             CMP      R1,#+3
   \   00000012   0xD067             BEQ.N    ??WR_WAVE_UI_2
   \   00000014   0xD345             BCC.N    ??WR_WAVE_UI_3
   \   00000016   0xE089             B.N      ??WR_WAVE_UI_1
    146              {
    147              case 1:
    148                  YADA_C0 (UA_addr + rewrite*size_UI,DATAIN,size_UI);  // #define size_UI 100               //波形采样数据各相总数
   \                     ??WR_WAVE_UI_0:
   \   00000018   0x2264             MOVS     R2,#+100
   \   0000001A   0x0021             MOVS     R1,R4
   \   0000001C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001E   0x2064             MOVS     R0,#+100
   \   00000020   0xFB00 0xF005      MUL      R0,R0,R5
   \   00000024   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000026   0x.... 0x....      BL       YADA_C0
    149                  YADA_C0 (UB_addr + rewrite*size_UI,&DATAIN[size_UI],size_UI);
   \   0000002A   0x2264             MOVS     R2,#+100
   \   0000002C   0xF114 0x01C8      ADDS     R1,R4,#+200
   \   00000030   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000032   0x2064             MOVS     R0,#+100
   \   00000034   0xFB00 0xF005      MUL      R0,R0,R5
   \   00000038   0x30C8             ADDS     R0,R0,#+200
   \   0000003A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000003C   0x.... 0x....      BL       YADA_C0
    150                  YADA_C0 (UC_addr + rewrite*size_UI,&DATAIN[size_UI*2],size_UI);
   \   00000040   0x2264             MOVS     R2,#+100
   \   00000042   0xF204 0x1190      ADDW     R1,R4,#+400
   \   00000046   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000048   0x2064             MOVS     R0,#+100
   \   0000004A   0xFB00 0xF005      MUL      R0,R0,R5
   \   0000004E   0xF200 0x1090      ADDW     R0,R0,#+400
   \   00000052   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000054   0x.... 0x....      BL       YADA_C0
    151                  YADA_C0 (IA_addr + rewrite*size_UI,&DATAIN[size_UI*3],size_UI);
   \   00000058   0x2264             MOVS     R2,#+100
   \   0000005A   0xF204 0x2158      ADDW     R1,R4,#+600
   \   0000005E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000060   0x2064             MOVS     R0,#+100
   \   00000062   0xFB00 0xF005      MUL      R0,R0,R5
   \   00000066   0xF200 0x2058      ADDW     R0,R0,#+600
   \   0000006A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000006C   0x.... 0x....      BL       YADA_C0
    152                  YADA_C0 (IB_addr + rewrite*size_UI,&DATAIN[size_UI*4],size_UI);
   \   00000070   0x2264             MOVS     R2,#+100
   \   00000072   0xF204 0x3120      ADDW     R1,R4,#+800
   \   00000076   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000078   0x2064             MOVS     R0,#+100
   \   0000007A   0xFB00 0xF005      MUL      R0,R0,R5
   \   0000007E   0xF200 0x3020      ADDW     R0,R0,#+800
   \   00000082   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000084   0x.... 0x....      BL       YADA_C0
    153                  YADA_C0 (IC_addr + rewrite*size_UI,&DATAIN[size_UI*5],size_UI);
   \   00000088   0x2264             MOVS     R2,#+100
   \   0000008A   0xF204 0x31E8      ADDW     R1,R4,#+1000
   \   0000008E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000090   0x2064             MOVS     R0,#+100
   \   00000092   0xFB00 0xF005      MUL      R0,R0,R5
   \   00000096   0xF200 0x30E8      ADDW     R0,R0,#+1000
   \   0000009A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000009C   0x.... 0x....      BL       YADA_C0
    154                  break;
   \   000000A0   0xE044             B.N      ??WR_WAVE_UI_4
    155              case 2:
    156                  YADA_C0 (UA_addr + rewrite*size_UI,DATAIN,size_UI);
   \                     ??WR_WAVE_UI_3:
   \   000000A2   0x2264             MOVS     R2,#+100
   \   000000A4   0x0021             MOVS     R1,R4
   \   000000A6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000A8   0x2064             MOVS     R0,#+100
   \   000000AA   0xFB00 0xF005      MUL      R0,R0,R5
   \   000000AE   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000B0   0x.... 0x....      BL       YADA_C0
    157                  YADA_C0 (UB_addr + rewrite*size_UI,&DATAIN[size_UI],size_UI);
   \   000000B4   0x2264             MOVS     R2,#+100
   \   000000B6   0xF114 0x01C8      ADDS     R1,R4,#+200
   \   000000BA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000BC   0x2064             MOVS     R0,#+100
   \   000000BE   0xFB00 0xF005      MUL      R0,R0,R5
   \   000000C2   0x30C8             ADDS     R0,R0,#+200
   \   000000C4   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000C6   0x.... 0x....      BL       YADA_C0
    158                  YADA_C0 (UC_addr + rewrite*size_UI,&DATAIN[size_UI*2],size_UI);
   \   000000CA   0x2264             MOVS     R2,#+100
   \   000000CC   0xF204 0x1190      ADDW     R1,R4,#+400
   \   000000D0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000D2   0x2064             MOVS     R0,#+100
   \   000000D4   0xFB00 0xF005      MUL      R0,R0,R5
   \   000000D8   0xF200 0x1090      ADDW     R0,R0,#+400
   \   000000DC   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000DE   0x.... 0x....      BL       YADA_C0
    159                  break;
   \   000000E2   0xE023             B.N      ??WR_WAVE_UI_4
    160              case 3:
    161                  YADA_C0 (IA_addr + rewrite*size_UI,DATAIN,size_UI);
   \                     ??WR_WAVE_UI_2:
   \   000000E4   0x2264             MOVS     R2,#+100
   \   000000E6   0x0021             MOVS     R1,R4
   \   000000E8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000EA   0x2064             MOVS     R0,#+100
   \   000000EC   0xFB00 0xF005      MUL      R0,R0,R5
   \   000000F0   0xF200 0x2058      ADDW     R0,R0,#+600
   \   000000F4   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000F6   0x.... 0x....      BL       YADA_C0
    162                  YADA_C0 (IB_addr + rewrite*size_UI,&DATAIN[size_UI],size_UI);
   \   000000FA   0x2264             MOVS     R2,#+100
   \   000000FC   0xF114 0x01C8      ADDS     R1,R4,#+200
   \   00000100   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000102   0x2064             MOVS     R0,#+100
   \   00000104   0xFB00 0xF005      MUL      R0,R0,R5
   \   00000108   0xF200 0x3020      ADDW     R0,R0,#+800
   \   0000010C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000010E   0x.... 0x....      BL       YADA_C0
    163                  YADA_C0 (IC_addr + rewrite*size_UI,&DATAIN[size_UI*2],size_UI);
   \   00000112   0x2264             MOVS     R2,#+100
   \   00000114   0xF204 0x1190      ADDW     R1,R4,#+400
   \   00000118   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000011A   0x2064             MOVS     R0,#+100
   \   0000011C   0xFB00 0xF005      MUL      R0,R0,R5
   \   00000120   0xF200 0x30E8      ADDW     R0,R0,#+1000
   \   00000124   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000126   0x.... 0x....      BL       YADA_C0
    164                  break;
   \   0000012A   0xE7FF             B.N      ??WR_WAVE_UI_4
    165              default:
    166                  break;
    167              }
    168          }
   \                     ??WR_WAVE_UI_1:
   \                     ??WR_WAVE_UI_4:
   \   0000012C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    169          /*******************************************************************************
    170          * 函  数  名      : AtoFA
    171          * 描      述      : 将U盘读到的字符串转化为浮点数数组,包含正负
    172          * 输      入      : DATAIN[],待转化的字符数组
    173          * 返      回      : DATAOUT[],转化得到的浮点数数组
    174          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    175          void AtoFA(U8 DATAIN[],float DATAOUT[],U16 NUM)
    176          {
   \                     AtoFA:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB084             SUB      SP,SP,#+16
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
    177              U16 j=0;
   \   0000000C   0x2700             MOVS     R7,#+0
    178              char TEST[9],k=0;
   \   0000000E   0x2000             MOVS     R0,#+0
    179              for(U16 i=0; i<NUM*48; i++)//每行预设为48个字符
   \   00000010   0xF05F 0x0800      MOVS     R8,#+0
   \   00000014   0xE001             B.N      ??AtoFA_0
   \                     ??AtoFA_1:
   \   00000016   0xF118 0x0801      ADDS     R8,R8,#+1
   \                     ??AtoFA_0:
   \   0000001A   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000001E   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000020   0x2130             MOVS     R1,#+48
   \   00000022   0xFB01 0xF106      MUL      R1,R1,R6
   \   00000026   0x4588             CMP      R8,R1
   \   00000028   0xDA24             BGE.N    ??AtoFA_2
    180              {
    181                  TEST[k]=DATAIN[i];
   \   0000002A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002C   0xA900             ADD      R1,SP,#+0
   \   0000002E   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000032   0xF818 0x2004      LDRB     R2,[R8, R4]
   \   00000036   0x5442             STRB     R2,[R0, R1]
    182                  k++;
   \   00000038   0x1C40             ADDS     R0,R0,#+1
    183                  if((DATAIN[i]==',')||DATAIN[i]==0x0d)
   \   0000003A   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000003E   0xF818 0x1004      LDRB     R1,[R8, R4]
   \   00000042   0x292C             CMP      R1,#+44
   \   00000044   0xD005             BEQ.N    ??AtoFA_3
   \   00000046   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000004A   0xF818 0x1004      LDRB     R1,[R8, R4]
   \   0000004E   0x290D             CMP      R1,#+13
   \   00000050   0xD1E1             BNE.N    ??AtoFA_1
    184                  {
    185                      DATAOUT[j]=atof(TEST);
   \                     ??AtoFA_3:
   \   00000052   0xA800             ADD      R0,SP,#+0
   \   00000054   0x.... 0x....      BL       atof
   \   00000058   0x.... 0x....      BL       __aeabi_d2f
   \   0000005C   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000005E   0xF845 0x0027      STR      R0,[R5, R7, LSL #+2]
    186                      k=0;
   \   00000062   0x2000             MOVS     R0,#+0
    187                      //printf("%f",DATAOUT[j]);
    188                      j++;
   \   00000064   0x1C7F             ADDS     R7,R7,#+1
    189                      if(j>=NUM*6)
   \   00000066   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000068   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000006A   0x2106             MOVS     R1,#+6
   \   0000006C   0xFB01 0xF106      MUL      R1,R1,R6
   \   00000070   0x428F             CMP      R7,R1
   \   00000072   0xDBD0             BLT.N    ??AtoFA_1
    190                      {
    191                          break;
    192                      }
    193                  }
    194              }
    195          }
   \                     ??AtoFA_2:
   \   00000074   0xE8BD 0x81FF      POP      {R0-R8,PC}       ;; return
    196          /*******************************************************************************
    197          * 函  数  名      : FLTOINT_UI
    198          * 描      述      : 将U盘读到的电压电流浮点数数组转化为C104显示波形的整型数据
    199          * 输      入      : DATAIN[],电压电流浮点数组
    200          * 返      回      : DATOUT[],输出用于事件波形C104显示的数组
    201          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    202          void FLTOINT_UI(float DATAIN[],int DATOUT[],U16 FLAGNUM)
    203          {
   \                     FLTOINT_UI:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    204              for(U8 i=0; i<FLAGNUM; i++)
   \   0000000A   0x2700             MOVS     R7,#+0
   \   0000000C   0xE036             B.N      ??FLTOINT_UI_0
    205              {
    206                  DATOUT[i]=(int)(DATAIN[i*6]/4)+87;   //电压+-311变为屏幕显示的数据，87为中线值。
   \                     ??FLTOINT_UI_1:
   \   0000000E   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000010   0x2018             MOVS     R0,#+24
   \   00000012   0xFB00 0x4007      MLA      R0,R0,R7,R4
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0xF05F 0x4181      MOVS     R1,#+1082130432
   \   0000001C   0x.... 0x....      BL       __aeabi_fdiv
   \   00000020   0x.... 0x....      BL       __aeabi_f2iz
   \   00000024   0x3057             ADDS     R0,R0,#+87
   \   00000026   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000028   0xF845 0x0027      STR      R0,[R5, R7, LSL #+2]
    207                  DATOUT[i+FLAGNUM]=(int)(DATAIN[i*6+1]/4)+87;
   \   0000002C   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000002E   0xFA56 0xF887      UXTAB    R8,R6,R7
   \   00000032   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000034   0x2006             MOVS     R0,#+6
   \   00000036   0xFB00 0xF007      MUL      R0,R0,R7
   \   0000003A   0xEB14 0x0080      ADDS     R0,R4,R0, LSL #+2
   \   0000003E   0x6840             LDR      R0,[R0, #+4]
   \   00000040   0xF05F 0x4181      MOVS     R1,#+1082130432
   \   00000044   0x.... 0x....      BL       __aeabi_fdiv
   \   00000048   0x.... 0x....      BL       __aeabi_f2iz
   \   0000004C   0x3057             ADDS     R0,R0,#+87
   \   0000004E   0xF845 0x0028      STR      R0,[R5, R8, LSL #+2]
    208                  DATOUT[i+2*FLAGNUM]=(int)(DATAIN[i*6+2]/4)+87;
   \   00000052   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000054   0x0070             LSLS     R0,R6,#+1
   \   00000056   0xFA50 0xF887      UXTAB    R8,R0,R7
   \   0000005A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000005C   0x2006             MOVS     R0,#+6
   \   0000005E   0xFB00 0xF007      MUL      R0,R0,R7
   \   00000062   0xEB14 0x0080      ADDS     R0,R4,R0, LSL #+2
   \   00000066   0x6880             LDR      R0,[R0, #+8]
   \   00000068   0xF05F 0x4181      MOVS     R1,#+1082130432
   \   0000006C   0x.... 0x....      BL       __aeabi_fdiv
   \   00000070   0x.... 0x....      BL       __aeabi_f2iz
   \   00000074   0x3057             ADDS     R0,R0,#+87
   \   00000076   0xF845 0x0028      STR      R0,[R5, R8, LSL #+2]
    209                  /*DATOUT[i+3*FLAGNUM]=(int)(DATAIN[i*6+3]*14)+87;//电流+-6变为屏幕显示的数据，87为中线值。
    210                  DATOUT[i+4*FLAGNUM]=(int)(DATAIN[i*6+4]*14)+87;
    211                  DATOUT[i+5*FLAGNUM]=(int)(DATAIN[i*6+5]*14)+87;*/
    212              }
   \   0000007A   0x1C7F             ADDS     R7,R7,#+1
   \                     ??FLTOINT_UI_0:
   \   0000007C   0x0038             MOVS     R0,R7
   \   0000007E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000080   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000082   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000084   0x42B0             CMP      R0,R6
   \   00000086   0xD3C2             BCC.N    ??FLTOINT_UI_1
    213          }
   \   00000088   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    214          /*******************************************************************************
    215          * 函  数  名      :
    216          * 描      述      : 将U盘读到的电流浮点数数组转化为整型，并且改变正负
    217          * 输      入      : DATAIN[],待转化的浮点数数组
    218          * 返      回      : DATOUT1[],DATOUT2[],DATOUT3[]三相电压数组输出
    219          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    220          void EVEUISHIFT(U8 DATAIN[],float DATAOUT[])
    221          {
   \                     EVEUISHIFT:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    222              U16 temp;
    223              for(U16 i=0; i<EVEUILEN*12; i++)
   \   00000006   0x2600             MOVS     R6,#+0
   \   00000008   0xE013             B.N      ??EVEUISHIFT_0
    224              {
    225                  temp=((U16)(DATAIN[2*i])<<8)+((U16)(DATAIN[2*i+1]));
   \                     ??EVEUISHIFT_1:
   \   0000000A   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000000C   0xF814 0x0016      LDRB     R0,[R4, R6, LSL #+1]
   \   00000010   0x0200             LSLS     R0,R0,#+8
   \   00000012   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000014   0xEB14 0x0146      ADDS     R1,R4,R6, LSL #+1
   \   00000018   0x7849             LDRB     R1,[R1, #+1]
   \   0000001A   0xFA50 0xF081      UXTAB    R0,R0,R1
    226                  DATAOUT[i]=((float)temp)/100;
   \   0000001E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000020   0x.... 0x....      BL       __aeabi_ui2f
   \   00000024   0x....             LDR.N    R1,??DataTable3_3  ;; 0x42c80000
   \   00000026   0x.... 0x....      BL       __aeabi_fdiv
   \   0000002A   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000002C   0xF845 0x0026      STR      R0,[R5, R6, LSL #+2]
    227              }
   \   00000030   0x1C76             ADDS     R6,R6,#+1
   \                     ??EVEUISHIFT_0:
   \   00000032   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000034   0xF5B6 0x6F70      CMP      R6,#+3840
   \   00000038   0xD3E7             BCC.N    ??EVEUISHIFT_1
    228          }
   \   0000003A   0xBD70             POP      {R4-R6,PC}       ;; return
    229          /*******************************************************************************
    230          * 函  数  名      : U16TOFL_UI
    231          * 描      述      : 将AD的电压电流采样值变为+-311v和+-8.48A以内
    232          * 输      入      : U8 DADAIN[],U8 NUM,UI_FLG,0为电压，1为电流
    233          * 返      回      : 返float DATAOUT[]
    234          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    235          void U16TOFL_UI(U8 DADAIN[],U16 NUM,float DATAOUT[])//NUM为待转换数据个数
    236          {
   \                     U16TOFL_UI:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    237              for(U16 i=0; i<NUM; i++)
   \   0000000A   0x2700             MOVS     R7,#+0
   \   0000000C   0xE016             B.N      ??U16TOFL_UI_0
    238              {
    239                  DATAOUT[i]=((float)((int)(DADAIN[2*i])<<8)+(int)(DADAIN[2*i+1]))/10;//>>7~=/128.0.00026 0.0095
   \                     ??U16TOFL_UI_1:
   \   0000000E   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000010   0xF814 0x0017      LDRB     R0,[R4, R7, LSL #+1]
   \   00000014   0x0200             LSLS     R0,R0,#+8
   \   00000016   0x.... 0x....      BL       __aeabi_i2f
   \   0000001A   0x4680             MOV      R8,R0
   \   0000001C   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000001E   0xEB14 0x0047      ADDS     R0,R4,R7, LSL #+1
   \   00000022   0x7840             LDRB     R0,[R0, #+1]
   \   00000024   0x.... 0x....      BL       __aeabi_ui2f
   \   00000028   0x4641             MOV      R1,R8
   \   0000002A   0x.... 0x....      BL       __aeabi_fadd
   \   0000002E   0x....             LDR.N    R1,??DataTable3_4  ;; 0x41200000
   \   00000030   0x.... 0x....      BL       __aeabi_fdiv
   \   00000034   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000036   0xF846 0x0027      STR      R0,[R6, R7, LSL #+2]
    240              }
   \   0000003A   0x1C7F             ADDS     R7,R7,#+1
   \                     ??U16TOFL_UI_0:
   \   0000003C   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000003E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000040   0x42AF             CMP      R7,R5
   \   00000042   0xD3E4             BCC.N    ??U16TOFL_UI_1
    241              /*
    242            for(U16 i=NUM; i<NUM*2; i++)
    243            {
    244               DATAOUT[i]=(((int)(DADAIN[2*i])<<8)+(int)(DADAIN[2*i+1]))*0.00026;
    245            }*/
    246          }
   \   00000044   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x47C35000         DC32     0x47c35000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x461C4000         DC32     0x461c4000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x43B40000         DC32     0x43b40000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x42C80000         DC32     0x42c80000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x41200000         DC32     0x41200000

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       40  AtoFA
             40 -> __aeabi_d2f
             40 -> atof
        8  BCD2Decimal
       32  CharToInt
             32 -> abs
       28  ChartoFloat
             28 -> __aeabi_fdiv
             28 -> __aeabi_i2f
             28 -> __aeabi_ui2f
       16  EVEUISHIFT
             16 -> __aeabi_fdiv
             16 -> __aeabi_ui2f
       24  FLTOINT_UI
             24 -> __aeabi_f2iz
             24 -> __aeabi_fdiv
       24  PhaseShift
             24 -> __aeabi_cfcmple
             24 -> __aeabi_f2iz
             24 -> __aeabi_f2uiz
             24 -> __aeabi_fadd
             24 -> __aeabi_fmul
             24 -> __aeabi_fsub
       24  U16TOFL_UI
             24 -> __aeabi_fadd
             24 -> __aeabi_fdiv
             24 -> __aeabi_i2f
             24 -> __aeabi_ui2f
       20  UIValues2HR
             20 -> __aeabi_f2uiz
             20 -> __aeabi_fdiv
             20 -> __aeabi_fmul
       16  WR_WAVE_UI
             16 -> YADA_C0


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
     120  AtoFA
      48  BCD2Decimal
     206  CharToInt
     118  ChartoFloat
      60  EVEUISHIFT
     140  FLTOINT_UI
     188  PhaseShift
      72  U16TOFL_UI
      64  UIValues2HR
     302  WR_WAVE_UI

 
 1 338 bytes in section .text
 
 1 338 bytes of CODE memory

Errors: none
Warnings: none
