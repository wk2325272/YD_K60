###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     25/Apr/2013  10:29:38 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\Freescale\mqx_test\YD_PRJ_NEW_20130323_git_\Source\Da #
#                    taConvert.c                                              #
#    Command line =  E:\Freescale\mqx_test\YD_PRJ_NEW_20130323_git_\Source\Da #
#                    taConvert.c -D _DEBUG=1 -lC                              #
#                    "E:\Freescale\mqx_test\YD_PRJ_NEW_20130323_git_\IAR\twrk #
#                    60n512\Int Flash Debug\List\" -lA                        #
#                    "E:\Freescale\mqx_test\YD_PRJ_NEW_20130323_git_\IAR\twrk #
#                    60n512\Int Flash Debug\List\" --diag_suppress            #
#                    Pa039,Pa082,Pe186 -o "E:\Freescale\mqx_test\YD_PRJ_NEW_2 #
#                    0130323_git_\IAR\twrk60n512\Int Flash Debug\Obj\"        #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M4 -e --fpu=None            #
#                    --dlib_config "D:\Program Files\IAR Systems\Embedded     #
#                    Workbench 6.0\arm\INC\c\DLib_Config_Normal.h" -I         #
#                    E:\Freescale\mqx_test\YD_PRJ_NEW_20130323_git_\IAR\..\li #
#                    b\twrk60n512.iar\ -I E:\Freescale\mqx_test\YD_PRJ_NEW_20 #
#                    130323_git_\IAR\..\lib\twrk60n512.iar\bsp\ -I            #
#                    E:\Freescale\mqx_test\YD_PRJ_NEW_20130323_git_\IAR\..\li #
#                    b\twrk60n512.iar\psp\ -I E:\Freescale\mqx_test\YD_PRJ_NE #
#                    W_20130323_git_\IAR\..\lib\twrk60n512.iar\bsp\Generated_ #
#                    Code\ -I E:\Freescale\mqx_test\YD_PRJ_NEW_20130323_git_\ #
#                    IAR\..\lib\twrk60n512.iar\rtcs\ -I                       #
#                    E:\Freescale\mqx_test\YD_PRJ_NEW_20130323_git_\IAR\..\li #
#                    b\twrk60n512.iar\mfs\ -I E:\Freescale\mqx_test\YD_PRJ_NE #
#                    W_20130323_git_\IAR\..\lib\twrk60n512.iar\usb\host\ -I   #
#                    E:\Freescale\mqx_test\YD_PRJ_NEW_20130323_git_\IAR\..\li #
#                    b\twrk60n512.iar\shell\ -I E:\Freescale\mqx_test\YD_PRJ_ #
#                    NEW_20130323_git_\IAR\..\lib\twrk60n512.iar\usb\ -I      #
#                    E:\Freescale\mqx_test\YD_PRJ_NEW_20130323_git_\IAR\..\   #
#                    -I E:\Freescale\mqx_test\YD_PRJ_NEW_20130323_git_\IAR\.. #
#                    \Source\Source_MQX\ -I E:\Freescale\mqx_test\YD_PRJ_NEW_ #
#                    20130323_git_\IAR\..\Source\ -I "E:\Freescale\Freescale  #
#                    MQX 3.8\shell\source\include\" -Ol --use_c++_inline      #
#    List file    =  E:\Freescale\mqx_test\YD_PRJ_NEW_20130323_git_\IAR\twrk6 #
#                    0n512\Int Flash Debug\List\DataConvert.lst               #
#    Object file  =  E:\Freescale\mqx_test\YD_PRJ_NEW_20130323_git_\IAR\twrk6 #
#                    0n512\Int Flash Debug\Obj\DataConvert.o                  #
#                                                                             #
#                                                                             #
###############################################################################

E:\Freescale\mqx_test\YD_PRJ_NEW_20130323_git_\Source\DataConvert.c
      1          /*******************************************************************************
      2          * File Name        : DataConvert.c
      3          * Author             : LB&TX
      4          * Version            : V1.0.0
      5          * Date                :
      6          * Description        :数据转换函数
      7          *******************************************************************************/
      8          #define  DataCnvt_GLOBALS
      9          
     10          #include "includes.h"
     11          /*******************************************************************************
     12          * 函  数  名      : UIValues2HR
     13          * 描      述      :压电流谐波有效值转换为100000倍谐波含有率(无符号的实数转换为4个
     14                            字节供C108显示用)，显示时控制小数位为3即可，需要将接受到的四
     15                            个字节电压电流谐波值先转换为float型
     16          * 输      入      : UIValues[]
     17          * 返      回      : HR[]
     18          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     19          void UIValues2HR(float UIValues[],U16 HR[])
     20          {
   \                     UIValues2HR:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     21              float temp=UIValues[0];
   \   00000006   0x6826             LDR      R6,[R4, #+0]
     22              U32 t=0;
   \   00000008   0x2000             MOVS     R0,#+0
     23              for(U8 i=0; i<50; i++)
   \   0000000A   0x2700             MOVS     R7,#+0
   \   0000000C   0xE014             B.N      ??UIValues2HR_0
     24              {
     25                  t=(U32)((UIValues[i]/temp)*100000);
   \                     ??UIValues2HR_1:
   \   0000000E   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000010   0xF854 0x0027      LDR      R0,[R4, R7, LSL #+2]
   \   00000014   0x0031             MOVS     R1,R6
   \   00000016   0x.... 0x....      BL       __aeabi_fdiv
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable4  ;; 0x47c35000
   \   0000001E   0x.... 0x....      BL       __aeabi_fmul
   \   00000022   0x.... 0x....      BL       __aeabi_f2uiz
     26                  *(HR+2*i)=(t&0xffff0000)>>16;
   \   00000026   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000028   0x0C01             LSRS     R1,R0,#+16
   \   0000002A   0xF825 0x1027      STRH     R1,[R5, R7, LSL #+2]
     27                  *(HR+2*i+1)=t&0x0000ffff;
   \   0000002E   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000030   0xEB15 0x0187      ADDS     R1,R5,R7, LSL #+2
   \   00000034   0x8048             STRH     R0,[R1, #+2]
     28              }
   \   00000036   0x1C7F             ADDS     R7,R7,#+1
   \                     ??UIValues2HR_0:
   \   00000038   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000003A   0x2F32             CMP      R7,#+50
   \   0000003C   0xD3E7             BCC.N    ??UIValues2HR_1
     29          }
   \   0000003E   0xBDF0             POP      {R4-R7,PC}       ;; return
     30          /*************************************************
     31            Function:       ChartoFloat
     32            Description:    将SPI接收到的连续四个字节的数据转换成一个浮点数(除以10000还原)
     33            Input:          CharIn[],输入的字节数组
     34                            FloatOut[],转换以后的数据存放的起始地址
     35                            FNum,转换以后的浮点数个数
     36            Return:         无
     37            Others:         0321暂时将所有接收到的数据转换成浮点型
     38                            ???可否进行优化???
     39          *************************************************/

   \                                 In section .text, align 2, keep-with-next
     40          void ChartoFloat(U8 CharIn[],float FloatOut[],U16 FNum,U16 times)
     41          {
   \                     ChartoFloat:
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
     42          //    long  temp; 
     43              float temp;  // wk --> modifeid 
     44              for(U16 i=0; i<FNum; i++)
   \   0000000C   0xF05F 0x0800      MOVS     R8,#+0
   \   00000010   0xE02A             B.N      ??ChartoFloat_0
     45              {
     46                /* wk --> 此处影响：进入谐波列表项后，程序卡死在这里，触摸屏死掉   --> 解决： 标志位未初始化问题导致*/
     47                  temp=((long)(CharIn[4*i])<<24)+((long)(CharIn[4*i+1])<<16)+((long)(CharIn[4*i+2])<<8)+(long)(CharIn[4*i+3]);
   \                     ??ChartoFloat_1:
   \   00000012   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000016   0xF814 0x0028      LDRB     R0,[R4, R8, LSL #+2]
   \   0000001A   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000001E   0xEB14 0x0188      ADDS     R1,R4,R8, LSL #+2
   \   00000022   0x7849             LDRB     R1,[R1, #+1]
   \   00000024   0x0409             LSLS     R1,R1,#+16
   \   00000026   0xEB11 0x6000      ADDS     R0,R1,R0, LSL #+24
   \   0000002A   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000002E   0xEB14 0x0188      ADDS     R1,R4,R8, LSL #+2
   \   00000032   0x7889             LDRB     R1,[R1, #+2]
   \   00000034   0xEB10 0x2001      ADDS     R0,R0,R1, LSL #+8
   \   00000038   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000003C   0xEB14 0x0188      ADDS     R1,R4,R8, LSL #+2
   \   00000040   0x78C9             LDRB     R1,[R1, #+3]
   \   00000042   0xFA50 0xF081      UXTAB    R0,R0,R1
   \   00000046   0x.... 0x....      BL       __aeabi_i2f
   \   0000004A   0x4681             MOV      R9,R0
     48                  *(FloatOut+i)=((float)temp)/times;
   \   0000004C   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000004E   0x0038             MOVS     R0,R7
   \   00000050   0x.... 0x....      BL       __aeabi_ui2f
   \   00000054   0x0001             MOVS     R1,R0
   \   00000056   0x4648             MOV      R0,R9
   \   00000058   0x.... 0x....      BL       __aeabi_fdiv
   \   0000005C   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000060   0xF845 0x0028      STR      R0,[R5, R8, LSL #+2]
     49              }
   \   00000064   0xF118 0x0801      ADDS     R8,R8,#+1
   \                     ??ChartoFloat_0:
   \   00000068   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000006C   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000006E   0x45B0             CMP      R8,R6
   \   00000070   0xD3CF             BCC.N    ??ChartoFloat_1
     50          }
   \   00000072   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
     51          /*******************************************************************************
     52          * 函  数  名      : FloatTo4DecimalsC108
     53          * 描      述      :将浮点数转换为供C108显示用的四个字节，浮点数乘以了10000，因此
     54                             C108显示时需要控制是4位小数，只用于显示正数
     55          * 输      入      : DataIn[]，U8 Num
     56          * 返      回      : DataBack[]
     57          *******************************************************************************/
     58          /*
     59          void FloatTo4DecimalsC108(float DataIn[],U16 DataBack[],U8 Num)
     60          {
     61              U32 t=0;
     62              for(U8 i=0; i<Num; i++)
     63              {
     64                  t=(U32)((DataIn[i])*10000);
     65                  *(DataBack+2*i)=(t&0xffff0000)>>16;
     66                  *(DataBack+2*i+1)=t&0x0000ffff;
     67              }
     68          }
     69          */
     70          /*******************************************************************************
     71          * 函  数  名      : CharToInt
     72          * 描      述      : 将波形采样值扩充并赋给WAVE_UI数组字节变为字，
     73                              80个字节变为100个字,WordOut个数为100*LineNum
     74          * 输      入      : CharIn[]，LineNum
     75          * 返      回      : WordOut[]
     76          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     77          void CharToInt(U8 CharIn[], U16 WordOut[],U8 LineNum,U8 HalfRange)
     78          {
   \                     CharToInt:
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
     79              U8 i,j,temp;
     80              U16 abstemp;
     81              for (j = 0; j < LineNum; j++)
   \   0000000C   0xF05F 0x0800      MOVS     R8,#+0
   \   00000010   0xE001             B.N      ??CharToInt_0
   \                     ??CharToInt_1:
   \   00000012   0xF118 0x0801      ADDS     R8,R8,#+1
   \                     ??CharToInt_0:
   \   00000016   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000001A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000001C   0x45B0             CMP      R8,R6
   \   0000001E   0xD254             BCS.N    ??CharToInt_2
     82                  for (i = 0; i < Cycledot; i++)  // wk -->  Cycledot = 80 //实时波形的点数
   \   00000020   0xF05F 0x0900      MOVS     R9,#+0
   \   00000024   0xE025             B.N      ??CharToInt_3
     83                  {
     84                      temp=CharIn[i + j*Cycledot];
     85                      abstemp = abs(temp-127) * HalfRange*2/255;
     86                      if((temp-127)<0)
     87                      {
     88                          WordOut[i + j*size_UI] =HalfRange-abstemp; //
     89                      }
     90                      else
     91                      {
     92                          WordOut[i + j*size_UI] =HalfRange+abstemp; //
   \                     ??CharToInt_4:
   \   00000026   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000002A   0x2164             MOVS     R1,#+100
   \   0000002C   0xFB01 0xF108      MUL      R1,R1,R8
   \   00000030   0xFA51 0xF189      UXTAB    R1,R1,R9
   \   00000034   0xFA50 0xF087      UXTAB    R0,R0,R7
   \   00000038   0xF825 0x0011      STRH     R0,[R5, R1, LSL #+1]
     93                      }
     94                      if(i<20)
   \                     ??CharToInt_5:
   \   0000003C   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000040   0xF1B9 0x0F14      CMP      R9,#+20
   \   00000044   0xD213             BCS.N    ??CharToInt_6
     95                      {
     96                          WordOut[i + j*size_UI+Cycledot]=WordOut[i + j*size_UI];
   \   00000046   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000004A   0x2064             MOVS     R0,#+100
   \   0000004C   0xFB00 0xF008      MUL      R0,R0,R8
   \   00000050   0xFA50 0xF089      UXTAB    R0,R0,R9
   \   00000054   0xEB15 0x0040      ADDS     R0,R5,R0, LSL #+1
   \   00000058   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000005C   0x2164             MOVS     R1,#+100
   \   0000005E   0xFB01 0xF108      MUL      R1,R1,R8
   \   00000062   0xFA51 0xF189      UXTAB    R1,R1,R9
   \   00000066   0xF835 0x1011      LDRH     R1,[R5, R1, LSL #+1]
   \   0000006A   0xF8A0 0x10A0      STRH     R1,[R0, #+160]
     97                      }
   \                     ??CharToInt_6:
   \   0000006E   0xF119 0x0901      ADDS     R9,R9,#+1
   \                     ??CharToInt_3:
   \   00000072   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000076   0xF1B9 0x0F50      CMP      R9,#+80
   \   0000007A   0xD2CA             BCS.N    ??CharToInt_1
   \   0000007C   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000080   0x2050             MOVS     R0,#+80
   \   00000082   0xFB00 0xF008      MUL      R0,R0,R8
   \   00000086   0xFA50 0xF089      UXTAB    R0,R0,R9
   \   0000008A   0xF810 0xA004      LDRB     R10,[R0, R4]
   \   0000008E   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000092   0xF1BA 0x007F      SUBS     R0,R10,#+127
   \   00000096   0x.... 0x....      BL       abs
   \   0000009A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000009C   0x4378             MULS     R0,R7,R0
   \   0000009E   0x0040             LSLS     R0,R0,#+1
   \   000000A0   0x21FF             MOVS     R1,#+255
   \   000000A2   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   000000A6   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   000000AA   0xF1BA 0x017F      SUBS     R1,R10,#+127
   \   000000AE   0x2900             CMP      R1,#+0
   \   000000B0   0xD5B9             BPL.N    ??CharToInt_4
   \   000000B2   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000000B6   0x2164             MOVS     R1,#+100
   \   000000B8   0xFB01 0xF108      MUL      R1,R1,R8
   \   000000BC   0xFA51 0xF189      UXTAB    R1,R1,R9
   \   000000C0   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000C2   0x1A38             SUBS     R0,R7,R0
   \   000000C4   0xF825 0x0011      STRH     R0,[R5, R1, LSL #+1]
   \   000000C8   0xE7B8             B.N      ??CharToInt_5
     98                  }
     99          }
   \                     ??CharToInt_2:
   \   000000CA   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return

   \                                 In section .text, align 2, keep-with-next
    100          void BCD2Decimal(U8 Data[],U8 Num)///将BCD码转换为10进制数
    101          {
   \                     BCD2Decimal:
   \   00000000   0xB430             PUSH     {R4,R5}
    102              for(U8 i=0; i<Num; i++)
   \   00000002   0x2200             MOVS     R2,#+0
   \   00000004   0xE00E             B.N      ??BCD2Decimal_0
    103              {
    104                  Data[i] = (Data[i] >> 4) *10+(Data[i] &0x0f);
   \                     ??BCD2Decimal_1:
   \   00000006   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000008   0x5C13             LDRB     R3,[R2, R0]
   \   0000000A   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000000C   0x091B             LSRS     R3,R3,#+4
   \   0000000E   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000010   0x240A             MOVS     R4,#+10
   \   00000012   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000014   0x5C15             LDRB     R5,[R2, R0]
   \   00000016   0xF015 0x050F      ANDS     R5,R5,#0xF
   \   0000001A   0xFB04 0x5303      MLA      R3,R4,R3,R5
   \   0000001E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000020   0x5413             STRB     R3,[R2, R0]
    105              }
   \   00000022   0x1C52             ADDS     R2,R2,#+1
   \                     ??BCD2Decimal_0:
   \   00000024   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000026   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000028   0x428A             CMP      R2,R1
   \   0000002A   0xD3EC             BCC.N    ??BCD2Decimal_1
    106          }
   \   0000002C   0xBC30             POP      {R4,R5}
   \   0000002E   0x4770             BX       LR               ;; return
    107          /*******************************************************************************
    108          * 函  数  名      : PhaseShift
    109          * 描      述      : 电压电流相位转换为与UA的差值，且变为角度。
    110          * 输      入      : DataIn[]，Num
    111          * 返      回      : DataBack[]
    112          *******************************************************************************/
    113          #if 0 // @130420
    114          void PhaseShift(float DataIn[],U16 DataBack[],U8 Num,U32 DATABACK[])
    115          {
    116              U8 i;
    117              for(i=0; i<Num; i++)
    118              {
    119                  if(((DataIn[i]-DataIn[0])<0)==1)
    120                  {
    121                      //DataBack[i]=(int)((DataIn[i]-DataIn[0]+360)*PI/180);
    122                      DataBack[i]=(int)((DataIn[i]-DataIn[0]+360));
    123                      DATABACK[i]=(U32)((DataIn[i]-DataIn[0]+360)*10000);
    124                  }
    125                  else
    126                  {
    127                      //DataBack[i]=(int)((DataIn[i]-DataIn[0])*PI/180);
    128                      DataBack[i]=(int)((DataIn[i]-DataIn[0]));
    129                      DATABACK[i]=(U32)((DataIn[i]-DataIn[0])*10000);
    130                  }
    131              }
    132          }
    133          #endif

   \                                 In section .text, align 2, keep-with-next
    134          void PhaseShift(float DataIn[],U16 DataBack[],U8 Num,U8 DATBACK[])
    135          {
   \                     PhaseShift:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB086             SUB      SP,SP,#+24
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
   \   0000000C   0x001F             MOVS     R7,R3
    136              U8 i,temp;//
    137              U32 DATA_TEMP[6]= {0};
   \   0000000E   0xA800             ADD      R0,SP,#+0
   \   00000010   0x2118             MOVS     R1,#+24
   \   00000012   0x.... 0x....      BL       __aeabi_memclr4
    138              for(i=0; i<Num; i++)
   \   00000016   0xF05F 0x0800      MOVS     R8,#+0
   \   0000001A   0xE046             B.N      ??PhaseShift_0
    139              {
    140                  if((DataIn[i]-DataIn[0])<0)
    141                  {
    142                      //DataBack[i]=(int)((DataIn[i]-DataIn[0]+360)*PI/180);
    143                      DataBack[i]=(int)((DataIn[i]-DataIn[0]+360));
    144                      DATA_TEMP[i]=(U32)((DataIn[i]-DataIn[0]+360)*10);
    145                      temp=4*i;
    146                      DATBACK[temp]=(U8)(DATA_TEMP[i]>>24);
    147                      DATBACK[temp+1]=(U8)(DATA_TEMP[i]>>16);
    148                      DATBACK[temp+2]=(U8)(DATA_TEMP[i]>>8);
    149                      DATBACK[temp+3]=(U8)(DATA_TEMP[i]);
    150                      // DATA_TEMP[i]=(U16)((DataIn[i]-DataIn[0]+360)*10);
    151                      /// temp=2*i;
    152                      // DATBACK[temp+1]=(U8)DATA_TEMP[i];
    153                      //DATBACK[temp]=((U8)DATA_TEMP[i]>>8);
    154                  }
    155                  else
    156                  {
    157                      //DataBack[i]=(int)((DataIn[i]-DataIn[0])*PI/180);
    158                      DataBack[i]=(int)((DataIn[i]-DataIn[0]));
   \                     ??PhaseShift_1:
   \   0000001C   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000020   0xF854 0x0028      LDR      R0,[R4, R8, LSL #+2]
   \   00000024   0x6821             LDR      R1,[R4, #+0]
   \   00000026   0x.... 0x....      BL       __aeabi_fsub
   \   0000002A   0x.... 0x....      BL       __aeabi_f2iz
   \   0000002E   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000032   0xF825 0x0018      STRH     R0,[R5, R8, LSL #+1]
    159                      DATA_TEMP[i]=(U32)((DataIn[i]-DataIn[0])*10);
   \   00000036   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000003A   0xF854 0x0028      LDR      R0,[R4, R8, LSL #+2]
   \   0000003E   0x6821             LDR      R1,[R4, #+0]
   \   00000040   0x.... 0x....      BL       __aeabi_fsub
   \   00000044   0x.... 0x....      LDR.W    R1,??DataTable4_1  ;; 0x41200000
   \   00000048   0x.... 0x....      BL       __aeabi_fmul
   \   0000004C   0x.... 0x....      BL       __aeabi_f2uiz
   \   00000050   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000054   0xA900             ADD      R1,SP,#+0
   \   00000056   0xF841 0x0028      STR      R0,[R1, R8, LSL #+2]
    160                      temp=4*i;
   \   0000005A   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000005E   0xEA5F 0x0088      LSLS     R0,R8,#+2
    161                      DATBACK[temp]=(U8)(DATA_TEMP[i]>>24);
   \   00000062   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000066   0xA900             ADD      R1,SP,#+0
   \   00000068   0xF851 0x1028      LDR      R1,[R1, R8, LSL #+2]
   \   0000006C   0x0E09             LSRS     R1,R1,#+24
   \   0000006E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000070   0x55C1             STRB     R1,[R0, R7]
    162                      DATBACK[temp+1]=(U8)(DATA_TEMP[i]>>16);
   \   00000072   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000076   0xA900             ADD      R1,SP,#+0
   \   00000078   0xF851 0x1028      LDR      R1,[R1, R8, LSL #+2]
   \   0000007C   0x0C09             LSRS     R1,R1,#+16
   \   0000007E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000080   0x19C2             ADDS     R2,R0,R7
   \   00000082   0x7051             STRB     R1,[R2, #+1]
    163                      DATBACK[temp+2]=(U8)(DATA_TEMP[i]>>8);
   \   00000084   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000088   0xA900             ADD      R1,SP,#+0
   \   0000008A   0xF851 0x1028      LDR      R1,[R1, R8, LSL #+2]
   \   0000008E   0x0A09             LSRS     R1,R1,#+8
   \   00000090   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000092   0x19C2             ADDS     R2,R0,R7
   \   00000094   0x7091             STRB     R1,[R2, #+2]
    164                      DATBACK[temp+3]=(U8)(DATA_TEMP[i]);
   \   00000096   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000098   0x19C0             ADDS     R0,R0,R7
   \   0000009A   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000009E   0xA900             ADD      R1,SP,#+0
   \   000000A0   0xF851 0x1028      LDR      R1,[R1, R8, LSL #+2]
   \   000000A4   0x70C1             STRB     R1,[R0, #+3]
    165                      //DATA_TEMP[i]=(U16)((DataIn[i]-DataIn[0])*10);
    166                      // temp=2*i;
    167                      // DATBACK[temp+1]=(U8)DATA_TEMP[i];
    168                      // DATBACK[temp]=((U8)DATA_TEMP[i]>>8);
    169                  }
   \                     ??PhaseShift_2:
   \   000000A6   0xF118 0x0801      ADDS     R8,R8,#+1
   \                     ??PhaseShift_0:
   \   000000AA   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000000AE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000B0   0x45B0             CMP      R8,R6
   \   000000B2   0xD258             BCS.N    ??PhaseShift_3
   \   000000B4   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000000B8   0xF854 0x0028      LDR      R0,[R4, R8, LSL #+2]
   \   000000BC   0x6821             LDR      R1,[R4, #+0]
   \   000000BE   0x.... 0x....      BL       __aeabi_fsub
   \   000000C2   0x2100             MOVS     R1,#+0
   \   000000C4   0x.... 0x....      BL       __aeabi_cfcmple
   \   000000C8   0xD2A8             BCS.N    ??PhaseShift_1
   \   000000CA   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000000CE   0xF854 0x0028      LDR      R0,[R4, R8, LSL #+2]
   \   000000D2   0x6821             LDR      R1,[R4, #+0]
   \   000000D4   0x.... 0x....      BL       __aeabi_fsub
   \   000000D8   0x.... 0x....      LDR.W    R1,??DataTable4_2  ;; 0x43b40000
   \   000000DC   0x.... 0x....      BL       __aeabi_fadd
   \   000000E0   0x.... 0x....      BL       __aeabi_f2iz
   \   000000E4   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000000E8   0xF825 0x0018      STRH     R0,[R5, R8, LSL #+1]
   \   000000EC   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000000F0   0xF854 0x0028      LDR      R0,[R4, R8, LSL #+2]
   \   000000F4   0x6821             LDR      R1,[R4, #+0]
   \   000000F6   0x.... 0x....      BL       __aeabi_fsub
   \   000000FA   0x.... 0x....      LDR.W    R1,??DataTable4_2  ;; 0x43b40000
   \   000000FE   0x.... 0x....      BL       __aeabi_fadd
   \   00000102   0x.... 0x....      LDR.W    R1,??DataTable4_1  ;; 0x41200000
   \   00000106   0x.... 0x....      BL       __aeabi_fmul
   \   0000010A   0x.... 0x....      BL       __aeabi_f2uiz
   \   0000010E   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000112   0xA900             ADD      R1,SP,#+0
   \   00000114   0xF841 0x0028      STR      R0,[R1, R8, LSL #+2]
   \   00000118   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000011C   0xEA5F 0x0088      LSLS     R0,R8,#+2
   \   00000120   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000124   0xA900             ADD      R1,SP,#+0
   \   00000126   0xF851 0x1028      LDR      R1,[R1, R8, LSL #+2]
   \   0000012A   0x0E09             LSRS     R1,R1,#+24
   \   0000012C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000012E   0x55C1             STRB     R1,[R0, R7]
   \   00000130   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000134   0xA900             ADD      R1,SP,#+0
   \   00000136   0xF851 0x1028      LDR      R1,[R1, R8, LSL #+2]
   \   0000013A   0x0C09             LSRS     R1,R1,#+16
   \   0000013C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000013E   0x19C2             ADDS     R2,R0,R7
   \   00000140   0x7051             STRB     R1,[R2, #+1]
   \   00000142   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000146   0xA900             ADD      R1,SP,#+0
   \   00000148   0xF851 0x1028      LDR      R1,[R1, R8, LSL #+2]
   \   0000014C   0x0A09             LSRS     R1,R1,#+8
   \   0000014E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000150   0x19C2             ADDS     R2,R0,R7
   \   00000152   0x7091             STRB     R1,[R2, #+2]
   \   00000154   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000156   0x19C0             ADDS     R0,R0,R7
   \   00000158   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000015C   0xA900             ADD      R1,SP,#+0
   \   0000015E   0xF851 0x1028      LDR      R1,[R1, R8, LSL #+2]
   \   00000162   0x70C1             STRB     R1,[R0, #+3]
   \   00000164   0xE79F             B.N      ??PhaseShift_2
    170              }
    171          }
   \                     ??PhaseShift_3:
   \   00000166   0xB006             ADD      SP,SP,#+24
   \   00000168   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    172          /*******************************************************************************
    173          * 函  数  名      : WR_WAVE_UI
    174          * 描      述      : 将WAVE_UI写入触摸屏，一次最多248个字节，所以分次写入
    175                              用C104画波形，需将数据再写入触摸屏。
    176          * 输      入      : DataIn[]，UI_U_I，rewrite
    177          * 返      回      : 无
    178          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    179          void WR_WAVE_UI(U16 DATAIN[],U8 UI_U_I, U8 rewrite)
    180          {
   \                     WR_WAVE_UI:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0015             MOVS     R5,R2
    181              switch(UI_U_I)
   \   00000006   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000008   0x2901             CMP      R1,#+1
   \   0000000A   0xD005             BEQ.N    ??WR_WAVE_UI_0
   \   0000000C   0xF0C0 0x808E      BCC.W    ??WR_WAVE_UI_1
   \   00000010   0x2903             CMP      R1,#+3
   \   00000012   0xD067             BEQ.N    ??WR_WAVE_UI_2
   \   00000014   0xD345             BCC.N    ??WR_WAVE_UI_3
   \   00000016   0xE089             B.N      ??WR_WAVE_UI_1
    182              {
    183              case 1:
    184                  YADA_C0 (UA_addr + rewrite*size_UI,DATAIN,size_UI);  // #define size_UI 100               //波形采样数据各相总数
   \                     ??WR_WAVE_UI_0:
   \   00000018   0x2264             MOVS     R2,#+100
   \   0000001A   0x0021             MOVS     R1,R4
   \   0000001C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001E   0x2064             MOVS     R0,#+100
   \   00000020   0xFB00 0xF005      MUL      R0,R0,R5
   \   00000024   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000026   0x.... 0x....      BL       YADA_C0
    185                  YADA_C0 (UB_addr + rewrite*size_UI,&DATAIN[size_UI],size_UI);
   \   0000002A   0x2264             MOVS     R2,#+100
   \   0000002C   0xF114 0x01C8      ADDS     R1,R4,#+200
   \   00000030   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000032   0x2064             MOVS     R0,#+100
   \   00000034   0xFB00 0xF005      MUL      R0,R0,R5
   \   00000038   0x30C8             ADDS     R0,R0,#+200
   \   0000003A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000003C   0x.... 0x....      BL       YADA_C0
    186                  YADA_C0 (UC_addr + rewrite*size_UI,&DATAIN[size_UI*2],size_UI);
   \   00000040   0x2264             MOVS     R2,#+100
   \   00000042   0xF204 0x1190      ADDW     R1,R4,#+400
   \   00000046   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000048   0x2064             MOVS     R0,#+100
   \   0000004A   0xFB00 0xF005      MUL      R0,R0,R5
   \   0000004E   0xF200 0x1090      ADDW     R0,R0,#+400
   \   00000052   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000054   0x.... 0x....      BL       YADA_C0
    187                  YADA_C0 (IA_addr + rewrite*size_UI,&DATAIN[size_UI*3],size_UI);
   \   00000058   0x2264             MOVS     R2,#+100
   \   0000005A   0xF204 0x2158      ADDW     R1,R4,#+600
   \   0000005E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000060   0x2064             MOVS     R0,#+100
   \   00000062   0xFB00 0xF005      MUL      R0,R0,R5
   \   00000066   0xF200 0x2058      ADDW     R0,R0,#+600
   \   0000006A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000006C   0x.... 0x....      BL       YADA_C0
    188                  YADA_C0 (IB_addr + rewrite*size_UI,&DATAIN[size_UI*4],size_UI);
   \   00000070   0x2264             MOVS     R2,#+100
   \   00000072   0xF204 0x3120      ADDW     R1,R4,#+800
   \   00000076   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000078   0x2064             MOVS     R0,#+100
   \   0000007A   0xFB00 0xF005      MUL      R0,R0,R5
   \   0000007E   0xF200 0x3020      ADDW     R0,R0,#+800
   \   00000082   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000084   0x.... 0x....      BL       YADA_C0
    189                  YADA_C0 (IC_addr + rewrite*size_UI,&DATAIN[size_UI*5],size_UI);
   \   00000088   0x2264             MOVS     R2,#+100
   \   0000008A   0xF204 0x31E8      ADDW     R1,R4,#+1000
   \   0000008E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000090   0x2064             MOVS     R0,#+100
   \   00000092   0xFB00 0xF005      MUL      R0,R0,R5
   \   00000096   0xF200 0x30E8      ADDW     R0,R0,#+1000
   \   0000009A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000009C   0x.... 0x....      BL       YADA_C0
    190                  break;
   \   000000A0   0xE044             B.N      ??WR_WAVE_UI_4
    191              case 2:
    192                  YADA_C0 (UA_addr + rewrite*size_UI,DATAIN,size_UI);
   \                     ??WR_WAVE_UI_3:
   \   000000A2   0x2264             MOVS     R2,#+100
   \   000000A4   0x0021             MOVS     R1,R4
   \   000000A6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000A8   0x2064             MOVS     R0,#+100
   \   000000AA   0xFB00 0xF005      MUL      R0,R0,R5
   \   000000AE   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000B0   0x.... 0x....      BL       YADA_C0
    193                  YADA_C0 (UB_addr + rewrite*size_UI,&DATAIN[size_UI],size_UI);
   \   000000B4   0x2264             MOVS     R2,#+100
   \   000000B6   0xF114 0x01C8      ADDS     R1,R4,#+200
   \   000000BA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000BC   0x2064             MOVS     R0,#+100
   \   000000BE   0xFB00 0xF005      MUL      R0,R0,R5
   \   000000C2   0x30C8             ADDS     R0,R0,#+200
   \   000000C4   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000C6   0x.... 0x....      BL       YADA_C0
    194                  YADA_C0 (UC_addr + rewrite*size_UI,&DATAIN[size_UI*2],size_UI);
   \   000000CA   0x2264             MOVS     R2,#+100
   \   000000CC   0xF204 0x1190      ADDW     R1,R4,#+400
   \   000000D0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000D2   0x2064             MOVS     R0,#+100
   \   000000D4   0xFB00 0xF005      MUL      R0,R0,R5
   \   000000D8   0xF200 0x1090      ADDW     R0,R0,#+400
   \   000000DC   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000DE   0x.... 0x....      BL       YADA_C0
    195                  break;
   \   000000E2   0xE023             B.N      ??WR_WAVE_UI_4
    196              case 3:
    197                  YADA_C0 (IA_addr + rewrite*size_UI,DATAIN,size_UI);
   \                     ??WR_WAVE_UI_2:
   \   000000E4   0x2264             MOVS     R2,#+100
   \   000000E6   0x0021             MOVS     R1,R4
   \   000000E8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000EA   0x2064             MOVS     R0,#+100
   \   000000EC   0xFB00 0xF005      MUL      R0,R0,R5
   \   000000F0   0xF200 0x2058      ADDW     R0,R0,#+600
   \   000000F4   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000F6   0x.... 0x....      BL       YADA_C0
    198                  YADA_C0 (IB_addr + rewrite*size_UI,&DATAIN[size_UI],size_UI);
   \   000000FA   0x2264             MOVS     R2,#+100
   \   000000FC   0xF114 0x01C8      ADDS     R1,R4,#+200
   \   00000100   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000102   0x2064             MOVS     R0,#+100
   \   00000104   0xFB00 0xF005      MUL      R0,R0,R5
   \   00000108   0xF200 0x3020      ADDW     R0,R0,#+800
   \   0000010C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000010E   0x.... 0x....      BL       YADA_C0
    199                  YADA_C0 (IC_addr + rewrite*size_UI,&DATAIN[size_UI*2],size_UI);
   \   00000112   0x2264             MOVS     R2,#+100
   \   00000114   0xF204 0x1190      ADDW     R1,R4,#+400
   \   00000118   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000011A   0x2064             MOVS     R0,#+100
   \   0000011C   0xFB00 0xF005      MUL      R0,R0,R5
   \   00000120   0xF200 0x30E8      ADDW     R0,R0,#+1000
   \   00000124   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000126   0x.... 0x....      BL       YADA_C0
    200                  break;
   \   0000012A   0xE7FF             B.N      ??WR_WAVE_UI_4
    201              default:
    202                  break;
    203              }
    204          }
   \                     ??WR_WAVE_UI_1:
   \                     ??WR_WAVE_UI_4:
   \   0000012C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    205          /*******************************************************************************
    206          * 函  数  名      : AtoFA
    207          * 描      述      : 将U盘读到的字符串转化为浮点数数组,包含正负
    208          * 输      入      : DATAIN[],待转化的字符数组
    209          * 返      回      : DATAOUT[],转化得到的浮点数数组
    210          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    211          void AtoFA(U8 DATAIN[],float DATAOUT[],U16 NUM)
    212          {
   \                     AtoFA:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB084             SUB      SP,SP,#+16
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
    213              U16 j=0;
   \   0000000C   0x2700             MOVS     R7,#+0
    214              char TEST[9],k=0;
   \   0000000E   0x2000             MOVS     R0,#+0
    215              for(U16 i=0; i<NUM*48; i++)//每行预设为48个字符
   \   00000010   0xF05F 0x0800      MOVS     R8,#+0
   \   00000014   0xE001             B.N      ??AtoFA_0
   \                     ??AtoFA_1:
   \   00000016   0xF118 0x0801      ADDS     R8,R8,#+1
   \                     ??AtoFA_0:
   \   0000001A   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000001E   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000020   0x2130             MOVS     R1,#+48
   \   00000022   0xFB01 0xF106      MUL      R1,R1,R6
   \   00000026   0x4588             CMP      R8,R1
   \   00000028   0xDA24             BGE.N    ??AtoFA_2
    216              {
    217                  TEST[k]=DATAIN[i];
   \   0000002A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002C   0xA900             ADD      R1,SP,#+0
   \   0000002E   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000032   0xF818 0x2004      LDRB     R2,[R8, R4]
   \   00000036   0x5442             STRB     R2,[R0, R1]
    218                  k++;
   \   00000038   0x1C40             ADDS     R0,R0,#+1
    219                  if((DATAIN[i]==',')||DATAIN[i]==0x0d)
   \   0000003A   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000003E   0xF818 0x1004      LDRB     R1,[R8, R4]
   \   00000042   0x292C             CMP      R1,#+44
   \   00000044   0xD005             BEQ.N    ??AtoFA_3
   \   00000046   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000004A   0xF818 0x1004      LDRB     R1,[R8, R4]
   \   0000004E   0x290D             CMP      R1,#+13
   \   00000050   0xD1E1             BNE.N    ??AtoFA_1
    220                  {
    221                      DATAOUT[j]=atof(TEST);
   \                     ??AtoFA_3:
   \   00000052   0xA800             ADD      R0,SP,#+0
   \   00000054   0x.... 0x....      BL       atof
   \   00000058   0x.... 0x....      BL       __aeabi_d2f
   \   0000005C   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000005E   0xF845 0x0027      STR      R0,[R5, R7, LSL #+2]
    222                      k=0;
   \   00000062   0x2000             MOVS     R0,#+0
    223                      //printf("%f",DATAOUT[j]);
    224                      j++;
   \   00000064   0x1C7F             ADDS     R7,R7,#+1
    225                      if(j>=NUM*6)
   \   00000066   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000068   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000006A   0x2106             MOVS     R1,#+6
   \   0000006C   0xFB01 0xF106      MUL      R1,R1,R6
   \   00000070   0x428F             CMP      R7,R1
   \   00000072   0xDBD0             BLT.N    ??AtoFA_1
    226                      {
    227                          break;
    228                      }
    229                  }
    230              }
    231          }
   \                     ??AtoFA_2:
   \   00000074   0xE8BD 0x81FF      POP      {R0-R8,PC}       ;; return
    232          /*******************************************************************************
    233          * 函  数  名      : FLTOINT_UI
    234          * 描      述      : 将U盘读到的电压电流浮点数数组转化为C104显示波形的整型数据
    235          * 输      入      : DATAIN[],电压电流浮点数组
    236          * 返      回      : DATOUT[],输出用于事件波形C104显示的数组
    237          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    238          void FLTOINT_UI(float DATAIN[],int DATOUT[],U16 FLAGNUM)
    239          {
   \                     FLTOINT_UI:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    240              for(U8 i=0; i<FLAGNUM; i++)
   \   0000000A   0x2700             MOVS     R7,#+0
   \   0000000C   0xE036             B.N      ??FLTOINT_UI_0
    241              {
    242                  DATOUT[i]=(int)(DATAIN[i*6]/4)+87;   //电压+-311变为屏幕显示的数据，87为中线值。
   \                     ??FLTOINT_UI_1:
   \   0000000E   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000010   0x2018             MOVS     R0,#+24
   \   00000012   0xFB00 0x4007      MLA      R0,R0,R7,R4
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0xF05F 0x4181      MOVS     R1,#+1082130432
   \   0000001C   0x.... 0x....      BL       __aeabi_fdiv
   \   00000020   0x.... 0x....      BL       __aeabi_f2iz
   \   00000024   0x3057             ADDS     R0,R0,#+87
   \   00000026   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000028   0xF845 0x0027      STR      R0,[R5, R7, LSL #+2]
    243                  DATOUT[i+FLAGNUM]=(int)(DATAIN[i*6+1]/4)+87;
   \   0000002C   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000002E   0xFA56 0xF887      UXTAB    R8,R6,R7
   \   00000032   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000034   0x2006             MOVS     R0,#+6
   \   00000036   0xFB00 0xF007      MUL      R0,R0,R7
   \   0000003A   0xEB14 0x0080      ADDS     R0,R4,R0, LSL #+2
   \   0000003E   0x6840             LDR      R0,[R0, #+4]
   \   00000040   0xF05F 0x4181      MOVS     R1,#+1082130432
   \   00000044   0x.... 0x....      BL       __aeabi_fdiv
   \   00000048   0x.... 0x....      BL       __aeabi_f2iz
   \   0000004C   0x3057             ADDS     R0,R0,#+87
   \   0000004E   0xF845 0x0028      STR      R0,[R5, R8, LSL #+2]
    244                  DATOUT[i+2*FLAGNUM]=(int)(DATAIN[i*6+2]/4)+87;
   \   00000052   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000054   0x0070             LSLS     R0,R6,#+1
   \   00000056   0xFA50 0xF887      UXTAB    R8,R0,R7
   \   0000005A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000005C   0x2006             MOVS     R0,#+6
   \   0000005E   0xFB00 0xF007      MUL      R0,R0,R7
   \   00000062   0xEB14 0x0080      ADDS     R0,R4,R0, LSL #+2
   \   00000066   0x6880             LDR      R0,[R0, #+8]
   \   00000068   0xF05F 0x4181      MOVS     R1,#+1082130432
   \   0000006C   0x.... 0x....      BL       __aeabi_fdiv
   \   00000070   0x.... 0x....      BL       __aeabi_f2iz
   \   00000074   0x3057             ADDS     R0,R0,#+87
   \   00000076   0xF845 0x0028      STR      R0,[R5, R8, LSL #+2]
    245                  /*DATOUT[i+3*FLAGNUM]=(int)(DATAIN[i*6+3]*14)+87;//电流+-6变为屏幕显示的数据，87为中线值。
    246                  DATOUT[i+4*FLAGNUM]=(int)(DATAIN[i*6+4]*14)+87;
    247                  DATOUT[i+5*FLAGNUM]=(int)(DATAIN[i*6+5]*14)+87;*/
    248              }
   \   0000007A   0x1C7F             ADDS     R7,R7,#+1
   \                     ??FLTOINT_UI_0:
   \   0000007C   0x0038             MOVS     R0,R7
   \   0000007E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000080   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000082   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000084   0x42B0             CMP      R0,R6
   \   00000086   0xD3C2             BCC.N    ??FLTOINT_UI_1
    249          }
   \   00000088   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    250          /*******************************************************************************
    251          * 函  数  名      :
    252          * 描      述      : 将U盘读到的电流浮点数数组转化为整型，并且改变正负
    253          * 输      入      : DATAIN[],待转化的浮点数数组
    254          * 返      回      : DATOUT1[],DATOUT2[],DATOUT3[]三相电压数组输出
    255          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    256          void EVEUISHIFT(U8 DATAIN[],float DATAOUT[])
    257          {
   \                     EVEUISHIFT:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    258              U16 temp;
    259              for(U16 i=0; i<EVEUILEN*12; i++)
   \   00000006   0x2600             MOVS     R6,#+0
   \   00000008   0xE013             B.N      ??EVEUISHIFT_0
    260              {
    261                  temp=((U16)(DATAIN[2*i])<<8)+((U16)(DATAIN[2*i+1]));
   \                     ??EVEUISHIFT_1:
   \   0000000A   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000000C   0xF814 0x0016      LDRB     R0,[R4, R6, LSL #+1]
   \   00000010   0x0200             LSLS     R0,R0,#+8
   \   00000012   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000014   0xEB14 0x0146      ADDS     R1,R4,R6, LSL #+1
   \   00000018   0x7849             LDRB     R1,[R1, #+1]
   \   0000001A   0xFA50 0xF081      UXTAB    R0,R0,R1
    262                  DATAOUT[i]=((float)temp)/100;
   \   0000001E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000020   0x.... 0x....      BL       __aeabi_ui2f
   \   00000024   0x....             LDR.N    R1,??DataTable4_3  ;; 0x42c80000
   \   00000026   0x.... 0x....      BL       __aeabi_fdiv
   \   0000002A   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000002C   0xF845 0x0026      STR      R0,[R5, R6, LSL #+2]
    263              }
   \   00000030   0x1C76             ADDS     R6,R6,#+1
   \                     ??EVEUISHIFT_0:
   \   00000032   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000034   0xF5B6 0x6F70      CMP      R6,#+3840
   \   00000038   0xD3E7             BCC.N    ??EVEUISHIFT_1
    264          }
   \   0000003A   0xBD70             POP      {R4-R6,PC}       ;; return
    265          /*******************************************************************************
    266          * 函  数  名      : U16TOFL_UI
    267          * 描      述      : 将AD的电压电流采样值变为+-311v和+-8.48A以内
    268          * 输      入      : U8 DADAIN[],U8 NUM,UI_FLG,0为电压，1为电流
    269          * 返      回      : 返float DATAOUT[]
    270          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    271          void U16TOFL_UI(U8 DADAIN[],U16 NUM,float DATAOUT[])//NUM为待转换数据个数
    272          {
   \                     U16TOFL_UI:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    273              for(U16 i=0; i<NUM; i++)
   \   0000000A   0x2700             MOVS     R7,#+0
   \   0000000C   0xE016             B.N      ??U16TOFL_UI_0
    274              {
    275                  DATAOUT[i]=((float)((int)(DADAIN[2*i])<<8)+(int)(DADAIN[2*i+1]))/10;//>>7~=/128.0.00026 0.0095
   \                     ??U16TOFL_UI_1:
   \   0000000E   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000010   0xF814 0x0017      LDRB     R0,[R4, R7, LSL #+1]
   \   00000014   0x0200             LSLS     R0,R0,#+8
   \   00000016   0x.... 0x....      BL       __aeabi_i2f
   \   0000001A   0x4680             MOV      R8,R0
   \   0000001C   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000001E   0xEB14 0x0047      ADDS     R0,R4,R7, LSL #+1
   \   00000022   0x7840             LDRB     R0,[R0, #+1]
   \   00000024   0x.... 0x....      BL       __aeabi_ui2f
   \   00000028   0x4641             MOV      R1,R8
   \   0000002A   0x.... 0x....      BL       __aeabi_fadd
   \   0000002E   0x....             LDR.N    R1,??DataTable4_1  ;; 0x41200000
   \   00000030   0x.... 0x....      BL       __aeabi_fdiv
   \   00000034   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000036   0xF846 0x0027      STR      R0,[R6, R7, LSL #+2]
    276              }
   \   0000003A   0x1C7F             ADDS     R7,R7,#+1
   \                     ??U16TOFL_UI_0:
   \   0000003C   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000003E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000040   0x42AF             CMP      R7,R5
   \   00000042   0xD3E4             BCC.N    ??U16TOFL_UI_1
    277              /*
    278            for(U16 i=NUM; i<NUM*2; i++)
    279            {
    280               DATAOUT[i]=(((int)(DADAIN[2*i])<<8)+(int)(DADAIN[2*i+1]))*0.00026;
    281            }*/
    282          }
   \   00000044   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    283          /*******************************************************************************
    284          * 函  数  名      : Sig_Fiq
    285          * 描      述      : 将电能数据按要求的有效数字进行转换
    286          * 输      入      : U8 DADAIN[],U8 TIMES，10为不缩小10倍即3位有效数字,
    287                              100为缩小100倍即2位有效数字,1000为不缩小1000倍即1位有效数字
    288          * 返      回      : 返float DATAOUT[]
    289          *******************************************************************************/
    290          //void Sig_Fiq(U8 DADAIN[],U8 DATAOUT[],U16 TIMES)
    291          //{
    292          //  long temp;
    293          //  temp=(((long)(DADAIN[0])<<24)+((long)(DADAIN[1])<<16)+((long)(DADAIN[2])<<8)+((long)(DADAIN[3])))/TIMES;
    294          //  DATAOUT[3]=temp;
    295          //  DATAOUT[2]=temp>>8;
    296          //  DATAOUT[1]=temp>>16;
    297          //  DATAOUT[0]=temp>>24;
    298          //}

   \                                 In section .text, align 2, keep-with-next
    299          void Sig_Fiq(U8 DADAIN[],U8 DATAOUT[],U16 TIMES, U8 NUM)
    300          {
   \                     Sig_Fiq:
   \   00000000   0xB4F0             PUSH     {R4-R7}
    301              long temp;
    302              U8 i,j;
    303              for(i=0; i<NUM; i++)
   \   00000002   0x2400             MOVS     R4,#+0
   \   00000004   0xE029             B.N      ??Sig_Fiq_0
    304              {
    305                  j=4*i;
   \                     ??Sig_Fiq_1:
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x00A5             LSLS     R5,R4,#+2
    306                  temp=(((long)(DADAIN[j])<<24)+((long)(DADAIN[1+j])<<16)+((long)(DADAIN[2+j])<<8)+((long)(DADAIN[3+j])))/TIMES;
   \   0000000A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000000C   0x5C2E             LDRB     R6,[R5, R0]
   \   0000000E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000010   0x182F             ADDS     R7,R5,R0
   \   00000012   0x787F             LDRB     R7,[R7, #+1]
   \   00000014   0x043F             LSLS     R7,R7,#+16
   \   00000016   0xEB17 0x6606      ADDS     R6,R7,R6, LSL #+24
   \   0000001A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001C   0x182F             ADDS     R7,R5,R0
   \   0000001E   0x78BF             LDRB     R7,[R7, #+2]
   \   00000020   0xEB16 0x2607      ADDS     R6,R6,R7, LSL #+8
   \   00000024   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000026   0x182F             ADDS     R7,R5,R0
   \   00000028   0x78FF             LDRB     R7,[R7, #+3]
   \   0000002A   0xFA56 0xF687      UXTAB    R6,R6,R7
   \   0000002E   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000030   0xFB96 0xF6F2      SDIV     R6,R6,R2
    307                  DATAOUT[3+j]=temp;
   \   00000034   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000036   0x186F             ADDS     R7,R5,R1
   \   00000038   0x70FE             STRB     R6,[R7, #+3]
    308                  DATAOUT[2+j]=temp>>8;
   \   0000003A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000003C   0x186F             ADDS     R7,R5,R1
   \   0000003E   0xEA5F 0x2C26      ASRS     R12,R6,#+8
   \   00000042   0xF887 0xC002      STRB     R12,[R7, #+2]
    309                  DATAOUT[1+j]=temp>>16;
   \   00000046   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000048   0x186F             ADDS     R7,R5,R1
   \   0000004A   0xEA5F 0x4C26      ASRS     R12,R6,#+16
   \   0000004E   0xF887 0xC001      STRB     R12,[R7, #+1]
    310                  DATAOUT[j]=temp>>24;
   \   00000052   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000054   0x1636             ASRS     R6,R6,#+24
   \   00000056   0x546E             STRB     R6,[R5, R1]
    311              }
   \   00000058   0x1C64             ADDS     R4,R4,#+1
   \                     ??Sig_Fiq_0:
   \   0000005A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000005C   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000005E   0x429C             CMP      R4,R3
   \   00000060   0xD3D1             BCC.N    ??Sig_Fiq_1
    312          }
   \   00000062   0xBCF0             POP      {R4-R7}
   \   00000064   0x4770             BX       LR               ;; return
    313          
    314          /*******************************************************************************
    315          ** Function Name	：num2string
    316          ** Input		： type =0 文件夹，=1 .CSV文件
    317          ** Return		：转好好的字符串指针
    318          ** Author		： wk
    319          ** Version	：
    320          ** Date		：
    321          ** Dessription	： 将 32 位整数转换成字符串
    322          ** Reverse	：
    323          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    324          char_ptr num2string(int_32 num,uchar len,uchar type) // wk --> len <= 13-4-1=8
    325          {
   \                     num2string:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB084             SUB      SP,SP,#+16
   \   00000006   0x4680             MOV      R8,R0
   \   00000008   0x000C             MOVS     R4,R1
   \   0000000A   0x0017             MOVS     R7,R2
    326            char_ptr name;
    327            name = _mem_alloc_zero( len+5 );
   \   0000000C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000E   0x1D60             ADDS     R0,R4,#+5
   \   00000010   0x.... 0x....      BL       _lwmem_alloc_zero
   \   00000014   0x0005             MOVS     R5,R0
    328            uchar sep_data[9];uint_32 temp;
    329            for(int i=0;i<len;i++)
   \   00000016   0x2600             MOVS     R6,#+0
   \   00000018   0xE014             B.N      ??num2string_0
    330            {
    331              temp=(uint_32)pow(10,i);
   \                     ??num2string_1:
   \   0000001A   0x0030             MOVS     R0,R6
   \   0000001C   0x.... 0x....      BL       __aeabi_i2d
   \   00000020   0x0002             MOVS     R2,R0
   \   00000022   0x000B             MOVS     R3,R1
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x....             LDR.N    R1,??DataTable4_4  ;; 0x40240000
   \   00000028   0x.... 0x....      BL       pow
   \   0000002C   0x.... 0x....      BL       __aeabi_d2uiz
    332              sep_data[i]=(num/temp)%10;
   \   00000030   0xFBB8 0xF0F0      UDIV     R0,R8,R0
   \   00000034   0x210A             MOVS     R1,#+10
   \   00000036   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   0000003A   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   0000003E   0xA900             ADD      R1,SP,#+0
   \   00000040   0x5470             STRB     R0,[R6, R1]
    333            }
   \   00000042   0x1C76             ADDS     R6,R6,#+1
   \                     ??num2string_0:
   \   00000044   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000046   0x42A6             CMP      R6,R4
   \   00000048   0xDBE7             BLT.N    ??num2string_1
    334            
    335            for(int i=0;i<len;i++)
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0xE007             B.N      ??num2string_2
    336            {
    337              *(name+i)=(uchar)(0x30+sep_data[len-1-i]);
   \                     ??num2string_3:
   \   0000004E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000050   0x1E61             SUBS     R1,R4,#+1
   \   00000052   0x1A09             SUBS     R1,R1,R0
   \   00000054   0xAA00             ADD      R2,SP,#+0
   \   00000056   0x5C89             LDRB     R1,[R1, R2]
   \   00000058   0x3130             ADDS     R1,R1,#+48
   \   0000005A   0x5541             STRB     R1,[R0, R5]
    338            }
   \   0000005C   0x1C40             ADDS     R0,R0,#+1
   \                     ??num2string_2:
   \   0000005E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000060   0x42A0             CMP      R0,R4
   \   00000062   0xDBF4             BLT.N    ??num2string_3
    339            if(type==0)
   \   00000064   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000066   0x2F00             CMP      R7,#+0
   \   00000068   0xD103             BNE.N    ??num2string_4
    340            {
    341              *(name+len)='\0';
   \   0000006A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000006C   0x2000             MOVS     R0,#+0
   \   0000006E   0x5560             STRB     R0,[R4, R5]
   \   00000070   0xE012             B.N      ??num2string_5
    342            }
    343            else
    344            {
    345              *(name+len)=0x2e; // .
   \                     ??num2string_4:
   \   00000072   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000074   0x202E             MOVS     R0,#+46
   \   00000076   0x5560             STRB     R0,[R4, R5]
    346              *(name+len+1)=0x43; // C
   \   00000078   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000007A   0x1960             ADDS     R0,R4,R5
   \   0000007C   0x2143             MOVS     R1,#+67
   \   0000007E   0x7041             STRB     R1,[R0, #+1]
    347              *(name+len+2)=0x53; // S
   \   00000080   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000082   0x1960             ADDS     R0,R4,R5
   \   00000084   0x2153             MOVS     R1,#+83
   \   00000086   0x7081             STRB     R1,[R0, #+2]
    348              *(name+len+3)=0x56; // V
   \   00000088   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000008A   0x1960             ADDS     R0,R4,R5
   \   0000008C   0x2156             MOVS     R1,#+86
   \   0000008E   0x70C1             STRB     R1,[R0, #+3]
    349              *(name+len+4)='\0';
   \   00000090   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000092   0x1960             ADDS     R0,R4,R5
   \   00000094   0x2100             MOVS     R1,#+0
   \   00000096   0x7101             STRB     R1,[R0, #+4]
    350            }
    351            return name;
   \                     ??num2string_5:
   \   00000098   0x0028             MOVS     R0,R5
   \   0000009A   0xB004             ADD      SP,SP,#+16
   \   0000009C   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    352          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x47C35000         DC32     0x47c35000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x41200000         DC32     0x41200000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x43B40000         DC32     0x43b40000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x42C80000         DC32     0x42c80000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x40240000         DC32     0x40240000

   \                                 In section .rodata, align 4
   \   00000000   0x00000000         DC32 0
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       40  AtoFA
             40 -> __aeabi_d2f
             40 -> atof
        8  BCD2Decimal
       32  CharToInt
             32 -> abs
       28  ChartoFloat
             28 -> __aeabi_fdiv
             28 -> __aeabi_i2f
             28 -> __aeabi_ui2f
       16  EVEUISHIFT
             16 -> __aeabi_fdiv
             16 -> __aeabi_ui2f
       24  FLTOINT_UI
             24 -> __aeabi_f2iz
             24 -> __aeabi_fdiv
       48  PhaseShift
             48 -> __aeabi_cfcmple
             48 -> __aeabi_f2iz
             48 -> __aeabi_f2uiz
             48 -> __aeabi_fadd
             48 -> __aeabi_fmul
             48 -> __aeabi_fsub
             48 -> __aeabi_memclr4
       16  Sig_Fiq
       24  U16TOFL_UI
             24 -> __aeabi_fadd
             24 -> __aeabi_fdiv
             24 -> __aeabi_i2f
             24 -> __aeabi_ui2f
       20  UIValues2HR
             20 -> __aeabi_f2uiz
             20 -> __aeabi_fdiv
             20 -> __aeabi_fmul
       16  WR_WAVE_UI
             16 -> YADA_C0
       40  num2string
             40 -> __aeabi_d2uiz
             40 -> __aeabi_i2d
             40 -> _lwmem_alloc_zero
             40 -> pow


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      24  ?<Constant {0L}>
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
     120  AtoFA
      48  BCD2Decimal
     206  CharToInt
     118  ChartoFloat
      60  EVEUISHIFT
     140  FLTOINT_UI
     364  PhaseShift
     102  Sig_Fiq
      72  U16TOFL_UI
      64  UIValues2HR
     302  WR_WAVE_UI
     160  num2string

 
    24 bytes in section .rodata
 1 776 bytes in section .text
 
 1 776 bytes of CODE  memory
    24 bytes of CONST memory

Errors: none
Warnings: none
