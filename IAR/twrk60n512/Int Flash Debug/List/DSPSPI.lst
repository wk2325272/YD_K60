###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     30/Mar/2013  18:18:49 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  L:\git_workspace\YD_PRJ_NEW_20130323_git_\Source\DSPSPI. #
#                    c                                                        #
#    Command line =  L:\git_workspace\YD_PRJ_NEW_20130323_git_\Source\DSPSPI. #
#                    c -D _DEBUG=1 -lC "L:\git_workspace\YD_PRJ_NEW_20130323_ #
#                    git_\IAR\twrk60n512\Int Flash Debug\List\" -lA           #
#                    "L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\twrk60n51 #
#                    2\Int Flash Debug\List\" --diag_suppress                 #
#                    Pa039,Pa082,Pe186 -o "L:\git_workspace\YD_PRJ_NEW_201303 #
#                    23_git_\IAR\twrk60n512\Int Flash Debug\Obj\" --no_cse    #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\..\lib\twr #
#                    k60n512.iar\ -I L:\git_workspace\YD_PRJ_NEW_20130323_git #
#                    _\IAR\..\lib\twrk60n512.iar\bsp\ -I                      #
#                    L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\..\lib\twr #
#                    k60n512.iar\psp\ -I L:\git_workspace\YD_PRJ_NEW_20130323 #
#                    _git_\IAR\..\lib\twrk60n512.iar\bsp\Generated_Code\ -I   #
#                    L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\..\lib\twr #
#                    k60n512.iar\rtcs\ -I L:\git_workspace\YD_PRJ_NEW_2013032 #
#                    3_git_\IAR\..\lib\twrk60n512.iar\mfs\ -I                 #
#                    L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\..\lib\twr #
#                    k60n512.iar\usb\host\ -I L:\git_workspace\YD_PRJ_NEW_201 #
#                    30323_git_\IAR\..\lib\twrk60n512.iar\shell\ -I           #
#                    L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\..\lib\twr #
#                    k60n512.iar\usb\ -I L:\git_workspace\YD_PRJ_NEW_20130323 #
#                    _git_\IAR\..\ -I L:\git_workspace\YD_PRJ_NEW_20130323_gi #
#                    t_\IAR\..\Source\Source_MQX\ -I "E:\Freescale\Freescale  #
#                    MQX 3.8\shell\source\include\" -Ol --use_c++_inline      #
#    List file    =  L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\twrk60n512 #
#                    \Int Flash Debug\List\DSPSPI.lst                         #
#    Object file  =  L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\twrk60n512 #
#                    \Int Flash Debug\Obj\DSPSPI.o                            #
#                                                                             #
#                                                                             #
###############################################################################

L:\git_workspace\YD_PRJ_NEW_20130323_git_\Source\DSPSPI.c
      1          /*******************************************************************************
      2          * File Name        : DSPSPI.c
      3          * Author             : LB&TX
      4          * Version            : V1.0.0
      5          * Date                :
      6          * Description        :SPI使用的是430的UartB1口。
      7                                 SPI时钟由主机控制，
      8                                 
      9          *******************************************************************************/
     10          #define DSPSPI_GLOBALS
     11          //#include "includes.h"
     12          #include <mqx.h>
     13          #include <bsp.h>
     14          
     15          #include "DSPSPI.h"

   \                                 In section .bss, align 1
   \   __absolute unsigned char volatile SPIPowerFlg
   \                     SPIPowerFlg:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \   __absolute unsigned char volatile SPIEventFlg
   \                     SPIEventFlg:
   \   00000000                      DS8 1
     16          #include <string.h>
     17          #include <spi.h>
     18          #include "event.h"
     19          
     20          #define _SPIDMADATA_DBUG_  // 是否有 DBUG 输出信息
     21          
     22          //U8 BufRxchar[ARRAY_SIZE]= {0};//转存数组，仅在此C文件中使用

   \                                 In section .bss, align 4
     23          U8 BufRxchar[3000]= {0};// wk -->转存数组，仅在此C文件中使用
   \                     BufRxchar:
   \   00000000                      DS8 3000

   \                                 In section .bss, align 4
     24          U8 PowRxchar[Pow_SIZE]= {0}; //去除起始符结束符的有效数据，通信协议中的数据长度减去结束符
   \                     PowRxchar:
   \   00000000                      DS8 2664

   \                                 In section .bss, align 4
     25          U8 EvntRxchar[Evnt_SIZE]= {0};
   \                     EvntRxchar:
   \   00000000                      DS8 2008

   \                                 In section .bss, align 1
     26          U8 SPIRxCnt=0;   //SPI接收标志，作用域在此文件
   \                     SPIRxCnt:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
     27          U16 TotalNum=0;//需接收数据的长度，作用域在此文件
   \                     TotalNum:
   \   00000000                      DS8 2
     28          //U8 DataType=0;//作用域在此文件

   \                                 In section .bss, align 4
     29          U8 HeadFlg[4]={0}; // wk @20130325 -->
   \                     HeadFlg:
   \   00000000                      DS8 4
     30          

   \                                 In section .data, align 2
     31          U16 DataSize = ARRAY_SIZE ;  //wk -->传给 DMA 寄存器的一次服务数据长度
   \                     DataSize:
   \   00000000   0x0001             DC16 1

   \                                 In section .bss, align 1
     32          static uchar count=0; // 用于数据头检测
   \                     count:
   \   00000000                      DS8 1
     33          

   \                                 In section .bss, align 2
     34          volatile U16 Time_save=0;  //备份事件参数
   \                     Time_save:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
     35          volatile U8 testflgg=0;   //MCU发送数据个数
   \                     testflgg:
   \   00000000                      DS8 1
     36           

   \                                 In section .bss, align 4
     37          MQX_FILE_PTR spifd_2,ptbfd_10; // spifd_2 --> spi2设备的句柄  ptbfd_10 --> PTB10 设备的句柄
   \                     spifd_2:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ptbfd_10:
   \   00000000                      DS8 4
     38          // @20130312 --> wk
     39          //SPI_READ_WRITE_STRUCT  spi_rw;  // --> IOCTL 操作 SPI 时使用的结构体
     40          //SPI_READ_WRITE_STRUCT *spi_rw_ptr = &spi_rw; 
     41          //U8 *BufRxchar_ptr = BufRxchar;
     42          //U8 *PowRxchar_ptr = PowRxchar;
     43          

   \                                 In section .data, align 4
     44          GPIO_PIN_STRUCT pins_int[] = {    /* PTB10 定义结构体 */  // 定义 PTB10 上升沿中断
   \                     pins_int:
   \   00000000   0x8100002A         DC32 2164260906, 0
   \              0x00000000   
     45                      BSP_PTB10 | GPIO_PIN_IRQ_FALLING,
     46                      GPIO_LIST_END
     47                      };
     48          
     49          /* wk --> 初始化与 DSP 通信使用的 SPI2 */

   \                                 In section .text, align 2, keep-with-next
     50          void spi2_dma_int(void)
     51          {
   \                     spi2_dma_int:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
     52            uint_32                param;
     53          // @20130312 --> wk
     54          //  spi_rw.BUFFER_LENGTH = 1; //初始化 spi_rw结构体数据长度
     55            /**************************** spi2 configure *************************/
     56          #ifdef _SPIDBG_ 
     57              printf("\n-------------- Int SPI2 configure --------------\n\n");
     58          #endif
     59          //     /* Open the SPI driver */
     60             spifd_2 = fopen(TEST_CHANNEL_INT2,NULL);
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x....             LDR.N    R0,??DataTable2_1
   \   00000008   0x.... 0x....      BL       _io_fopen
   \   0000000C   0x....             LDR.N    R1,??DataTable2_2
   \   0000000E   0x6008             STR      R0,[R1, #+0]
     61               
     62             if (NULL == spifd_2)
   \   00000010   0x....             LDR.N    R0,??DataTable2_2
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD107             BNE.N    ??spi2_dma_int_0
     63             {
     64                printf ("Error opening SPI driver!\n");
   \   00000018   0x....             LDR.N    R0,??DataTable2_3
   \   0000001A   0x.... 0x....      BL       _io_printf
     65                _time_delay (200L);
   \   0000001E   0x20C8             MOVS     R0,#+200
   \   00000020   0x.... 0x....      BL       _time_delay
     66                _task_block ();
   \   00000024   0x.... 0x....      BL       _task_block
     67             }
     68          
     69             /* Set clock mode */
     70                param = SPI_CLK_POL_PHA_MODE1;
   \                     ??spi2_dma_int_0:
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0x9000             STR      R0,[SP, #+0]
     71             if (SPI_OK == ioctl (spifd_2, IO_IOCTL_SPI_SET_MODE, &param))
   \   0000002C   0xAA00             ADD      R2,SP,#+0
   \   0000002E   0xF640 0x6104      MOVW     R1,#+3588
   \   00000032   0x....             LDR.N    R0,??DataTable2_2
   \   00000034   0x6800             LDR      R0,[R0, #+0]
   \   00000036   0x.... 0x....      BL       _io_ioctl
   \   0000003A   0x0004             MOVS     R4,R0
     72             {
     73          #ifdef _SPIDBG_
     74                printf ("SPI2 is OK!\n");
     75          #endif
     76             } else {
     77          #ifdef _SPIDBG_
     78                printf ("ERROR\n");
     79          #endif
     80             }
     81          
     82             /* Set big endian */
     83             param = SPI_DEVICE_BIG_ENDIAN;    // wk -->这个设置是针对主机来说的，对于从机时设置都会出错
   \   0000003C   0x2001             MOVS     R0,#+1
   \   0000003E   0x9000             STR      R0,[SP, #+0]
     84          //   printf ("Setting endian to %s ... ", param == SPI_DEVICE_BIG_ENDIAN ? "SPI_DEVICE_BIG_ENDIAN" : "SPI_DEVICE_LITTLE_ENDIAN");
     85             if (SPI_OK == ioctl (spifd_2, IO_IOCTL_SPI_SET_ENDIAN, &param))
   \   00000040   0xAA00             ADD      R2,SP,#+0
   \   00000042   0xF640 0x610A      MOVW     R1,#+3594
   \   00000046   0x....             LDR.N    R0,??DataTable2_2
   \   00000048   0x6800             LDR      R0,[R0, #+0]
   \   0000004A   0x.... 0x....      BL       _io_ioctl
   \   0000004E   0x0005             MOVS     R5,R0
     86             {
     87          #ifdef _SPIDBG_
     88                printf ("OK\n");
     89          #endif   
     90             } else {
     91          #ifdef _SPIDBG_     
     92                printf ("ERROR\n");
     93          #endif      
     94             }
     95                /* Set transfer mode */
     96             param = SPI_DEVICE_SLAVE_MODE;
   \   00000050   0x2001             MOVS     R0,#+1
   \   00000052   0x9000             STR      R0,[SP, #+0]
     97          //   printf ("Setting SPI2 transfer mode to %s ... ", device_mode[param]);
     98             if (SPI_OK == ioctl (spifd_2, IO_IOCTL_SPI_SET_TRANSFER_MODE, &param))
   \   00000054   0xAA00             ADD      R2,SP,#+0
   \   00000056   0xF640 0x6108      MOVW     R1,#+3592
   \   0000005A   0x....             LDR.N    R0,??DataTable2_2
   \   0000005C   0x6800             LDR      R0,[R0, #+0]
   \   0000005E   0x.... 0x....      BL       _io_ioctl
   \   00000062   0x0006             MOVS     R6,R0
     99             {
    100          #ifdef _SPIDBG_      
    101                printf ("OK\n");
    102          #endif     
    103             } else {
    104          #ifdef _SPIDBG_
    105                printf ("ERROR\n");
    106          #endif      
    107             }
    108             /* Clear statistics */
    109          //   printf ("Clearing statistics ... ");
    110             if (SPI_OK == ioctl (spifd_2, IO_IOCTL_SPI_CLEAR_STATS, NULL))
   \   00000064   0x2200             MOVS     R2,#+0
   \   00000066   0xF44F 0x6161      MOV      R1,#+3600
   \   0000006A   0x....             LDR.N    R0,??DataTable2_2
   \   0000006C   0x6800             LDR      R0,[R0, #+0]
   \   0000006E   0x.... 0x....      BL       _io_ioctl
    111             {
    112           #ifdef _SPIDBG_    
    113                printf ("OK\n");
    114           #endif 
    115             } else {
    116           #ifdef _SPIDBG_     
    117                printf ("ERROR\n");
    118            #endif     
    119             }
    120           #ifdef _SPIDBG_  
    121             printf("\n--------------       End       --------------\n\n");
    122           #endif  
    123             /******************************* spi2 conf end ****************************/
    124          }
   \   00000072   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
    125          
    126          /* wk --> 初始化 PTB10 用于数据中断接收 */
    127          inline void ptb_10_int(void)
    128          {
    129           /* wk --> set gpio of ptb10 in int mode for spi data read */
    130              ptbfd_10 = fopen("gpio:read", (char_ptr) &pins_int );
    131              ioctl(ptbfd_10,GPIO_IOCTL_SET_IRQ_FUNCTION, (pointer)int_callback);
    132          /* end */
    133          }
    134          
    135          /*
    136          ** 函数名：
    137          ** 作者：
    138          ** 说明：在没有使用事件时 SPI 接收数据的外部函数
    139          */

   \                                 In section .text, align 4, keep-with-next
    140          void DMA_RecData_OK  
    141          (
    142            void
    143          )
    144          {
   \                     DMA_RecData_OK:
   \   00000000   0xB580             PUSH     {R7,LR}
    145              if(count<4)
   \   00000002   0x....             LDR.N    R0,??DataTable2_4
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x2804             CMP      R0,#+4
   \   00000008   0xD243             BCS.N    ??DMA_RecData_OK_0
    146              {
    147                HeadFlg[count]=BufRxchar[0];
   \   0000000A   0x....             LDR.N    R0,??DataTable2_4
   \   0000000C   0x7800             LDRB     R0,[R0, #+0]
   \   0000000E   0x....             LDR.N    R1,??DataTable2_5
   \   00000010   0x....             LDR.N    R2,??DataTable2_6
   \   00000012   0x7812             LDRB     R2,[R2, #+0]
   \   00000014   0x5442             STRB     R2,[R0, R1]
    148                count++;
   \   00000016   0x....             LDR.N    R0,??DataTable2_4
   \   00000018   0x7800             LDRB     R0,[R0, #+0]
   \   0000001A   0x1C40             ADDS     R0,R0,#+1
   \   0000001C   0x....             LDR.N    R1,??DataTable2_4
   \   0000001E   0x7008             STRB     R0,[R1, #+0]
    149                if(count==4)
   \   00000020   0x....             LDR.N    R0,??DataTable2_4
   \   00000022   0x7800             LDRB     R0,[R0, #+0]
   \   00000024   0x2804             CMP      R0,#+4
   \   00000026   0xD168             BNE.N    ??DMA_RecData_OK_1
    150                  if(HeadFlg[0]==0x33 && HeadFlg[1]==0x33 && HeadFlg[2]==0x33 && (HeadFlg[3]== 0x44 ||HeadFlg[3]== 0x55))
   \   00000028   0x....             LDR.N    R0,??DataTable2_5
   \   0000002A   0x7800             LDRB     R0,[R0, #+0]
   \   0000002C   0x2833             CMP      R0,#+51
   \   0000002E   0xD120             BNE.N    ??DMA_RecData_OK_2
   \   00000030   0x....             LDR.N    R0,??DataTable2_5
   \   00000032   0x7840             LDRB     R0,[R0, #+1]
   \   00000034   0x2833             CMP      R0,#+51
   \   00000036   0xD11C             BNE.N    ??DMA_RecData_OK_2
   \   00000038   0x....             LDR.N    R0,??DataTable2_5
   \   0000003A   0x7880             LDRB     R0,[R0, #+2]
   \   0000003C   0x2833             CMP      R0,#+51
   \   0000003E   0xD118             BNE.N    ??DMA_RecData_OK_2
   \   00000040   0x....             LDR.N    R0,??DataTable2_5
   \   00000042   0x78C0             LDRB     R0,[R0, #+3]
   \   00000044   0x2844             CMP      R0,#+68
   \   00000046   0xD003             BEQ.N    ??DMA_RecData_OK_3
   \   00000048   0x....             LDR.N    R0,??DataTable2_5
   \   0000004A   0x78C0             LDRB     R0,[R0, #+3]
   \   0000004C   0x2855             CMP      R0,#+85
   \   0000004E   0xD110             BNE.N    ??DMA_RecData_OK_2
    151                  {
    152                    if(HeadFlg[3]==0x44)
   \                     ??DMA_RecData_OK_3:
   \   00000050   0x....             LDR.N    R0,??DataTable2_5
   \   00000052   0x78C0             LDRB     R0,[R0, #+3]
   \   00000054   0x2844             CMP      R0,#+68
   \   00000056   0xD104             BNE.N    ??DMA_RecData_OK_4
    153                      DataSize= Pow_SIZE+OffSET-2;  // wk @20130325 -->总的数据量=OffSET+Pow_SIZE，其中OffSET是电能质量数据前的一些标志或是预留
   \   00000058   0x....             LDR.N    R0,??DataTable2_7
   \   0000005A   0xF640 0x21D5      MOVW     R1,#+2773
   \   0000005E   0x8001             STRH     R1,[R0, #+0]
   \   00000060   0xE003             B.N      ??DMA_RecData_OK_5
    154                    else
    155                      DataSize= Evnt_SIZE + 4; // wk @20130325 -->
   \                     ??DMA_RecData_OK_4:
   \   00000062   0x....             LDR.N    R0,??DataTable2_7
   \   00000064   0xF240 0x71DA      MOVW     R1,#+2010
   \   00000068   0x8001             STRH     R1,[R0, #+0]
    156                    
    157                    count=5; //  wk --> 数据头已经找到 
   \                     ??DMA_RecData_OK_5:
   \   0000006A   0x....             LDR.N    R0,??DataTable2_4
   \   0000006C   0x2105             MOVS     R1,#+5
   \   0000006E   0x7001             STRB     R1,[R0, #+0]
   \   00000070   0xE043             B.N      ??DMA_RecData_OK_1
    158          //          printf("\n1");
    159                  }
    160                  else
    161                  {
    162                    HeadFlg[0]=HeadFlg[1];
   \                     ??DMA_RecData_OK_2:
   \   00000072   0x....             LDR.N    R0,??DataTable2_5
   \   00000074   0x7840             LDRB     R0,[R0, #+1]
   \   00000076   0x....             LDR.N    R1,??DataTable2_5
   \   00000078   0x7008             STRB     R0,[R1, #+0]
    163                    HeadFlg[1]=HeadFlg[2];
   \   0000007A   0x....             LDR.N    R0,??DataTable2_5
   \   0000007C   0x....             LDR.N    R1,??DataTable2_5
   \   0000007E   0x7889             LDRB     R1,[R1, #+2]
   \   00000080   0x7041             STRB     R1,[R0, #+1]
    164                    HeadFlg[2]=HeadFlg[3];
   \   00000082   0x....             LDR.N    R0,??DataTable2_5
   \   00000084   0x....             LDR.N    R1,??DataTable2_5
   \   00000086   0x78C9             LDRB     R1,[R1, #+3]
   \   00000088   0x7081             STRB     R1,[R0, #+2]
    165                    count=3;
   \   0000008A   0x....             LDR.N    R0,??DataTable2_4
   \   0000008C   0x2103             MOVS     R1,#+3
   \   0000008E   0x7001             STRB     R1,[R0, #+0]
   \   00000090   0xE033             B.N      ??DMA_RecData_OK_1
    166                  }
    167               
    168              }
    169              else if(count==5)
   \                     ??DMA_RecData_OK_0:
   \   00000092   0x....             LDR.N    R0,??DataTable2_4
   \   00000094   0x7800             LDRB     R0,[R0, #+0]
   \   00000096   0x2805             CMP      R0,#+5
   \   00000098   0xD103             BNE.N    ??DMA_RecData_OK_6
    170              {
    171                   count=6; // 用一个数据改变 DMA 接收数据的长度，此数据将会被舍弃
   \   0000009A   0x....             LDR.N    R0,??DataTable2_4
   \   0000009C   0x2106             MOVS     R1,#+6
   \   0000009E   0x7001             STRB     R1,[R0, #+0]
   \   000000A0   0xE02B             B.N      ??DMA_RecData_OK_1
    172              }
    173              else
    174              {
    175                
    176                 if(HeadFlg[3]==0x44) // wk @20130325 -->
   \                     ??DMA_RecData_OK_6:
   \   000000A2   0x....             LDR.N    R0,??DataTable2_5
   \   000000A4   0x78C0             LDRB     R0,[R0, #+3]
   \   000000A6   0x2844             CMP      R0,#+68
   \   000000A8   0xD10F             BNE.N    ??DMA_RecData_OK_7
    177                   for(int i=0;i<Pow_SIZE;i++)
   \   000000AA   0x2000             MOVS     R0,#+0
   \                     ??DMA_RecData_OK_8:
   \   000000AC   0xF640 0x2168      MOVW     R1,#+2664
   \   000000B0   0x4288             CMP      R0,R1
   \   000000B2   0xDA0D             BGE.N    ??DMA_RecData_OK_9
    178                   {
    179                     PowRxchar[i] = BufRxchar[i+OffSET];
   \   000000B4   0x....             LDR.N    R1,??DataTable2_6
   \   000000B6   0x1841             ADDS     R1,R0,R1
   \   000000B8   0xF891 0x106F      LDRB     R1,[R1, #+111]
   \   000000BC   0x....             LDR.N    R2,??DataTable2_8
   \   000000BE   0x5481             STRB     R1,[R0, R2]
    180                     SPIPowerFlg=1;
   \   000000C0   0x....             LDR.N    R1,??DataTable2_9
   \   000000C2   0x2201             MOVS     R2,#+1
   \   000000C4   0x700A             STRB     R2,[R1, #+0]
    181                   }
   \   000000C6   0x1C40             ADDS     R0,R0,#+1
   \   000000C8   0xE7F0             B.N      ??DMA_RecData_OK_8
    182                 else
    183                     printf("event\n");  // 事件数据还没有处理
   \                     ??DMA_RecData_OK_7:
   \   000000CA   0x....             LDR.N    R0,??DataTable2_10
   \   000000CC   0x.... 0x....      BL       _io_printf
    184                 
    185                  printf("%x\t%x\n",BufRxchar[0],BufRxchar[1]); // test 
   \                     ??DMA_RecData_OK_9:
   \   000000D0   0x....             LDR.N    R0,??DataTable2_6
   \   000000D2   0x7842             LDRB     R2,[R0, #+1]
   \   000000D4   0x....             LDR.N    R0,??DataTable2_6
   \   000000D6   0x7801             LDRB     R1,[R0, #+0]
   \   000000D8   0x....             LDR.N    R0,??DataTable2_11
   \   000000DA   0x.... 0x....      BL       _io_printf
    186          //        printf("\n2");
    187                  count=0; 
   \   000000DE   0x....             LDR.N    R0,??DataTable2_4
   \   000000E0   0x2100             MOVS     R1,#+0
   \   000000E2   0x7001             STRB     R1,[R0, #+0]
    188                  DataSize=1;
   \   000000E4   0x....             LDR.N    R0,??DataTable2_7
   \   000000E6   0x2101             MOVS     R1,#+1
   \   000000E8   0x8001             STRH     R1,[R0, #+0]
    189                  fclose(spifd_2);
   \   000000EA   0x....             LDR.N    R0,??DataTable2_2
   \   000000EC   0x6800             LDR      R0,[R0, #+0]
   \   000000EE   0x.... 0x....      BL       _io_fclose
    190                  asm("NOP");  
   \   000000F2   0xBF00             NOP              
    191                  spi2_dma_int(); // 刷新 DMA 寄存器
   \   000000F4   0x.... 0x....      BL       spi2_dma_int
    192                  asm("NOP");   
   \   000000F8   0xBF00             NOP              
    193              }
    194            
    195          //  if(BufRxchar[0]==0x66 && BufRxchar[1]==0x33 && BufRxchar[2]==0x33 && 
    196          //     BufRxchar[3]==0x33 && BufRxchar[4]==0x44 && BufRxchar[5]==0x0a&& 
    197          //     BufRxchar[6]==0x4c)   
    198          //  { 
    199          //    for(int i=0 ;i<2635 ;i++)
    200          //      PowRxchar[i] = BufRxchar[i+7];
    201          //    SPIPowerFlg=1;
    202          //    printf("1\n");   // @20130312 --> wk: Test the data is OK ?
    203          //  }
    204          //  printf("2\n");  // @20130312 --> wk: Test if enter the func ?
    205          }
   \                     ??DMA_RecData_OK_1:
   \   000000FA   0xBD01             POP      {R0,PC}          ;; return
    206          
    207          /*
    208          ** 函数名：
    209          ** 作者：
    210          ** 说明：在使用事件时 SPI 接收数据的外部任务函数
    211          */

   \                                 In section .text, align 2, keep-with-next
    212          void SPIDMA_Task( uint_32 param)
    213          {
   \                     SPIDMA_Task:
   \   00000000   0xB580             PUSH     {R7,LR}
    214            pointer  pspidma_event;
    215          #ifdef _SPIDMADATA_DBUG_
    216             printf("\n----------SPIDMA_Task----------\n");
   \   00000002   0x....             LDR.N    R0,??DataTable2_12
   \   00000004   0x.... 0x....      BL       _io_printf
    217             printf("\n----------             ----------\n");
   \   00000008   0x....             LDR.N    R0,??DataTable2_13
   \   0000000A   0x.... 0x....      BL       _io_printf
    218             printf("\n----------             ----------\n");
   \   0000000E   0x....             LDR.N    R0,??DataTable2_13
   \   00000010   0x.... 0x....      BL       _io_printf
    219             printf("\n----------     END     ----------\n");
   \   00000014   0x....             LDR.N    R0,??DataTable2_14
   \   00000016   0x.... 0x....      BL       _io_printf
    220          #endif 
    221            
    222          #ifdef _SPIDMADATA_DBUG_
    223              if(_event_create("spidma_event") != MQX_OK){  // 创建事件
   \   0000001A   0x....             LDR.N    R0,??DataTable2_15
   \   0000001C   0x.... 0x....      BL       _event_create
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD005             BEQ.N    ??SPIDMA_Task_0
    224                printf("\n Make spidma event failed");
   \   00000024   0x....             LDR.N    R0,??DataTable2_16
   \   00000026   0x.... 0x....      BL       _io_printf
    225                _task_block();
   \   0000002A   0x.... 0x....      BL       _task_block
   \   0000002E   0xE002             B.N      ??SPIDMA_Task_1
    226              }
    227              else
    228                printf("\n Make spidma event OK");
   \                     ??SPIDMA_Task_0:
   \   00000030   0x....             LDR.N    R0,??DataTable2_17
   \   00000032   0x.... 0x....      BL       _io_printf
    229            
    230            if(_event_open("spidma_event", &pspidma_event) != MQX_OK){
   \                     ??SPIDMA_Task_1:
   \   00000036   0xA900             ADD      R1,SP,#+0
   \   00000038   0x....             LDR.N    R0,??DataTable2_15
   \   0000003A   0x.... 0x....      BL       _event_open
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD005             BEQ.N    ??SPIDMA_Task_2
    231              printf("\nOpen spidma event failed ");
   \   00000042   0x....             LDR.N    R0,??DataTable2_18
   \   00000044   0x.... 0x....      BL       _io_printf
    232              _task_block();
   \   00000048   0x.... 0x....      BL       _task_block
   \   0000004C   0xE013             B.N      ??SPIDMA_Task_3
    233            }  
    234            else
    235              printf("\n Open spidma event OK");
   \                     ??SPIDMA_Task_2:
   \   0000004E   0x....             LDR.N    R0,??DataTable2_19
   \   00000050   0x.... 0x....      BL       _io_printf
   \   00000054   0xE00F             B.N      ??SPIDMA_Task_3
    236          #endif
    237            
    238          #ifndef _SPIDMADATA_DBUG_
    239            _event_create("spidma_event");
    240            _event_open("spidma_event", &pspidma_event);
    241          #endif
    242            
    243            while(TRUE)
    244            {
    245              _event_wait_all(pspidma_event,0x02,0); //等待事件发生
    246              _event_clear(pspidma_event,0x02);  // 清除事件标志
    247            
    248              if(BufRxchar[0]==0x66 && BufRxchar[1]==0x33 && BufRxchar[2]==0x33 && 
    249                 BufRxchar[3]==0x33 && BufRxchar[4]==0x44 && BufRxchar[5]==0x0a&& 
    250                 BufRxchar[6]==0x4c)
    251             { 
    252                for(int i=0 ;i<2635 ;i++)
    253                  PowRxchar[i] = BufRxchar[i+7];
   \                     ??SPIDMA_Task_4:
   \   00000056   0x....             LDR.N    R1,??DataTable2_6
   \   00000058   0x1841             ADDS     R1,R0,R1
   \   0000005A   0x79C9             LDRB     R1,[R1, #+7]
   \   0000005C   0x....             LDR.N    R2,??DataTable2_8
   \   0000005E   0x5481             STRB     R1,[R0, R2]
   \   00000060   0x1C40             ADDS     R0,R0,#+1
   \                     ??SPIDMA_Task_5:
   \   00000062   0xF640 0x214B      MOVW     R1,#+2635
   \   00000066   0x4288             CMP      R0,R1
   \   00000068   0xDBF5             BLT.N    ??SPIDMA_Task_4
    254                SPIPowerFlg=1;
   \   0000006A   0x....             LDR.N    R0,??DataTable2_9
   \   0000006C   0x2101             MOVS     R1,#+1
   \   0000006E   0x7001             STRB     R1,[R0, #+0]
    255                printf("1\n");  // @20130312 --> wk: Test the data is OK ?
   \   00000070   0x....             ADR.N    R0,??DataTable2  ;; 0x31, 0x0A, 0x00, 0x00
   \   00000072   0x.... 0x....      BL       _io_printf
   \                     ??SPIDMA_Task_3:
   \   00000076   0x2200             MOVS     R2,#+0
   \   00000078   0x2102             MOVS     R1,#+2
   \   0000007A   0x9800             LDR      R0,[SP, #+0]
   \   0000007C   0x.... 0x....      BL       _event_wait_all
   \   00000080   0x2102             MOVS     R1,#+2
   \   00000082   0x9800             LDR      R0,[SP, #+0]
   \   00000084   0x.... 0x....      BL       _event_clear
   \   00000088   0x....             LDR.N    R0,??DataTable2_6
   \   0000008A   0x7800             LDRB     R0,[R0, #+0]
   \   0000008C   0x2866             CMP      R0,#+102
   \   0000008E   0xD1F2             BNE.N    ??SPIDMA_Task_3
   \   00000090   0x....             LDR.N    R0,??DataTable2_6
   \   00000092   0x7840             LDRB     R0,[R0, #+1]
   \   00000094   0x2833             CMP      R0,#+51
   \   00000096   0xD1EE             BNE.N    ??SPIDMA_Task_3
   \   00000098   0x....             LDR.N    R0,??DataTable2_6
   \   0000009A   0x7880             LDRB     R0,[R0, #+2]
   \   0000009C   0x2833             CMP      R0,#+51
   \   0000009E   0xD1EA             BNE.N    ??SPIDMA_Task_3
   \   000000A0   0x....             LDR.N    R0,??DataTable2_6
   \   000000A2   0x78C0             LDRB     R0,[R0, #+3]
   \   000000A4   0x2833             CMP      R0,#+51
   \   000000A6   0xD1E6             BNE.N    ??SPIDMA_Task_3
   \   000000A8   0x....             LDR.N    R0,??DataTable2_6
   \   000000AA   0x7900             LDRB     R0,[R0, #+4]
   \   000000AC   0x2844             CMP      R0,#+68
   \   000000AE   0xD1E2             BNE.N    ??SPIDMA_Task_3
   \   000000B0   0x....             LDR.N    R0,??DataTable2_6
   \   000000B2   0x7940             LDRB     R0,[R0, #+5]
   \   000000B4   0x280A             CMP      R0,#+10
   \   000000B6   0xD1DE             BNE.N    ??SPIDMA_Task_3
   \   000000B8   0x....             LDR.N    R0,??DataTable2_6
   \   000000BA   0x7980             LDRB     R0,[R0, #+6]
   \   000000BC   0x284C             CMP      R0,#+76
   \   000000BE   0xD1DA             BNE.N    ??SPIDMA_Task_3
   \   000000C0   0x2000             MOVS     R0,#+0
   \   000000C2   0xE7CE             B.N      ??SPIDMA_Task_5
    256            }
    257            
    258          //  printf("2\n");   // @20130312 --> wk: Test if enter the func ?
    259            }
    260              
    261          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x31 0x0A          DC8      0x31, 0x0A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     `?<Constant "ispi2:">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x........         DC32     spifd_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x........         DC32     `?<Constant "Error opening SPI dri...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x........         DC32     count

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x........         DC32     HeadFlg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0x........         DC32     BufRxchar

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   0x........         DC32     DataSize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   0x........         DC32     PowRxchar

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \   00000000   0x........         DC32     SPIPowerFlg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \   00000000   0x........         DC32     `?<Constant "event\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_11:
   \   00000000   0x........         DC32     `?<Constant "%x\\t%x\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_12:
   \   00000000   0x........         DC32     `?<Constant "\\n----------SPIDMA_Tas...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_13:
   \   00000000   0x........         DC32     `?<Constant "\\n----------          ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_14:
   \   00000000   0x........         DC32     `?<Constant "\\n----------     END  ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_15:
   \   00000000   0x........         DC32     `?<Constant "spidma_event">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_16:
   \   00000000   0x........         DC32     `?<Constant "\\n Make spidma event f...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_17:
   \   00000000   0x........         DC32     `?<Constant "\\n Make spidma event OK">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_18:
   \   00000000   0x........         DC32     `?<Constant "\\nOpen spidma event fa...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_19:
   \   00000000   0x........         DC32     `?<Constant "\\n Open spidma event OK">`

   \                                 In section .rodata, align 4
   \                     `?<Constant "ispi2:">`:
   \   00000000   0x69 0x73          DC8 "ispi2:"
   \              0x70 0x69    
   \              0x32 0x3A    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Error opening SPI dri...">`:
   \   00000000   0x45 0x72          DC8 "Error opening SPI driver!\012"
   \              0x72 0x6F    
   \              0x72 0x20    
   \              0x6F 0x70    
   \              0x65 0x6E    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x53 0x50    
   \              0x49 0x20    
   \              0x64 0x72    
   \              0x69 0x76    
   \              0x65 0x72    
   \              0x21 0x0A    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "event\\n">`:
   \   00000000   0x65 0x76          DC8 "event\012"
   \              0x65 0x6E    
   \              0x74 0x0A    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "%x\\t%x\\n">`:
   \   00000000   0x25 0x78          DC8 "%x\t%x\012"
   \              0x09 0x25    
   \              0x78 0x0A    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\n----------SPIDMA_Tas...">`:
   \   00000000   0x0A 0x2D          DC8 "\012----------SPIDMA_Task----------\012"
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x53    
   \              0x50 0x49    
   \              0x44 0x4D    
   \              0x41 0x5F    
   \              0x54 0x61    
   \              0x73 0x6B    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\n----------          ...">`:
   \   00000000   0x0A 0x2D          DC8 "\012----------             ----------\012"
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\n----------     END  ...">`:
   \   00000000   0x0A 0x2D          DC8 "\012----------     END     ----------\012"
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x45 0x4E    
   \              0x44 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "spidma_event">`:
   \   00000000   0x73 0x70          DC8 "spidma_event"
   \              0x69 0x64    
   \              0x6D 0x61    
   \              0x5F 0x65    
   \              0x76 0x65    
   \              0x6E 0x74    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\n Make spidma event f...">`:
   \   00000000   0x0A 0x20          DC8 "\012 Make spidma event failed"
   \              0x4D 0x61    
   \              0x6B 0x65    
   \              0x20 0x73    
   \              0x70 0x69    
   \              0x64 0x6D    
   \              0x61 0x20    
   \              0x65 0x76    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x66 0x61    
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\n Make spidma event OK">`:
   \   00000000   0x0A 0x20          DC8 "\012 Make spidma event OK"
   \              0x4D 0x61    
   \              0x6B 0x65    
   \              0x20 0x73    
   \              0x70 0x69    
   \              0x64 0x6D    
   \              0x61 0x20    
   \              0x65 0x76    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x4F 0x4B    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nOpen spidma event fa...">`:
   \   00000000   0x0A 0x4F          DC8 "\012Open spidma event failed "
   \              0x70 0x65    
   \              0x6E 0x20    
   \              0x73 0x70    
   \              0x69 0x64    
   \              0x6D 0x61    
   \              0x20 0x65    
   \              0x76 0x65    
   \              0x6E 0x74    
   \              0x20 0x66    
   \              0x61 0x69    
   \              0x6C 0x65    
   \              0x64 0x20    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\n Open spidma event OK">`:
   \   00000000   0x0A 0x20          DC8 "\012 Open spidma event OK"
   \              0x4F 0x70    
   \              0x65 0x6E    
   \              0x20 0x73    
   \              0x70 0x69    
   \              0x64 0x6D    
   \              0x61 0x20    
   \              0x65 0x76    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x4F 0x4B    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \   00000000   0x31 0x0A          DC8 "1\012"
   \              0x00         
   \   00000003   0x00               DC8 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  DMA_RecData_OK
              8 -> _io_fclose
              8 -> _io_printf
              8 -> spi2_dma_int
        8  SPIDMA_Task
              8 -> _event_clear
              8 -> _event_create
              8 -> _event_open
              8 -> _event_wait_all
              8 -> _io_printf
              8 -> _task_block
       24  spi2_dma_int
             24 -> _io_fopen
             24 -> _io_ioctl
             24 -> _io_printf
             24 -> _task_block
             24 -> _time_delay


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant "%x\t%x\n">
       4  ?<Constant "1\n">
      28  ?<Constant "Error opening SPI dri...">
      24  ?<Constant "\n Make spidma event OK">
      28  ?<Constant "\n Make spidma event f...">
      24  ?<Constant "\n Open spidma event OK">
      36  ?<Constant "\n----------          ...">
      36  ?<Constant "\n----------     END  ...">
      36  ?<Constant "\n----------SPIDMA_Tas...">
      28  ?<Constant "\nOpen spidma event fa...">
       8  ?<Constant "event\n">
       8  ?<Constant "ispi2:">
      16  ?<Constant "spidma_event">
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_12
       4  ??DataTable2_13
       4  ??DataTable2_14
       4  ??DataTable2_15
       4  ??DataTable2_16
       4  ??DataTable2_17
       4  ??DataTable2_18
       4  ??DataTable2_19
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
    3000  BufRxchar
     252  DMA_RecData_OK
       2  DataSize
    2008  EvntRxchar
       4  HeadFlg
    2664  PowRxchar
     196  SPIDMA_Task
       1  SPIEventFlg
       1  SPIPowerFlg
       1  SPIRxCnt
       2  Time_save
       2  TotalNum
       1  count
       8  pins_int
       4  ptbfd_10
     116  spi2_dma_int
       4  spifd_2
       1  testflgg

 
 7 693 bytes in section .bss
    10 bytes in section .data
   284 bytes in section .rodata
   644 bytes in section .text
 
   644 bytes of CODE  memory
   284 bytes of CONST memory
 7 703 bytes of DATA  memory

Errors: none
Warnings: none
