###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     25/Mar/2013  21:40:30 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\Freescale\mqx_test\YD_PRJ_NEW_20130322_newgui_\Source #
#                    \DSPSPI.c                                                #
#    Command line =  E:\Freescale\mqx_test\YD_PRJ_NEW_20130322_newgui_\Source #
#                    \DSPSPI.c -D _DEBUG=1 -lC "E:\Freescale\mqx_test\YD_PRJ_ #
#                    NEW_20130322_newgui_\IAR\twrk60n512\Int Flash            #
#                    Debug\List\" -lA "E:\Freescale\mqx_test\YD_PRJ_NEW_20130 #
#                    322_newgui_\IAR\twrk60n512\Int Flash Debug\List\"        #
#                    --diag_suppress Pa039,Pa082,Pe186 -o                     #
#                    "E:\Freescale\mqx_test\YD_PRJ_NEW_20130322_newgui_\IAR\t #
#                    wrk60n512\Int Flash Debug\Obj\" --no_cse --no_unroll     #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "D:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I E:\Freescale\mqx_test\YD_PRJ_NEW_20130322_newg #
#                    ui_\IAR\..\lib\twrk60n512.iar\ -I                        #
#                    E:\Freescale\mqx_test\YD_PRJ_NEW_20130322_newgui_\IAR\.. #
#                    \lib\twrk60n512.iar\bsp\ -I                              #
#                    E:\Freescale\mqx_test\YD_PRJ_NEW_20130322_newgui_\IAR\.. #
#                    \lib\twrk60n512.iar\psp\ -I                              #
#                    E:\Freescale\mqx_test\YD_PRJ_NEW_20130322_newgui_\IAR\.. #
#                    \lib\twrk60n512.iar\bsp\Generated_Code\ -I               #
#                    E:\Freescale\mqx_test\YD_PRJ_NEW_20130322_newgui_\IAR\.. #
#                    \lib\twrk60n512.iar\rtcs\ -I                             #
#                    E:\Freescale\mqx_test\YD_PRJ_NEW_20130322_newgui_\IAR\.. #
#                    \lib\twrk60n512.iar\mfs\ -I                              #
#                    E:\Freescale\mqx_test\YD_PRJ_NEW_20130322_newgui_\IAR\.. #
#                    \lib\twrk60n512.iar\usb\host\ -I                         #
#                    E:\Freescale\mqx_test\YD_PRJ_NEW_20130322_newgui_\IAR\.. #
#                    \lib\twrk60n512.iar\shell\ -I                            #
#                    E:\Freescale\mqx_test\YD_PRJ_NEW_20130322_newgui_\IAR\.. #
#                    \lib\twrk60n512.iar\usb\ -I                              #
#                    E:\Freescale\mqx_test\YD_PRJ_NEW_20130322_newgui_\IAR\.. #
#                    \ -I E:\Freescale\mqx_test\YD_PRJ_NEW_20130322_newgui_\I #
#                    AR\..\Source\Source_MQX\ -I "E:\Freescale\Freescale MQX  #
#                    3.8\shell\source\include\" -Ol --use_c++_inline          #
#    List file    =  E:\Freescale\mqx_test\YD_PRJ_NEW_20130322_newgui_\IAR\tw #
#                    rk60n512\Int Flash Debug\List\DSPSPI.lst                 #
#    Object file  =  E:\Freescale\mqx_test\YD_PRJ_NEW_20130322_newgui_\IAR\tw #
#                    rk60n512\Int Flash Debug\Obj\DSPSPI.o                    #
#                                                                             #
#                                                                             #
###############################################################################

E:\Freescale\mqx_test\YD_PRJ_NEW_20130322_newgui_\Source\DSPSPI.c
      1          /*******************************************************************************
      2          * File Name        : DSPSPI.c
      3          * Author             : LB&TX
      4          * Version            : V1.0.0
      5          * Date                :
      6          * Description        :SPI使用的是430的UartB1口。
      7                                 SPI时钟由主机控制，
      8                                 
      9          *******************************************************************************/
     10          #define DSPSPI_GLOBALS
     11          //#include "includes.h"
     12          #include <mqx.h>
     13          #include <bsp.h>
     14          
     15          #include "DSPSPI.h"

   \                                 In section .bss, align 1
   \   __absolute unsigned char volatile SPIPowerFlg
   \                     SPIPowerFlg:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \   __absolute unsigned char volatile SPIEventFlg
   \                     SPIEventFlg:
   \   00000000                      DS8 1
     16          #include <string.h>
     17          #include <spi.h>
     18          #include "event.h"
     19          
     20          #define _SPIDMADATA_DBUG_  // 是否有 DBUG 输出信息
     21          
     22          //U8 BufRxchar[ARRAY_SIZE]= {0};//转存数组，仅在此C文件中使用

   \                                 In section .bss, align 4
     23          U8 BufRxchar[2700]= {0};// wk -->转存数组，仅在此C文件中使用
   \                     BufRxchar:
   \   00000000                      DS8 2700

   \                                 In section .bss, align 4
     24          U8 PowRxchar[Pow_SIZE]= {0}; //去除起始符结束符的有效数据，通信协议中的数据长度减去结束符
   \                     PowRxchar:
   \   00000000                      DS8 2672

   \                                 In section .bss, align 4
     25          U8 EvntRxchar[Evnt_SIZE]= {0};
   \                     EvntRxchar:
   \   00000000                      DS8 2008

   \                                 In section .bss, align 1
     26          U8 SPIRxCnt=0;   //SPI接收标志，作用域在此文件
   \                     SPIRxCnt:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
     27          U16 TotalNum=0;//需接收数据的长度，作用域在此文件
   \                     TotalNum:
   \   00000000                      DS8 2
     28          //U8 DataType=0;//作用域在此文件

   \                                 In section .bss, align 4
     29          U8 HeadFlg[4]={0}; // wk @20130325 -->
   \                     HeadFlg:
   \   00000000                      DS8 4
     30          

   \                                 In section .data, align 2
     31          U16 DataSize = ARRAY_SIZE ;  //wk -->传给 DMA 寄存器的一次服务数据长度
   \                     DataSize:
   \   00000000   0x0001             DC16 1

   \                                 In section .bss, align 1
     32          static uchar count=0; // 用于数据头检测
   \                     count:
   \   00000000                      DS8 1
     33          

   \                                 In section .bss, align 2
     34          volatile U16 Time_save=0;  //备份事件参数
   \                     Time_save:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
     35          volatile U8 testflgg=0;   //MCU发送数据个数
   \                     testflgg:
   \   00000000                      DS8 1
     36           

   \                                 In section .bss, align 4
     37          MQX_FILE_PTR spifd_2,ptbfd_10; // spifd_2 --> spi2设备的句柄  ptbfd_10 --> PTB10 设备的句柄
   \                     spifd_2:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ptbfd_10:
   \   00000000                      DS8 4
     38          // @20130312 --> wk
     39          //SPI_READ_WRITE_STRUCT  spi_rw;  // --> IOCTL 操作 SPI 时使用的结构体
     40          //SPI_READ_WRITE_STRUCT *spi_rw_ptr = &spi_rw; 
     41          //U8 *BufRxchar_ptr = BufRxchar;
     42          //U8 *PowRxchar_ptr = PowRxchar;
     43          

   \                                 In section .data, align 4
     44          GPIO_PIN_STRUCT pins_int[] = {    /* PTB10 定义结构体 */  // 定义 PTB10 上升沿中断
   \                     pins_int:
   \   00000000   0x8100002A         DC32 2164260906, 0
   \              0x00000000   
     45                      BSP_PTB10 | GPIO_PIN_IRQ_FALLING,
     46                      GPIO_LIST_END
     47                      };
     48          
     49          /* wk --> 初始化与 DSP 通信使用的 SPI2 */

   \                                 In section .text, align 2, keep-with-next
     50          void spi2_dma_int(void)
     51          {
   \                     spi2_dma_int:
   \   00000000   0xB580             PUSH     {R7,LR}
     52            uint_32                param;
     53          // @20130312 --> wk
     54          //  spi_rw.BUFFER_LENGTH = 1; //初始化 spi_rw结构体数据长度
     55            /**************************** spi2 configure *************************/
     56            
     57              printf("\n-------------- Int SPI2 configure --------------\n\n");
   \   00000002   0x....             LDR.N    R0,??DataTable2_3
   \   00000004   0x.... 0x....      BL       _io_printf
     58          //     /* Open the SPI driver */
     59             spifd_2 = fopen(TEST_CHANNEL_INT2,NULL);
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x....             LDR.N    R0,??DataTable2_4
   \   0000000C   0x.... 0x....      BL       _io_fopen
   \   00000010   0x....             LDR.N    R1,??DataTable2_5
   \   00000012   0x6008             STR      R0,[R1, #+0]
     60               
     61             if (NULL == spifd_2)
   \   00000014   0x....             LDR.N    R0,??DataTable2_5
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD107             BNE.N    ??spi2_dma_int_0
     62             {
     63                printf ("Error opening SPI driver!\n");
   \   0000001C   0x....             LDR.N    R0,??DataTable2_6
   \   0000001E   0x.... 0x....      BL       _io_printf
     64                _time_delay (200L);
   \   00000022   0x20C8             MOVS     R0,#+200
   \   00000024   0x.... 0x....      BL       _time_delay
     65                _task_block ();
   \   00000028   0x.... 0x....      BL       _task_block
     66             }
     67          
     68             /* Set clock mode */
     69                param = SPI_CLK_POL_PHA_MODE1;
   \                     ??spi2_dma_int_0:
   \   0000002C   0x2001             MOVS     R0,#+1
   \   0000002E   0x9000             STR      R0,[SP, #+0]
     70             if (SPI_OK == ioctl (spifd_2, IO_IOCTL_SPI_SET_MODE, &param))
   \   00000030   0xAA00             ADD      R2,SP,#+0
   \   00000032   0xF640 0x6104      MOVW     R1,#+3588
   \   00000036   0x....             LDR.N    R0,??DataTable2_5
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0x.... 0x....      BL       _io_ioctl
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD103             BNE.N    ??spi2_dma_int_1
     71             {
     72                printf ("SPI2 is OK!\n");
   \   00000042   0x....             LDR.N    R0,??DataTable2_7
   \   00000044   0x.... 0x....      BL       _io_printf
   \   00000048   0xE002             B.N      ??spi2_dma_int_2
     73             } else {
     74                printf ("ERROR\n");
   \                     ??spi2_dma_int_1:
   \   0000004A   0x....             LDR.N    R0,??DataTable2_8
   \   0000004C   0x.... 0x....      BL       _io_printf
     75             }
     76          
     77             /* Set big endian */
     78             param = SPI_DEVICE_BIG_ENDIAN;    // wk -->这个设置是针对主机来说的，对于从机时设置都会出错
   \                     ??spi2_dma_int_2:
   \   00000050   0x2001             MOVS     R0,#+1
   \   00000052   0x9000             STR      R0,[SP, #+0]
     79          //   printf ("Setting endian to %s ... ", param == SPI_DEVICE_BIG_ENDIAN ? "SPI_DEVICE_BIG_ENDIAN" : "SPI_DEVICE_LITTLE_ENDIAN");
     80             if (SPI_OK == ioctl (spifd_2, IO_IOCTL_SPI_SET_ENDIAN, &param))
   \   00000054   0xAA00             ADD      R2,SP,#+0
   \   00000056   0xF640 0x610A      MOVW     R1,#+3594
   \   0000005A   0x....             LDR.N    R0,??DataTable2_5
   \   0000005C   0x6800             LDR      R0,[R0, #+0]
   \   0000005E   0x.... 0x....      BL       _io_ioctl
   \   00000062   0x2800             CMP      R0,#+0
   \   00000064   0xD103             BNE.N    ??spi2_dma_int_3
     81             {
     82                printf ("OK\n");
   \   00000066   0x....             ADR.N    R0,??DataTable2  ;; "OK\n"
   \   00000068   0x.... 0x....      BL       _io_printf
   \   0000006C   0xE002             B.N      ??spi2_dma_int_4
     83             } else {
     84                printf ("ERROR\n");
   \                     ??spi2_dma_int_3:
   \   0000006E   0x....             LDR.N    R0,??DataTable2_8
   \   00000070   0x.... 0x....      BL       _io_printf
     85             }
     86                /* Set transfer mode */
     87             param = SPI_DEVICE_SLAVE_MODE;
   \                     ??spi2_dma_int_4:
   \   00000074   0x2001             MOVS     R0,#+1
   \   00000076   0x9000             STR      R0,[SP, #+0]
     88          //   printf ("Setting SPI2 transfer mode to %s ... ", device_mode[param]);
     89             if (SPI_OK == ioctl (spifd_2, IO_IOCTL_SPI_SET_TRANSFER_MODE, &param))
   \   00000078   0xAA00             ADD      R2,SP,#+0
   \   0000007A   0xF640 0x6108      MOVW     R1,#+3592
   \   0000007E   0x....             LDR.N    R0,??DataTable2_5
   \   00000080   0x6800             LDR      R0,[R0, #+0]
   \   00000082   0x.... 0x....      BL       _io_ioctl
   \   00000086   0x2800             CMP      R0,#+0
   \   00000088   0xD103             BNE.N    ??spi2_dma_int_5
     90             {
     91                printf ("OK\n");
   \   0000008A   0x....             ADR.N    R0,??DataTable2  ;; "OK\n"
   \   0000008C   0x.... 0x....      BL       _io_printf
   \   00000090   0xE002             B.N      ??spi2_dma_int_6
     92             } else {
     93                printf ("ERROR\n");
   \                     ??spi2_dma_int_5:
   \   00000092   0x....             LDR.N    R0,??DataTable2_8
   \   00000094   0x.... 0x....      BL       _io_printf
     94             }
     95             /* Clear statistics */
     96          //   printf ("Clearing statistics ... ");
     97             if (SPI_OK == ioctl (spifd_2, IO_IOCTL_SPI_CLEAR_STATS, NULL))
   \                     ??spi2_dma_int_6:
   \   00000098   0x2200             MOVS     R2,#+0
   \   0000009A   0xF44F 0x6161      MOV      R1,#+3600
   \   0000009E   0x....             LDR.N    R0,??DataTable2_5
   \   000000A0   0x6800             LDR      R0,[R0, #+0]
   \   000000A2   0x.... 0x....      BL       _io_ioctl
   \   000000A6   0x2800             CMP      R0,#+0
   \   000000A8   0xD103             BNE.N    ??spi2_dma_int_7
     98             {
     99                printf ("OK\n");
   \   000000AA   0x....             ADR.N    R0,??DataTable2  ;; "OK\n"
   \   000000AC   0x.... 0x....      BL       _io_printf
   \   000000B0   0xE002             B.N      ??spi2_dma_int_8
    100             } else {
    101                printf ("ERROR\n");
   \                     ??spi2_dma_int_7:
   \   000000B2   0x....             LDR.N    R0,??DataTable2_8
   \   000000B4   0x.... 0x....      BL       _io_printf
    102             }
    103             printf("\n--------------       End       --------------\n\n");
   \                     ??spi2_dma_int_8:
   \   000000B8   0x....             LDR.N    R0,??DataTable2_9
   \   000000BA   0x.... 0x....      BL       _io_printf
    104             /******************************* spi2 conf end ****************************/
    105          }
   \   000000BE   0xBD01             POP      {R0,PC}          ;; return
    106          
    107          /* wk --> 初始化 PTB10 用于数据中断接收 */
    108          inline void ptb_10_int(void)
    109          {
    110           /* wk --> set gpio of ptb10 in int mode for spi data read */
    111              ptbfd_10 = fopen("gpio:read", (char_ptr) &pins_int );
    112              ioctl(ptbfd_10,GPIO_IOCTL_SET_IRQ_FUNCTION, (pointer)int_callback);
    113          /* end */
    114          }
    115          
    116          /*
    117          ** 函数名：
    118          ** 作者：
    119          ** 说明：在没有使用事件时 SPI 接收数据的外部函数
    120          */

   \                                 In section .text, align 4, keep-with-next
    121          void DMA_RecData_OK  
    122          (
    123            void
    124          )
    125          {
   \                     DMA_RecData_OK:
   \   00000000   0xB580             PUSH     {R7,LR}
    126              if(count<4)
   \   00000002   0x....             LDR.N    R0,??DataTable2_10
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x2804             CMP      R0,#+4
   \   00000008   0xD246             BCS.N    ??DMA_RecData_OK_0
    127              {
    128                HeadFlg[count]=BufRxchar[0];
   \   0000000A   0x....             LDR.N    R0,??DataTable2_10
   \   0000000C   0x7800             LDRB     R0,[R0, #+0]
   \   0000000E   0x....             LDR.N    R1,??DataTable2_11
   \   00000010   0x....             LDR.N    R2,??DataTable2_12
   \   00000012   0x7812             LDRB     R2,[R2, #+0]
   \   00000014   0x5442             STRB     R2,[R0, R1]
    129                count++;
   \   00000016   0x....             LDR.N    R0,??DataTable2_10
   \   00000018   0x7800             LDRB     R0,[R0, #+0]
   \   0000001A   0x1C40             ADDS     R0,R0,#+1
   \   0000001C   0x....             LDR.N    R1,??DataTable2_10
   \   0000001E   0x7008             STRB     R0,[R1, #+0]
    130                if(count==4)
   \   00000020   0x....             LDR.N    R0,??DataTable2_10
   \   00000022   0x7800             LDRB     R0,[R0, #+0]
   \   00000024   0x2804             CMP      R0,#+4
   \   00000026   0xD166             BNE.N    ??DMA_RecData_OK_1
    131                  if(HeadFlg[0]==0x33 && HeadFlg[1]==0x33 && HeadFlg[2]==0x33 && (HeadFlg[3]== 0x44 ||HeadFlg[3]== 0x55))
   \   00000028   0x....             LDR.N    R0,??DataTable2_11
   \   0000002A   0x7800             LDRB     R0,[R0, #+0]
   \   0000002C   0x2833             CMP      R0,#+51
   \   0000002E   0xD123             BNE.N    ??DMA_RecData_OK_2
   \   00000030   0x....             LDR.N    R0,??DataTable2_11
   \   00000032   0x7840             LDRB     R0,[R0, #+1]
   \   00000034   0x2833             CMP      R0,#+51
   \   00000036   0xD11F             BNE.N    ??DMA_RecData_OK_2
   \   00000038   0x....             LDR.N    R0,??DataTable2_11
   \   0000003A   0x7880             LDRB     R0,[R0, #+2]
   \   0000003C   0x2833             CMP      R0,#+51
   \   0000003E   0xD11B             BNE.N    ??DMA_RecData_OK_2
   \   00000040   0x....             LDR.N    R0,??DataTable2_11
   \   00000042   0x78C0             LDRB     R0,[R0, #+3]
   \   00000044   0x2844             CMP      R0,#+68
   \   00000046   0xD003             BEQ.N    ??DMA_RecData_OK_3
   \   00000048   0x....             LDR.N    R0,??DataTable2_11
   \   0000004A   0x78C0             LDRB     R0,[R0, #+3]
   \   0000004C   0x2855             CMP      R0,#+85
   \   0000004E   0xD113             BNE.N    ??DMA_RecData_OK_2
    132                  {
    133                    if(HeadFlg[3]==0x44)
   \                     ??DMA_RecData_OK_3:
   \   00000050   0x....             LDR.N    R0,??DataTable2_11
   \   00000052   0x78C0             LDRB     R0,[R0, #+3]
   \   00000054   0x2844             CMP      R0,#+68
   \   00000056   0xD104             BNE.N    ??DMA_RecData_OK_4
    134          //            DataSize=3896-1;  // 3896=spi_len-4;
    135                      DataSize= Pow_SIZE + 4;  // wk @20130325 --> Pow_SIZE 是去掉数据头和尾的电能质量有效数据
   \   00000058   0x....             LDR.N    R0,??DataTable2_13
   \   0000005A   0xF640 0x2174      MOVW     R1,#+2676
   \   0000005E   0x8001             STRH     R1,[R0, #+0]
   \   00000060   0xE003             B.N      ??DMA_RecData_OK_5
    136                    else
    137                      DataSize= Evnt_SIZE + 4; // wk @20130325 -->
   \                     ??DMA_RecData_OK_4:
   \   00000062   0x....             LDR.N    R0,??DataTable2_13
   \   00000064   0xF240 0x71DA      MOVW     R1,#+2010
   \   00000068   0x8001             STRH     R1,[R0, #+0]
    138                    
    139                    count=5; //  wk --> 数据头已经找到 
   \                     ??DMA_RecData_OK_5:
   \   0000006A   0x....             LDR.N    R0,??DataTable2_10
   \   0000006C   0x2105             MOVS     R1,#+5
   \   0000006E   0x7001             STRB     R1,[R0, #+0]
    140                    printf("\n1");
   \   00000070   0x....             ADR.N    R0,??DataTable2_1  ;; 0x0A, 0x31, 0x00, 0x00
   \   00000072   0x.... 0x....      BL       _io_printf
   \   00000076   0xE03E             B.N      ??DMA_RecData_OK_1
    141                  }
    142                  else
    143                  {
    144                    HeadFlg[0]=HeadFlg[1];
   \                     ??DMA_RecData_OK_2:
   \   00000078   0x....             LDR.N    R0,??DataTable2_11
   \   0000007A   0x7840             LDRB     R0,[R0, #+1]
   \   0000007C   0x....             LDR.N    R1,??DataTable2_11
   \   0000007E   0x7008             STRB     R0,[R1, #+0]
    145                    HeadFlg[1]=HeadFlg[2];
   \   00000080   0x....             LDR.N    R0,??DataTable2_11
   \   00000082   0x....             LDR.N    R1,??DataTable2_11
   \   00000084   0x7889             LDRB     R1,[R1, #+2]
   \   00000086   0x7041             STRB     R1,[R0, #+1]
    146                    HeadFlg[2]=HeadFlg[3];
   \   00000088   0x....             LDR.N    R0,??DataTable2_11
   \   0000008A   0x....             LDR.N    R1,??DataTable2_11
   \   0000008C   0x78C9             LDRB     R1,[R1, #+3]
   \   0000008E   0x7081             STRB     R1,[R0, #+2]
    147                    count=3;
   \   00000090   0x....             LDR.N    R0,??DataTable2_10
   \   00000092   0x2103             MOVS     R1,#+3
   \   00000094   0x7001             STRB     R1,[R0, #+0]
   \   00000096   0xE02E             B.N      ??DMA_RecData_OK_1
    148                  }
    149               
    150              }
    151              else if(count==5)
   \                     ??DMA_RecData_OK_0:
   \   00000098   0x....             LDR.N    R0,??DataTable2_10
   \   0000009A   0x7800             LDRB     R0,[R0, #+0]
   \   0000009C   0x2805             CMP      R0,#+5
   \   0000009E   0xD103             BNE.N    ??DMA_RecData_OK_6
    152              {
    153                   count=6; // 用一个数据改变 DMA 接收数据的长度，此数据将会被舍弃
   \   000000A0   0x....             LDR.N    R0,??DataTable2_10
   \   000000A2   0x2106             MOVS     R1,#+6
   \   000000A4   0x7001             STRB     R1,[R0, #+0]
   \   000000A6   0xE026             B.N      ??DMA_RecData_OK_1
    154              }
    155              else
    156              {
    157                
    158                 if(HeadFlg[3]==0x44) // wk @20130325 -->
   \                     ??DMA_RecData_OK_6:
   \   000000A8   0x....             LDR.N    R0,??DataTable2_11
   \   000000AA   0x78C0             LDRB     R0,[R0, #+3]
   \   000000AC   0x2844             CMP      R0,#+68
   \   000000AE   0xD109             BNE.N    ??DMA_RecData_OK_7
    159                   for(int i=2;i<Pow_SIZE;i++)
   \   000000B0   0x2002             MOVS     R0,#+2
   \                     ??DMA_RecData_OK_8:
   \   000000B2   0xF5B0 0x6F27      CMP      R0,#+2672
   \   000000B6   0xDA10             BGE.N    ??DMA_RecData_OK_9
    160                     PowRxchar[i] = BufRxchar[i];
   \   000000B8   0x....             LDR.N    R1,??DataTable2_14
   \   000000BA   0x....             LDR.N    R2,??DataTable2_12
   \   000000BC   0x5C82             LDRB     R2,[R0, R2]
   \   000000BE   0x5442             STRB     R2,[R0, R1]
   \   000000C0   0x1C40             ADDS     R0,R0,#+1
   \   000000C2   0xE7F6             B.N      ??DMA_RecData_OK_8
    161                 else
    162                   for(int i=0;i<Evnt_SIZE;i++)
   \                     ??DMA_RecData_OK_7:
   \   000000C4   0x2000             MOVS     R0,#+0
   \   000000C6   0xE004             B.N      ??DMA_RecData_OK_10
    163                     PowRxchar[i] = BufRxchar[i];
   \                     ??DMA_RecData_OK_11:
   \   000000C8   0x....             LDR.N    R1,??DataTable2_14
   \   000000CA   0x....             LDR.N    R2,??DataTable2_12
   \   000000CC   0x5C82             LDRB     R2,[R0, R2]
   \   000000CE   0x5442             STRB     R2,[R0, R1]
   \   000000D0   0x1C40             ADDS     R0,R0,#+1
   \                     ??DMA_RecData_OK_10:
   \   000000D2   0xF240 0x71D6      MOVW     R1,#+2006
   \   000000D6   0x4288             CMP      R0,R1
   \   000000D8   0xDBF6             BLT.N    ??DMA_RecData_OK_11
    164          
    165          //        printf("\n2");
    166                  count=0; 
   \                     ??DMA_RecData_OK_9:
   \   000000DA   0x....             LDR.N    R0,??DataTable2_10
   \   000000DC   0x2100             MOVS     R1,#+0
   \   000000DE   0x7001             STRB     R1,[R0, #+0]
    167                  DataSize=1;
   \   000000E0   0x....             LDR.N    R0,??DataTable2_13
   \   000000E2   0x2101             MOVS     R1,#+1
   \   000000E4   0x8001             STRH     R1,[R0, #+0]
    168                  fclose(spifd_2);
   \   000000E6   0x....             LDR.N    R0,??DataTable2_5
   \   000000E8   0x6800             LDR      R0,[R0, #+0]
   \   000000EA   0x.... 0x....      BL       _io_fclose
    169                  asm("NOP");  
   \   000000EE   0xBF00             NOP              
    170                  spi2_dma_int(); // 刷新 DMA 寄存器
   \   000000F0   0x.... 0x....      BL       spi2_dma_int
    171                  asm("NOP");   
   \   000000F4   0xBF00             NOP              
    172              }
    173            
    174          //  if(BufRxchar[0]==0x66 && BufRxchar[1]==0x33 && BufRxchar[2]==0x33 && 
    175          //     BufRxchar[3]==0x33 && BufRxchar[4]==0x44 && BufRxchar[5]==0x0a&& 
    176          //     BufRxchar[6]==0x4c)   
    177          //  { 
    178          //    for(int i=0 ;i<2635 ;i++)
    179          //      PowRxchar[i] = BufRxchar[i+7];
    180          //    SPIPowerFlg=1;
    181          //    printf("1\n");   // @20130312 --> wk: Test the data is OK ?
    182          //  }
    183          //  printf("2\n");  // @20130312 --> wk: Test if enter the func ?
    184          }
   \                     ??DMA_RecData_OK_1:
   \   000000F6   0xBD01             POP      {R0,PC}          ;; return
    185          
    186          /*
    187          ** 函数名：
    188          ** 作者：
    189          ** 说明：在使用事件时 SPI 接收数据的外部任务函数
    190          */

   \                                 In section .text, align 2, keep-with-next
    191          void SPIDMA_Task( uint_32 param)
    192          {
   \                     SPIDMA_Task:
   \   00000000   0xB580             PUSH     {R7,LR}
    193            pointer  pspidma_event;
    194          #ifdef _SPIDMADATA_DBUG_
    195             printf("\n----------SPIDMA_Task----------\n");
   \   00000002   0x....             LDR.N    R0,??DataTable2_15
   \   00000004   0x.... 0x....      BL       _io_printf
    196             printf("\n----------             ----------\n");
   \   00000008   0x....             LDR.N    R0,??DataTable2_16
   \   0000000A   0x.... 0x....      BL       _io_printf
    197             printf("\n----------             ----------\n");
   \   0000000E   0x....             LDR.N    R0,??DataTable2_16
   \   00000010   0x.... 0x....      BL       _io_printf
    198             printf("\n----------     END     ----------\n");
   \   00000014   0x....             LDR.N    R0,??DataTable2_17
   \   00000016   0x.... 0x....      BL       _io_printf
    199          #endif 
    200            
    201          #ifdef _SPIDMADATA_DBUG_
    202              if(_event_create("spidma_event") != MQX_OK){  // 创建事件
   \   0000001A   0x....             LDR.N    R0,??DataTable2_18
   \   0000001C   0x.... 0x....      BL       _event_create
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD005             BEQ.N    ??SPIDMA_Task_0
    203                printf("\n Make spidma event failed");
   \   00000024   0x....             LDR.N    R0,??DataTable2_19
   \   00000026   0x.... 0x....      BL       _io_printf
    204                _task_block();
   \   0000002A   0x.... 0x....      BL       _task_block
   \   0000002E   0xE002             B.N      ??SPIDMA_Task_1
    205              }
    206              else
    207                printf("\n Make spidma event OK");
   \                     ??SPIDMA_Task_0:
   \   00000030   0x....             LDR.N    R0,??DataTable2_20
   \   00000032   0x.... 0x....      BL       _io_printf
    208            
    209            if(_event_open("spidma_event", &pspidma_event) != MQX_OK){
   \                     ??SPIDMA_Task_1:
   \   00000036   0xA900             ADD      R1,SP,#+0
   \   00000038   0x....             LDR.N    R0,??DataTable2_18
   \   0000003A   0x.... 0x....      BL       _event_open
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD005             BEQ.N    ??SPIDMA_Task_2
    210              printf("\nOpen spidma event failed ");
   \   00000042   0x....             LDR.N    R0,??DataTable2_21
   \   00000044   0x.... 0x....      BL       _io_printf
    211              _task_block();
   \   00000048   0x.... 0x....      BL       _task_block
   \   0000004C   0xE013             B.N      ??SPIDMA_Task_3
    212            }  
    213            else
    214              printf("\n Open spidma event OK");
   \                     ??SPIDMA_Task_2:
   \   0000004E   0x....             LDR.N    R0,??DataTable2_22
   \   00000050   0x.... 0x....      BL       _io_printf
   \   00000054   0xE00F             B.N      ??SPIDMA_Task_3
    215          #endif
    216            
    217          #ifndef _SPIDMADATA_DBUG_
    218            _event_create("spidma_event");
    219            _event_open("spidma_event", &pspidma_event);
    220          #endif
    221            
    222            while(TRUE)
    223            {
    224              _event_wait_all(pspidma_event,0x02,0); //等待事件发生
    225              _event_clear(pspidma_event,0x02);  // 清除事件标志
    226            
    227              if(BufRxchar[0]==0x66 && BufRxchar[1]==0x33 && BufRxchar[2]==0x33 && 
    228                 BufRxchar[3]==0x33 && BufRxchar[4]==0x44 && BufRxchar[5]==0x0a&& 
    229                 BufRxchar[6]==0x4c)
    230             { 
    231                for(int i=0 ;i<2635 ;i++)
    232                  PowRxchar[i] = BufRxchar[i+7];
   \                     ??SPIDMA_Task_4:
   \   00000056   0x....             LDR.N    R1,??DataTable2_12
   \   00000058   0x1841             ADDS     R1,R0,R1
   \   0000005A   0x79C9             LDRB     R1,[R1, #+7]
   \   0000005C   0x....             LDR.N    R2,??DataTable2_14
   \   0000005E   0x5481             STRB     R1,[R0, R2]
   \   00000060   0x1C40             ADDS     R0,R0,#+1
   \                     ??SPIDMA_Task_5:
   \   00000062   0xF640 0x214B      MOVW     R1,#+2635
   \   00000066   0x4288             CMP      R0,R1
   \   00000068   0xDBF5             BLT.N    ??SPIDMA_Task_4
    233                SPIPowerFlg=1;
   \   0000006A   0x....             LDR.N    R0,??DataTable2_23
   \   0000006C   0x2101             MOVS     R1,#+1
   \   0000006E   0x7001             STRB     R1,[R0, #+0]
    234                printf("1\n");  // @20130312 --> wk: Test the data is OK ?
   \   00000070   0x....             ADR.N    R0,??DataTable2_2  ;; 0x31, 0x0A, 0x00, 0x00
   \   00000072   0x.... 0x....      BL       _io_printf
   \                     ??SPIDMA_Task_3:
   \   00000076   0x2200             MOVS     R2,#+0
   \   00000078   0x2102             MOVS     R1,#+2
   \   0000007A   0x9800             LDR      R0,[SP, #+0]
   \   0000007C   0x.... 0x....      BL       _event_wait_all
   \   00000080   0x2102             MOVS     R1,#+2
   \   00000082   0x9800             LDR      R0,[SP, #+0]
   \   00000084   0x.... 0x....      BL       _event_clear
   \   00000088   0x....             LDR.N    R0,??DataTable2_12
   \   0000008A   0x7800             LDRB     R0,[R0, #+0]
   \   0000008C   0x2866             CMP      R0,#+102
   \   0000008E   0xD1F2             BNE.N    ??SPIDMA_Task_3
   \   00000090   0x....             LDR.N    R0,??DataTable2_12
   \   00000092   0x7840             LDRB     R0,[R0, #+1]
   \   00000094   0x2833             CMP      R0,#+51
   \   00000096   0xD1EE             BNE.N    ??SPIDMA_Task_3
   \   00000098   0x....             LDR.N    R0,??DataTable2_12
   \   0000009A   0x7880             LDRB     R0,[R0, #+2]
   \   0000009C   0x2833             CMP      R0,#+51
   \   0000009E   0xD1EA             BNE.N    ??SPIDMA_Task_3
   \   000000A0   0x....             LDR.N    R0,??DataTable2_12
   \   000000A2   0x78C0             LDRB     R0,[R0, #+3]
   \   000000A4   0x2833             CMP      R0,#+51
   \   000000A6   0xD1E6             BNE.N    ??SPIDMA_Task_3
   \   000000A8   0x....             LDR.N    R0,??DataTable2_12
   \   000000AA   0x7900             LDRB     R0,[R0, #+4]
   \   000000AC   0x2844             CMP      R0,#+68
   \   000000AE   0xD1E2             BNE.N    ??SPIDMA_Task_3
   \   000000B0   0x....             LDR.N    R0,??DataTable2_12
   \   000000B2   0x7940             LDRB     R0,[R0, #+5]
   \   000000B4   0x280A             CMP      R0,#+10
   \   000000B6   0xD1DE             BNE.N    ??SPIDMA_Task_3
   \   000000B8   0x....             LDR.N    R0,??DataTable2_12
   \   000000BA   0x7980             LDRB     R0,[R0, #+6]
   \   000000BC   0x284C             CMP      R0,#+76
   \   000000BE   0xD1DA             BNE.N    ??SPIDMA_Task_3
   \   000000C0   0x2000             MOVS     R0,#+0
   \   000000C2   0xE7CE             B.N      ??SPIDMA_Task_5
    235            }
    236            
    237          //  printf("2\n");   // @20130312 --> wk: Test if enter the func ?
    238            }
    239              
    240          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x4F 0x4B          DC8      "OK\n"
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x0A 0x31          DC8      0x0A, 0x31, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x31 0x0A          DC8      0x31, 0x0A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x........         DC32     `?<Constant "\\n-------------- Int S...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x........         DC32     `?<Constant "ispi2:">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x........         DC32     spifd_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0x........         DC32     `?<Constant "Error opening SPI dri...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   0x........         DC32     `?<Constant "SPI2 is OK!\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   0x........         DC32     `?<Constant "ERROR\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \   00000000   0x........         DC32     `?<Constant "\\n--------------      ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \   00000000   0x........         DC32     count

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_11:
   \   00000000   0x........         DC32     HeadFlg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_12:
   \   00000000   0x........         DC32     BufRxchar

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_13:
   \   00000000   0x........         DC32     DataSize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_14:
   \   00000000   0x........         DC32     PowRxchar

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_15:
   \   00000000   0x........         DC32     `?<Constant "\\n----------SPIDMA_Tas...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_16:
   \   00000000   0x........         DC32     `?<Constant "\\n----------          ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_17:
   \   00000000   0x........         DC32     `?<Constant "\\n----------     END  ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_18:
   \   00000000   0x........         DC32     `?<Constant "spidma_event">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_19:
   \   00000000   0x........         DC32     `?<Constant "\\n Make spidma event f...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_20:
   \   00000000   0x........         DC32     `?<Constant "\\n Make spidma event OK">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_21:
   \   00000000   0x........         DC32     `?<Constant "\\nOpen spidma event fa...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_22:
   \   00000000   0x........         DC32     `?<Constant "\\n Open spidma event OK">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_23:
   \   00000000   0x........         DC32     SPIPowerFlg

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\n-------------- Int S...">`:
   \   00000000   0x0A 0x2D          DC8 0AH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \   00000008   0x2D 0x2D          DC8 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 20H
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x20    
   \   00000010   0x49 0x6E          DC8 49H, 6EH, 74H, 20H, 53H, 50H, 49H, 32H
   \              0x74 0x20    
   \              0x53 0x50    
   \              0x49 0x32    
   \   00000018   0x20 0x63          DC8 20H, 63H, 6FH, 6EH, 66H, 69H, 67H, 75H
   \              0x6F 0x6E    
   \              0x66 0x69    
   \              0x67 0x75    
   \   00000020   0x72 0x65          DC8 72H, 65H, 20H, 2DH, 2DH, 2DH, 2DH, 2DH
   \              0x20 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \   00000028   0x2D 0x2D          DC8 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \   00000030   0x2D 0x0A          DC8 2DH, 0AH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "ispi2:">`:
   \   00000000   0x69 0x73          DC8 "ispi2:"
   \              0x70 0x69    
   \              0x32 0x3A    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Error opening SPI dri...">`:
   \   00000000   0x45 0x72          DC8 "Error opening SPI driver!\012"
   \              0x72 0x6F    
   \              0x72 0x20    
   \              0x6F 0x70    
   \              0x65 0x6E    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x53 0x50    
   \              0x49 0x20    
   \              0x64 0x72    
   \              0x69 0x76    
   \              0x65 0x72    
   \              0x21 0x0A    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "SPI2 is OK!\\n">`:
   \   00000000   0x53 0x50          DC8 "SPI2 is OK!\012"
   \              0x49 0x32    
   \              0x20 0x69    
   \              0x73 0x20    
   \              0x4F 0x4B    
   \              0x21 0x0A    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "ERROR\\n">`:
   \   00000000   0x45 0x52          DC8 "ERROR\012"
   \              0x52 0x4F    
   \              0x52 0x0A    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \   00000000   0x4F 0x4B          DC8 "OK\012"
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\n--------------      ...">`:
   \   00000000   0x0A 0x2D          DC8 "\012--------------       End       --------------\012\012"
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x45 0x6E    
   \              0x64 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x0A 0x0A    
   \              0x00         
   \   00000031   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \   00000000   0x0A 0x31          DC8 "\0121"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\n----------SPIDMA_Tas...">`:
   \   00000000   0x0A 0x2D          DC8 "\012----------SPIDMA_Task----------\012"
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x53    
   \              0x50 0x49    
   \              0x44 0x4D    
   \              0x41 0x5F    
   \              0x54 0x61    
   \              0x73 0x6B    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\n----------          ...">`:
   \   00000000   0x0A 0x2D          DC8 "\012----------             ----------\012"
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\n----------     END  ...">`:
   \   00000000   0x0A 0x2D          DC8 "\012----------     END     ----------\012"
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x45 0x4E    
   \              0x44 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "spidma_event">`:
   \   00000000   0x73 0x70          DC8 "spidma_event"
   \              0x69 0x64    
   \              0x6D 0x61    
   \              0x5F 0x65    
   \              0x76 0x65    
   \              0x6E 0x74    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\n Make spidma event f...">`:
   \   00000000   0x0A 0x20          DC8 "\012 Make spidma event failed"
   \              0x4D 0x61    
   \              0x6B 0x65    
   \              0x20 0x73    
   \              0x70 0x69    
   \              0x64 0x6D    
   \              0x61 0x20    
   \              0x65 0x76    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x66 0x61    
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\n Make spidma event OK">`:
   \   00000000   0x0A 0x20          DC8 "\012 Make spidma event OK"
   \              0x4D 0x61    
   \              0x6B 0x65    
   \              0x20 0x73    
   \              0x70 0x69    
   \              0x64 0x6D    
   \              0x61 0x20    
   \              0x65 0x76    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x4F 0x4B    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nOpen spidma event fa...">`:
   \   00000000   0x0A 0x4F          DC8 "\012Open spidma event failed "
   \              0x70 0x65    
   \              0x6E 0x20    
   \              0x73 0x70    
   \              0x69 0x64    
   \              0x6D 0x61    
   \              0x20 0x65    
   \              0x76 0x65    
   \              0x6E 0x74    
   \              0x20 0x66    
   \              0x61 0x69    
   \              0x6C 0x65    
   \              0x64 0x20    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\n Open spidma event OK">`:
   \   00000000   0x0A 0x20          DC8 "\012 Open spidma event OK"
   \              0x4F 0x70    
   \              0x65 0x6E    
   \              0x20 0x73    
   \              0x70 0x69    
   \              0x64 0x6D    
   \              0x61 0x20    
   \              0x65 0x76    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x4F 0x4B    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \   00000000   0x31 0x0A          DC8 "1\012"
   \              0x00         
   \   00000003   0x00               DC8 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  DMA_RecData_OK
             8 -> _io_fclose
             8 -> _io_printf
             8 -> spi2_dma_int
        8  SPIDMA_Task
             8 -> _event_clear
             8 -> _event_create
             8 -> _event_open
             8 -> _event_wait_all
             8 -> _io_printf
             8 -> _task_block
        8  spi2_dma_int
             8 -> _io_fopen
             8 -> _io_ioctl
             8 -> _io_printf
             8 -> _task_block
             8 -> _time_delay


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Constant "1\n">
       8  ?<Constant "ERROR\n">
      28  ?<Constant "Error opening SPI dri...">
       4  ?<Constant "OK\n">
      16  ?<Constant "SPI2 is OK!\n">
      24  ?<Constant "\n Make spidma event OK">
      28  ?<Constant "\n Make spidma event f...">
      24  ?<Constant "\n Open spidma event OK">
      36  ?<Constant "\n----------          ...">
      36  ?<Constant "\n----------     END  ...">
      52  ?<Constant "\n--------------      ...">
      52  ?<Constant "\n-------------- Int S...">
      36  ?<Constant "\n----------SPIDMA_Tas...">
       4  ?<Constant "\n1">
      28  ?<Constant "\nOpen spidma event fa...">
       8  ?<Constant "ispi2:">
      16  ?<Constant "spidma_event">
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_12
       4  ??DataTable2_13
       4  ??DataTable2_14
       4  ??DataTable2_15
       4  ??DataTable2_16
       4  ??DataTable2_17
       4  ??DataTable2_18
       4  ??DataTable2_19
       4  ??DataTable2_2
       4  ??DataTable2_20
       4  ??DataTable2_21
       4  ??DataTable2_22
       4  ??DataTable2_23
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
    2700  BufRxchar
     248  DMA_RecData_OK
       2  DataSize
    2008  EvntRxchar
       4  HeadFlg
    2672  PowRxchar
     196  SPIDMA_Task
       1  SPIEventFlg
       1  SPIPowerFlg
       1  SPIRxCnt
       2  Time_save
       2  TotalNum
       1  count
       8  pins_int
       4  ptbfd_10
     192  spi2_dma_int
       4  spifd_2
       1  testflgg

 
 7 401 bytes in section .bss
    10 bytes in section .data
   404 bytes in section .rodata
   732 bytes in section .text
 
   732 bytes of CODE  memory
   404 bytes of CONST memory
 7 411 bytes of DATA  memory

Errors: none
Warnings: none
