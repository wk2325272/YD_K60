###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     01/Apr/2013  14:27:45 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  L:\git_workspace\YD_PRJ_NEW_20130323_git_\Source\mem_ram #
#                    .c                                                       #
#    Command line =  L:\git_workspace\YD_PRJ_NEW_20130323_git_\Source\mem_ram #
#                    .c -D _DEBUG=1 -lC "L:\git_workspace\YD_PRJ_NEW_20130323 #
#                    _git_\IAR\twrk60n512\Int Flash Debug\List\" -lA          #
#                    "L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\twrk60n51 #
#                    2\Int Flash Debug\List\" --diag_suppress                 #
#                    Pa039,Pa082,Pe186 -o "L:\git_workspace\YD_PRJ_NEW_201303 #
#                    23_git_\IAR\twrk60n512\Int Flash Debug\Obj\" --no_cse    #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\..\lib\twr #
#                    k60n512.iar\ -I L:\git_workspace\YD_PRJ_NEW_20130323_git #
#                    _\IAR\..\lib\twrk60n512.iar\bsp\ -I                      #
#                    L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\..\lib\twr #
#                    k60n512.iar\psp\ -I L:\git_workspace\YD_PRJ_NEW_20130323 #
#                    _git_\IAR\..\lib\twrk60n512.iar\bsp\Generated_Code\ -I   #
#                    L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\..\lib\twr #
#                    k60n512.iar\rtcs\ -I L:\git_workspace\YD_PRJ_NEW_2013032 #
#                    3_git_\IAR\..\lib\twrk60n512.iar\mfs\ -I                 #
#                    L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\..\lib\twr #
#                    k60n512.iar\usb\host\ -I L:\git_workspace\YD_PRJ_NEW_201 #
#                    30323_git_\IAR\..\lib\twrk60n512.iar\shell\ -I           #
#                    L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\..\lib\twr #
#                    k60n512.iar\usb\ -I L:\git_workspace\YD_PRJ_NEW_20130323 #
#                    _git_\IAR\..\ -I L:\git_workspace\YD_PRJ_NEW_20130323_gi #
#                    t_\IAR\..\Source\Source_MQX\ -I "E:\Freescale\Freescale  #
#                    MQX 3.8\shell\source\include\" -Ol --use_c++_inline      #
#    List file    =  L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\twrk60n512 #
#                    \Int Flash Debug\List\mem_ram.lst                        #
#    Object file  =  L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\twrk60n512 #
#                    \Int Flash Debug\Obj\mem_ram.o                           #
#                                                                             #
#                                                                             #
###############################################################################

L:\git_workspace\YD_PRJ_NEW_20130323_git_\Source\mem_ram.c
      1          /**HEADER********************************************************************
      2          * 
      3          * Copyright (c) 2008 Freescale Semiconductor;
      4          * All Rights Reserved                       
      5          *
      6          * Copyright (c) 1989-2008 ARC International;
      7          * All Rights Reserved
      8          *
      9          *************************************************************************** 
     10          *
     11          * THIS SOFTWARE IS PROVIDED BY FREESCALE "AS IS" AND ANY EXPRESSED OR 
     12          * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
     13          * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  
     14          * IN NO EVENT SHALL FREESCALE OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
     15          * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
     16          * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
     17          * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
     18          * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
     19          * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
     20          * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
     21          * THE POSSIBILITY OF SUCH DAMAGE.
     22          *
     23          **************************************************************************
     24          *
     25          * $FileName: men_ram.c$
     26          * $Version : $
     27          * $Date    : 20130106$
     28          *
     29          * Comments:
     30          *
     31          *   
     32          *
     33          *END************************************************************************/
     34          #include <mqx.h>
     35          #include <bsp.h>
     36          #include <fio.h>
     37          #include <mfs.h>
     38          #include <Sh_mfs.h>
     39          #include <part_mgr.h>
     40          #include <io_gpio.h>
     41          #include <lwevent.h>
     42          #include <string.h>
     43          
     44          
     45          /////////////////////////////////////////////////////////////////////////////////#dx 201314
     46          #if 0//defined (BSP_EXTERNAL_MRAM_RAM_BASE) && defined (BSP_EXTERNAL_MRAM_RAM_SIZE)
     47          #warning Please check that the MRAM memory is available on your EVB (Tower). 
     48          #define RAM_DISK_BASE   BSP_EXTERNAL_MRAM_RAM_BASE 
     49          #define RAM_DISK_SIZE   BSP_EXTERNAL_MRAM_RAM_SIZE
     50          #else 
     51          #warning Modify the RAM_DISK_SIZE if you need more or less ramdisk space. 
                  ^
Warning[Pe1105]: #warning directive: Modify the RAM_DISK_SIZE if you need more
          or less ramdisk space.
     52          #define RAM_DISK_SIZE   0x4000 //#32KB=0x8000 #16KB=0x4000 #10KB=0x2800 #6KB= 0x1800 

   \                                 In section .bss, align 4
     53             static uchar   ram_disk[RAM_DISK_SIZE];
   \                     ram_disk:
   \   00000000                      DS8 16384
     54          #define RAM_DISK_BASE   &ram_disk[0]
     55          #endif
     56          //////////////////////////////////////////////////////////////////////#dx 201314
     57          
     58          /* function prototypes */
     59          void mem_ram_app(uint_32);
     60          
     61          /*TASK*-----------------------------------------------------
     62          * 
     63          * Task Name    : mem_ram_app
     64          * Comments     :
     65          *
     66          *END*-----------------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
     67          void mem_ram_app
     68             (
     69                uint_32 initial_data
     70             )
     71          {
   \                     mem_ram_app:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
     72            ////////////////////////////////////////////////////////////////#dx 201314   
     73          
     74             MQX_FILE_PTR               dev_handle1,
     75             a_fd_ptr;
     76             int_32                     error_code;
     77             _mqx_uint                  mqx_status;
     78             a_fd_ptr = 0;
   \   00000004   0x2400             MOVS     R4,#+0
     79             char  ramdisk_filesystem_name[] = "r:";///////////////////°²×°ÅÌ·û
   \   00000006   0xA800             ADD      R0,SP,#+0
   \   00000008   0x492F             LDR.N    R1,??mem_ram_app_0
   \   0000000A   0x680A             LDR      R2,[R1, #0]
   \   0000000C   0x6002             STR      R2,[R0, #+0]
     80             /* install device */
     81             mqx_status = _io_mem_install("mfs_ramdisk:", (uchar_ptr)RAM_DISK_BASE,
     82                                          (_file_size)RAM_DISK_SIZE);
   \   0000000E   0xF44F 0x4280      MOV      R2,#+16384
   \   00000012   0x492E             LDR.N    R1,??mem_ram_app_0+0x4
   \   00000014   0x482E             LDR.N    R0,??mem_ram_app_0+0x8
   \   00000016   0x.... 0x....      BL       _io_mem_install
   \   0000001A   0x0001             MOVS     R1,R0
     83             /* Number of sectors is returned by ioctl IO_IOCTL_GET_NUM_SECTORS function */
     84             /* If another disc structure is desired, use MFS_FORMAT_DATA structure to   */
     85             /* define it and call standart format function instead default_format       */   
     86             if ( mqx_status != MQX_OK ) {
   \   0000001C   0x2900             CMP      R1,#+0
   \   0000001E   0xD004             BEQ.N    ??mem_ram_app_1
     87               printf("\nError installing memory device (0x%x)", mqx_status);
   \   00000020   0x482C             LDR.N    R0,??mem_ram_app_0+0xC
   \   00000022   0x.... 0x....      BL       _io_printf
     88               _task_block();
   \   00000026   0x.... 0x....      BL       _task_block
     89             } /* Endif */
     90             
     91             /* Open the device which MFS will be installed on */
     92             dev_handle1 = fopen("mfs_ramdisk:", 0);
   \                     ??mem_ram_app_1:
   \   0000002A   0x2100             MOVS     R1,#+0
   \   0000002C   0x4828             LDR.N    R0,??mem_ram_app_0+0x8
   \   0000002E   0x.... 0x....      BL       _io_fopen
   \   00000032   0x0004             MOVS     R4,R0
     93             if ( dev_handle1 == NULL ) {
   \   00000034   0x2C00             CMP      R4,#+0
   \   00000036   0xD104             BNE.N    ??mem_ram_app_2
     94               printf("\nUnable to open Ramdisk device");
   \   00000038   0x4827             LDR.N    R0,??mem_ram_app_0+0x10
   \   0000003A   0x.... 0x....      BL       _io_printf
     95               _task_block();
   \   0000003E   0x.... 0x....      BL       _task_block
     96             } /* Endif */
     97             
     98             /* Install MFS  */
     99             mqx_status = _io_mfs_install(dev_handle1, ramdisk_filesystem_name, (_file_size)0);
   \                     ??mem_ram_app_2:
   \   00000042   0x2200             MOVS     R2,#+0
   \   00000044   0xA900             ADD      R1,SP,#+0
   \   00000046   0x0020             MOVS     R0,R4
   \   00000048   0x.... 0x....      BL       _io_mfs_install
   \   0000004C   0x0001             MOVS     R1,R0
    100             if (mqx_status != MFS_NO_ERROR) {
   \   0000004E   0x2900             CMP      R1,#+0
   \   00000050   0xD006             BEQ.N    ??mem_ram_app_3
    101               printf("\nError initializing%s",ramdisk_filesystem_name);
   \   00000052   0xA900             ADD      R1,SP,#+0
   \   00000054   0x4821             LDR.N    R0,??mem_ram_app_0+0x14
   \   00000056   0x.... 0x....      BL       _io_printf
    102               _task_block();
   \   0000005A   0x.... 0x....      BL       _task_block
   \   0000005E   0xE003             B.N      ??mem_ram_app_4
    103             } else {
    104               printf("\nInitialized Ram Disk to %s\\",ramdisk_filesystem_name);
   \                     ??mem_ram_app_3:
   \   00000060   0xA900             ADD      R1,SP,#+0
   \   00000062   0x481F             LDR.N    R0,??mem_ram_app_0+0x18
   \   00000064   0x.... 0x....      BL       _io_printf
    105             } /* Endif */
    106             
    107             /* Open the filesystem and format detect, if format is required */
    108             a_fd_ptr = fopen(ramdisk_filesystem_name, NULL);
   \                     ??mem_ram_app_4:
   \   00000068   0x2100             MOVS     R1,#+0
   \   0000006A   0xA800             ADD      R0,SP,#+0
   \   0000006C   0x.... 0x....      BL       _io_fopen
   \   00000070   0x0004             MOVS     R4,R0
    109             error_code    = ferror(a_fd_ptr);
   \   00000072   0x0020             MOVS     R0,R4
   \   00000074   0x.... 0x....      BL       _io_ferror
   \   00000078   0x0004             MOVS     R4,R0
    110             if ((error_code != MFS_NO_ERROR) && (error_code != MFS_NOT_A_DOS_DISK))
   \   0000007A   0x2C00             CMP      R4,#+0
   \   0000007C   0xD00D             BEQ.N    ??mem_ram_app_5
   \   0000007E   0xF243 0x001A      MOVW     R0,#+12314
   \   00000082   0x4284             CMP      R4,R0
   \   00000084   0xD009             BEQ.N    ??mem_ram_app_5
    111             {
    112               printf("\nError while opening %s\\ (%s)", ramdisk_filesystem_name, MFS_Error_text((uint_32)(uint_32)error_code));
   \   00000086   0x0020             MOVS     R0,R4
   \   00000088   0x.... 0x....      BL       MFS_Error_text
   \   0000008C   0x0002             MOVS     R2,R0
   \   0000008E   0xA900             ADD      R1,SP,#+0
   \   00000090   0x4814             LDR.N    R0,??mem_ram_app_0+0x1C
   \   00000092   0x.... 0x....      BL       _io_printf
    113               _task_block();
   \   00000096   0x.... 0x....      BL       _task_block
    114             } /* Endif */
    115             if ( error_code == MFS_NOT_A_DOS_DISK ) {
   \                     ??mem_ram_app_5:
   \   0000009A   0xF243 0x001A      MOVW     R0,#+12314
   \   0000009E   0x4284             CMP      R4,R0
   \   000000A0   0xD10E             BNE.N    ??mem_ram_app_6
    116               char_ptr argv[]={"format",ramdisk_filesystem_name};///////////////////////////ramdisk_filesystem_name
   \   000000A2   0xA801             ADD      R0,SP,#+4
   \   000000A4   0x4910             LDR.N    R1,??mem_ram_app_0+0x20
   \   000000A6   0xC90C             LDM      R1!,{R2,R3}
   \   000000A8   0xC00C             STM      R0!,{R2,R3}
   \   000000AA   0x3908             SUBS     R1,R1,#+8
   \   000000AC   0x3808             SUBS     R0,R0,#+8
   \   000000AE   0xA800             ADD      R0,SP,#+0
   \   000000B0   0x9002             STR      R0,[SP, #+8]
    117               //strcpy(argv,ramdisk_filesystem_name);
    118               Shell_format(2,argv);
   \   000000B2   0xA901             ADD      R1,SP,#+4
   \   000000B4   0x2002             MOVS     R0,#+2
   \   000000B6   0x.... 0x....      BL       Shell_format
    119               printf("\nNOT A DOS DISK! You must format to continue.");
   \   000000BA   0x480C             LDR.N    R0,??mem_ram_app_0+0x24
   \   000000BC   0x.... 0x....      BL       _io_printf
    120             } /* Endif */
    121          ////////////////////////////////////////////////////////////////#dx 201314
    122            
    123              _task_block();    
   \                     ??mem_ram_app_6:
   \   000000C0   0x.... 0x....      BL       _task_block
    124             // _task_destroy(_task_get_id());
    125          }
   \   000000C4   0xBD1F             POP      {R0-R4,PC}       ;; return
   \   000000C6   0xBF00             Nop      
   \                     ??mem_ram_app_0:
   \   000000C8   0x........         DC32     `?<Constant "r:">`
   \   000000CC   0x........         DC32     ram_disk
   \   000000D0   0x........         DC32     `?<Constant "mfs_ramdisk:">`
   \   000000D4   0x........         DC32     `?<Constant "\\nError installing mem...">`
   \   000000D8   0x........         DC32     `?<Constant "\\nUnable to open Ramdi...">`
   \   000000DC   0x........         DC32     `?<Constant "\\nError initializing%s">`
   \   000000E0   0x........         DC32     `?<Constant "\\nInitialized Ram Disk...">`
   \   000000E4   0x........         DC32     `?<Constant "\\nError while opening ...">`
   \   000000E8   0x........         DC32     `?<Constant {&"format", (char *)0}>`
   \   000000EC   0x........         DC32     `?<Constant "\\nNOT A DOS DISK! You ...">`

   \                                 In section .rodata, align 4
   \                     `?<Constant "r:">`:
   \   00000000   0x72 0x3A          DC8 "r:"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "mfs_ramdisk:">`:
   \   00000000   0x6D 0x66          DC8 "mfs_ramdisk:"
   \              0x73 0x5F    
   \              0x72 0x61    
   \              0x6D 0x64    
   \              0x69 0x73    
   \              0x6B 0x3A    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nError installing mem...">`:
   \   00000000   0x0A 0x45          DC8 "\012Error installing memory device (0x%x)"
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x20 0x69    
   \              0x6E 0x73    
   \              0x74 0x61    
   \              0x6C 0x6C    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x6D 0x65    
   \              0x6D 0x6F    
   \              0x72 0x79    
   \              0x20 0x64    
   \              0x65 0x76    
   \              0x69 0x63    
   \              0x65 0x20    
   \              0x28 0x30    
   \              0x78 0x25    
   \              0x78 0x29    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nUnable to open Ramdi...">`:
   \   00000000   0x0A 0x55          DC8 "\012Unable to open Ramdisk device"
   \              0x6E 0x61    
   \              0x62 0x6C    
   \              0x65 0x20    
   \              0x74 0x6F    
   \              0x20 0x6F    
   \              0x70 0x65    
   \              0x6E 0x20    
   \              0x52 0x61    
   \              0x6D 0x64    
   \              0x69 0x73    
   \              0x6B 0x20    
   \              0x64 0x65    
   \              0x76 0x69    
   \              0x63 0x65    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nError initializing%s">`:
   \   00000000   0x0A 0x45          DC8 "\012Error initializing%s"
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x20 0x69    
   \              0x6E 0x69    
   \              0x74 0x69    
   \              0x61 0x6C    
   \              0x69 0x7A    
   \              0x69 0x6E    
   \              0x67 0x25    
   \              0x73 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nInitialized Ram Disk...">`:
   \   00000000   0x0A 0x49          DC8 "\012Initialized Ram Disk to %s\\"
   \              0x6E 0x69    
   \              0x74 0x69    
   \              0x61 0x6C    
   \              0x69 0x7A    
   \              0x65 0x64    
   \              0x20 0x52    
   \              0x61 0x6D    
   \              0x20 0x44    
   \              0x69 0x73    
   \              0x6B 0x20    
   \              0x74 0x6F    
   \              0x20 0x25    
   \              0x73 0x5C    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nError while opening ...">`:
   \   00000000   0x0A 0x45          DC8 "\012Error while opening %s\\ (%s)"
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x20 0x77    
   \              0x68 0x69    
   \              0x6C 0x65    
   \              0x20 0x6F    
   \              0x70 0x65    
   \              0x6E 0x69    
   \              0x6E 0x67    
   \              0x20 0x25    
   \              0x73 0x5C    
   \              0x20 0x28    
   \              0x25 0x73    
   \              0x29 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "format">`:
   \   00000000   0x66 0x6F          DC8 "format"
   \              0x72 0x6D    
   \              0x61 0x74    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant {&"format", (char *)0}>`:
   \   00000000   0x........         DC32 `?<Constant "format">`, 0H
   \              0x00000000   

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nNOT A DOS DISK! You ...">`:
   \   00000000   0x0A 0x4E          DC8 "\012NOT A DOS DISK! You must format to continue."
   \              0x4F 0x54    
   \              0x20 0x41    
   \              0x20 0x44    
   \              0x4F 0x53    
   \              0x20 0x44    
   \              0x49 0x53    
   \              0x4B 0x21    
   \              0x20 0x59    
   \              0x6F 0x75    
   \              0x20 0x6D    
   \              0x75 0x73    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x61 0x74    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x63 0x6F    
   \              0x6E 0x74    
   \              0x69 0x6E    
   \              0x75 0x65    
   \              0x2E 0x00    
   \   0000002E   0x00 0x00          DC8 0, 0
    126          
    127          /* EOF */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       24  mem_ram_app
             24 -> MFS_Error_text
             24 -> Shell_format
             24 -> _io_ferror
             24 -> _io_fopen
             24 -> _io_mem_install
             24 -> _io_mfs_install
             24 -> _io_printf
             24 -> _task_block


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      24  ?<Constant "\nError initializing%s">
      40  ?<Constant "\nError installing mem...">
      32  ?<Constant "\nError while opening ...">
      32  ?<Constant "\nInitialized Ram Disk...">
      48  ?<Constant "\nNOT A DOS DISK! You ...">
      32  ?<Constant "\nUnable to open Ramdi...">
       8  ?<Constant "format">
      16  ?<Constant "mfs_ramdisk:">
       4  ?<Constant "r:">
       8  ?<Constant {&"format", (char *)0}>
     240  mem_ram_app
   16384  ram_disk

 
 16 384 bytes in section .bss
    244 bytes in section .rodata
    240 bytes in section .text
 
    240 bytes of CODE  memory
    244 bytes of CONST memory
 16 384 bytes of DATA  memory

Errors: none
Warnings: 1
