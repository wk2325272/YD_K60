###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     12/Apr/2013  20:24:36 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\Freescale\Freescale MQX 3.8\shell\source\mfs\sh_cd.c  #
#    Command line =  "E:\Freescale\Freescale MQX                              #
#                    3.8\shell\source\mfs\sh_cd.c" -D _DEBUG=1 -lC            #
#                    "L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\twrk60n51 #
#                    2\Int Flash Debug\List\" -lA                             #
#                    "L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\twrk60n51 #
#                    2\Int Flash Debug\List\" --diag_suppress                 #
#                    Pa039,Pa082,Pe186 -o "L:\git_workspace\YD_PRJ_NEW_201303 #
#                    23_git_\IAR\twrk60n512\Int Flash Debug\Obj\" --no_cse    #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\..\lib\twr #
#                    k60n512.iar\ -I L:\git_workspace\YD_PRJ_NEW_20130323_git #
#                    _\IAR\..\lib\twrk60n512.iar\bsp\ -I                      #
#                    L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\..\lib\twr #
#                    k60n512.iar\psp\ -I L:\git_workspace\YD_PRJ_NEW_20130323 #
#                    _git_\IAR\..\lib\twrk60n512.iar\bsp\Generated_Code\ -I   #
#                    L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\..\lib\twr #
#                    k60n512.iar\rtcs\ -I L:\git_workspace\YD_PRJ_NEW_2013032 #
#                    3_git_\IAR\..\lib\twrk60n512.iar\mfs\ -I                 #
#                    L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\..\lib\twr #
#                    k60n512.iar\usb\host\ -I L:\git_workspace\YD_PRJ_NEW_201 #
#                    30323_git_\IAR\..\lib\twrk60n512.iar\shell\ -I           #
#                    L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\..\lib\twr #
#                    k60n512.iar\usb\ -I L:\git_workspace\YD_PRJ_NEW_20130323 #
#                    _git_\IAR\..\ -I L:\git_workspace\YD_PRJ_NEW_20130323_gi #
#                    t_\IAR\..\Source\Source_MQX\ -I                          #
#                    L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\..\Source\ #
#                     -I "E:\Freescale\Freescale MQX                          #
#                    3.8\shell\source\include\" -Ol --use_c++_inline          #
#    List file    =  L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\twrk60n512 #
#                    \Int Flash Debug\List\sh_cd.lst                          #
#    Object file  =  L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\twrk60n512 #
#                    \Int Flash Debug\Obj\sh_cd.o                             #
#                                                                             #
#                                                                             #
###############################################################################

E:\Freescale\Freescale MQX 3.8\shell\source\mfs\sh_cd.c
      1          /**HEADER********************************************************************
      2          * 
      3          * Copyright (c) 2008 Freescale Semiconductor;
      4          * All Rights Reserved                       
      5          *
      6          * Copyright (c) 2004-2008 Embedded Access Inc.;
      7          * All Rights Reserved
      8          *
      9          * Copyright (c) 1989-2008 ARC International;
     10          * All Rights Reserved
     11          *
     12          *************************************************************************** 
     13          *
     14          * THIS SOFTWARE IS PROVIDED BY FREESCALE "AS IS" AND ANY EXPRESSED OR 
     15          * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
     16          * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  
     17          * IN NO EVENT SHALL FREESCALE OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
     18          * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
     19          * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
     20          * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
     21          * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
     22          * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
     23          * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
     24          * THE POSSIBILITY OF SUCH DAMAGE.
     25          *
     26          **************************************************************************
     27          *
     28          * $FileName: sh_cd.c$
     29          * $Version : 3.8.13.0$
     30          * $Date    : Sep-19-2011$
     31          *
     32          * Comments:
     33          *
     34          *   This file contains the source for an MFS shell function.
     35          *
     36          *END************************************************************************/
     37          
     38          #include <string.h>
     39          #include <mqx.h>
     40          #include <fio.h>
     41          #include <mfs.h>
     42          #include <shell.h>
     43          #include <sh_prv.h>
     44          
     45          #if SHELLCFG_USES_MFS
     46          /*FUNCTION*-------------------------------------------------------------------
     47          *
     48          * Function Name    :   Shell_cd
     49          * Returned Value   :  int_32 error code
     50          * Comments  :  mount a filesystem on a device.
     51          *
     52          * Usage:  cd <directory>
     53          *
     54          *END*---------------------------------------------------------------------*/
     55          

   \                                 In section .text, align 4, keep-with-next
     56          int_32  Shell_cd(int_32 argc, char_ptr argv[] )
     57          { /* Body */
   \                     Shell_cd:
   \   00000000   0xE92D 0x47FF      PUSH     {R0-R10,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
     58             boolean                    print_usage, shorthelp = FALSE, dev_in_path = FALSE;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x9003             STR      R0,[SP, #+12]
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x9002             STR      R0,[SP, #+8]
     59             int_32                     error = 0, return_code = SHELL_EXIT_SUCCESS;
   \   00000010   0x2700             MOVS     R7,#+0
   \   00000012   0x2600             MOVS     R6,#+0
     60             MQX_FILE_PTR               fs_ptr;
     61             char_ptr                   abs_path = NULL;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x9001             STR      R0,[SP, #+4]
     62             SHELL_CONTEXT_PTR          shell_ptr = Shell_get_context( argv ); 
   \   00000018   0x46A9             MOV      R9,R5
     63             int_16                     devlen = 0;
   \   0000001A   0xF05F 0x0A00      MOVS     R10,#+0
     64             
     65             print_usage = Shell_check_help_request(argc, argv, &shorthelp );
   \   0000001E   0xAA03             ADD      R2,SP,#+12
   \   00000020   0x0029             MOVS     R1,R5
   \   00000022   0x0020             MOVS     R0,R4
   \   00000024   0x.... 0x....      BL       Shell_check_help_request
   \   00000028   0x4680             MOV      R8,R0
     66          
     67             if (!print_usage)  {
   \   0000002A   0xF1B8 0x0F00      CMP      R8,#+0
   \   0000002E   0xD168             BNE.N    ??Shell_cd_0
     68                if (argc !=  2) {
   \   00000030   0x2C02             CMP      R4,#+2
   \   00000032   0xD007             BEQ.N    ??Shell_cd_1
     69                   printf("Error, invalid number of parameters\n");
   \   00000034   0x483E             LDR.N    R0,??Shell_cd_2
   \   00000036   0x.... 0x....      BL       _io_printf
     70                   return_code = SHELL_EXIT_ERROR;
   \   0000003A   0xF05F 0x36FF      MOVS     R6,#-1
     71                   print_usage=TRUE;
   \   0000003E   0xF05F 0x0801      MOVS     R8,#+1
   \   00000042   0xE05E             B.N      ??Shell_cd_0
     72                } else  {
     73                   if (MFS_alloc_path(&abs_path) != MFS_NO_ERROR) {
   \                     ??Shell_cd_1:
   \   00000044   0xA801             ADD      R0,SP,#+4
   \   00000046   0x.... 0x....      BL       MFS_alloc_path
   \   0000004A   0x2800             CMP      R0,#+0
   \   0000004C   0xD005             BEQ.N    ??Shell_cd_3
     74                      printf("Error, unable to allocate memory for paths\n" );
   \   0000004E   0x4839             LDR.N    R0,??Shell_cd_2+0x4
   \   00000050   0x.... 0x....      BL       _io_printf
     75                      return_code = SHELL_EXIT_ERROR;
   \   00000054   0xF05F 0x36FF      MOVS     R6,#-1
   \   00000058   0xE053             B.N      ??Shell_cd_0
     76                   }
     77                   else
     78                   {
     79                      devlen = _io_get_dev_for_path(abs_path,
     80                                  &dev_in_path,
     81                                  PATHNAME_SIZE,
     82                                  (char *)argv[1],
     83                                  Shell_get_current_filesystem_name(shell_ptr));
   \                     ??Shell_cd_3:
   \   0000005A   0x4648             MOV      R0,R9
   \   0000005C   0x.... 0x....      BL       Shell_get_current_filesystem_name
   \   00000060   0x9000             STR      R0,[SP, #+0]
   \   00000062   0x686B             LDR      R3,[R5, #+4]
   \   00000064   0xF44F 0x7282      MOV      R2,#+260
   \   00000068   0xA902             ADD      R1,SP,#+8
   \   0000006A   0x9801             LDR      R0,[SP, #+4]
   \   0000006C   0x.... 0x....      BL       _io_get_dev_for_path
   \   00000070   0x4682             MOV      R10,R0
     84                      fs_ptr = _io_get_fs_by_name(abs_path);
   \   00000072   0x9801             LDR      R0,[SP, #+4]
   \   00000074   0x.... 0x....      BL       _io_get_fs_by_name
   \   00000078   0x0004             MOVS     R4,R0
     85                      if (fs_ptr == NULL)  
   \   0000007A   0x2C00             CMP      R4,#+0
   \   0000007C   0xD106             BNE.N    ??Shell_cd_4
     86                      {
     87                         printf("Device \"%s\" not available\n", abs_path);
   \   0000007E   0x9901             LDR      R1,[SP, #+4]
   \   00000080   0x482D             LDR.N    R0,??Shell_cd_2+0x8
   \   00000082   0x.... 0x....      BL       _io_printf
     88                         return_code = SHELL_EXIT_ERROR;
   \   00000086   0xF05F 0x36FF      MOVS     R6,#-1
   \   0000008A   0xE037             B.N      ??Shell_cd_5
     89                      } 
     90                      else  
     91                      {
     92                   
     93                         error = _io_rel2abs(abs_path,
     94                                               shell_ptr->CURRENT_DIR,
     95                                               (char *)argv[1],
     96                                               PATHNAME_SIZE,
     97                                               shell_ptr->CURRENT_DEVICE_NAME);
   \                     ??Shell_cd_4:
   \   0000008C   0xF119 0x00D0      ADDS     R0,R9,#+208
   \   00000090   0x9000             STR      R0,[SP, #+0]
   \   00000092   0xF44F 0x7382      MOV      R3,#+260
   \   00000096   0x686A             LDR      R2,[R5, #+4]
   \   00000098   0xF119 0x01DC      ADDS     R1,R9,#+220
   \   0000009C   0x9801             LDR      R0,[SP, #+4]
   \   0000009E   0x.... 0x....      BL       _io_rel2abs
   \   000000A2   0x0007             MOVS     R7,R0
     98                      
     99                         if(!error)
   \   000000A4   0x2F00             CMP      R7,#+0
   \   000000A6   0xD106             BNE.N    ??Shell_cd_6
    100                         {
    101                            // check if path exist
    102                           error = ioctl(fs_ptr, IO_IOCTL_CHECK_DIR_EXIST,(pointer)abs_path );
   \   000000A8   0x9A01             LDR      R2,[SP, #+4]
   \   000000AA   0xF44F 0x719A      MOV      R1,#+308
   \   000000AE   0x0020             MOVS     R0,R4
   \   000000B0   0x.... 0x....      BL       _io_ioctl
   \   000000B4   0x0007             MOVS     R7,R0
    103                         }
    104                         if (error)  
   \                     ??Shell_cd_6:
   \   000000B6   0x2F00             CMP      R7,#+0
   \   000000B8   0xD004             BEQ.N    ??Shell_cd_7
    105                         {
    106                            printf("Error changing directory %s\n", argv[1]);
   \   000000BA   0x6869             LDR      R1,[R5, #+4]
   \   000000BC   0x481F             LDR.N    R0,??Shell_cd_2+0xC
   \   000000BE   0x.... 0x....      BL       _io_printf
   \   000000C2   0xE01B             B.N      ??Shell_cd_5
    107                         }
    108                         else
    109                         {
    110                            
    111                            if(dev_in_path == TRUE)
   \                     ??Shell_cd_7:
   \   000000C4   0x9802             LDR      R0,[SP, #+8]
   \   000000C6   0x2801             CMP      R0,#+1
   \   000000C8   0xD10F             BNE.N    ??Shell_cd_8
    112                            {
    113                               // there is device name in input path
    114          
    115                               //separate device name
    116                               abs_path[devlen] = '\0';
   \   000000CA   0xFA0F 0xFA8A      SXTH     R10,R10          ;; SignExt  R10,R10,#+16,#+16
   \   000000CE   0x9801             LDR      R0,[SP, #+4]
   \   000000D0   0x2100             MOVS     R1,#+0
   \   000000D2   0xF80A 0x1000      STRB     R1,[R10, R0]
    117          
    118                               Shell_set_current_filesystem_by_name(argv,abs_path);
   \   000000D6   0x9901             LDR      R1,[SP, #+4]
   \   000000D8   0x0028             MOVS     R0,R5
   \   000000DA   0x.... 0x....      BL       Shell_set_current_filesystem_by_name
    119          
    120                               // add "\" back to the string
    121                               abs_path[devlen] = '\\';                     
   \   000000DE   0xFA0F 0xFA8A      SXTH     R10,R10          ;; SignExt  R10,R10,#+16,#+16
   \   000000E2   0x9801             LDR      R0,[SP, #+4]
   \   000000E4   0x215C             MOVS     R1,#+92
   \   000000E6   0xF80A 0x1000      STRB     R1,[R10, R0]
    122                            }
    123          
    124                            // change shell current dir
    125                            strcpy(shell_ptr->CURRENT_DIR,abs_path+devlen);
   \                     ??Shell_cd_8:
   \   000000EA   0xFA0F 0xFA8A      SXTH     R10,R10          ;; SignExt  R10,R10,#+16,#+16
   \   000000EE   0x9801             LDR      R0,[SP, #+4]
   \   000000F0   0xEB1A 0x0100      ADDS     R1,R10,R0
   \   000000F4   0xF119 0x00DC      ADDS     R0,R9,#+220
   \   000000F8   0x.... 0x....      BL       strcpy
    126                         }               
    127                      }
    128                      MFS_free_path(abs_path);
   \                     ??Shell_cd_5:
   \   000000FC   0x9801             LDR      R0,[SP, #+4]
   \   000000FE   0x.... 0x....      BL       MFS_free_path
    129                   }
    130                }
    131             }
    132          
    133          
    134                
    135                
    136             if (print_usage)  {
   \                     ??Shell_cd_0:
   \   00000102   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000106   0xD00E             BEQ.N    ??Shell_cd_9
    137                if (shorthelp)  {
   \   00000108   0x9803             LDR      R0,[SP, #+12]
   \   0000010A   0x2800             CMP      R0,#+0
   \   0000010C   0xD004             BEQ.N    ??Shell_cd_10
    138                   printf("%s <directory> \n", argv[0]);
   \   0000010E   0x6829             LDR      R1,[R5, #+0]
   \   00000110   0x480B             LDR.N    R0,??Shell_cd_2+0x10
   \   00000112   0x.... 0x....      BL       _io_printf
   \   00000116   0xE006             B.N      ??Shell_cd_9
    139                } else  {
    140                   printf("Usage: %s <directory>\n", argv[0]);
   \                     ??Shell_cd_10:
   \   00000118   0x6829             LDR      R1,[R5, #+0]
   \   0000011A   0x480A             LDR.N    R0,??Shell_cd_2+0x14
   \   0000011C   0x.... 0x....      BL       _io_printf
    141                   printf("   <directory> = name of directory to change to\n");
   \   00000120   0x4809             LDR.N    R0,??Shell_cd_2+0x18
   \   00000122   0x.... 0x....      BL       _io_printf
    142                }
    143             }
    144             return return_code;
   \                     ??Shell_cd_9:
   \   00000126   0x0030             MOVS     R0,R6
   \   00000128   0xB004             ADD      SP,SP,#+16
   \   0000012A   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
   \   0000012E   0xBF00             Nop      
   \                     ??Shell_cd_2:
   \   00000130   0x........         DC32     `?<Constant "Error, invalid number...">`
   \   00000134   0x........         DC32     `?<Constant "Error, unable to allo...">`
   \   00000138   0x........         DC32     `?<Constant "Device \\"%s\\" not avail...">`
   \   0000013C   0x........         DC32     `?<Constant "Error changing direct...">`
   \   00000140   0x........         DC32     `?<Constant "%s <directory> \\n">`
   \   00000144   0x........         DC32     `?<Constant "Usage: %s <directory>\\n">`
   \   00000148   0x........         DC32     `?<Constant "   <directory> = name...">`
    145          }

   \                                 In section .rodata, align 4
   \                     `?<Constant "Error, invalid number...">`:
   \   00000000   0x45 0x72          DC8 "Error, invalid number of parameters\012"
   \              0x72 0x6F    
   \              0x72 0x2C    
   \              0x20 0x69    
   \              0x6E 0x76    
   \              0x61 0x6C    
   \              0x69 0x64    
   \              0x20 0x6E    
   \              0x75 0x6D    
   \              0x62 0x65    
   \              0x72 0x20    
   \              0x6F 0x66    
   \              0x20 0x70    
   \              0x61 0x72    
   \              0x61 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x73 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "Error, unable to allo...">`:
   \   00000000   0x45 0x72          DC8 "Error, unable to allocate memory for paths\012"
   \              0x72 0x6F    
   \              0x72 0x2C    
   \              0x20 0x75    
   \              0x6E 0x61    
   \              0x62 0x6C    
   \              0x65 0x20    
   \              0x74 0x6F    
   \              0x20 0x61    
   \              0x6C 0x6C    
   \              0x6F 0x63    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x6D 0x65    
   \              0x6D 0x6F    
   \              0x72 0x79    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x20 0x70    
   \              0x61 0x74    
   \              0x68 0x73    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "Device \\"%s\\" not avail...">`:
   \   00000000   0x44 0x65          DC8 "Device \"%s\" not available\012"
   \              0x76 0x69    
   \              0x63 0x65    
   \              0x20 0x22    
   \              0x25 0x73    
   \              0x22 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x61 0x76    
   \              0x61 0x69    
   \              0x6C 0x61    
   \              0x62 0x6C    
   \              0x65 0x0A    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Error changing direct...">`:
   \   00000000   0x45 0x72          DC8 "Error changing directory %s\012"
   \              0x72 0x6F    
   \              0x72 0x20    
   \              0x63 0x68    
   \              0x61 0x6E    
   \              0x67 0x69    
   \              0x6E 0x67    
   \              0x20 0x64    
   \              0x69 0x72    
   \              0x65 0x63    
   \              0x74 0x6F    
   \              0x72 0x79    
   \              0x20 0x25    
   \              0x73 0x0A    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "%s <directory> \\n">`:
   \   00000000   0x25 0x73          DC8 "%s <directory> \012"
   \              0x20 0x3C    
   \              0x64 0x69    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x6F 0x72    
   \              0x79 0x3E    
   \              0x20 0x0A    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "Usage: %s <directory>\\n">`:
   \   00000000   0x55 0x73          DC8 "Usage: %s <directory>\012"
   \              0x61 0x67    
   \              0x65 0x3A    
   \              0x20 0x25    
   \              0x73 0x20    
   \              0x3C 0x64    
   \              0x69 0x72    
   \              0x65 0x63    
   \              0x74 0x6F    
   \              0x72 0x79    
   \              0x3E 0x0A    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "   <directory> = name...">`:
   \   00000000   0x20 0x20          DC8 "   <directory> = name of directory to change to\012"
   \              0x20 0x3C    
   \              0x64 0x69    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x6F 0x72    
   \              0x79 0x3E    
   \              0x20 0x3D    
   \              0x20 0x6E    
   \              0x61 0x6D    
   \              0x65 0x20    
   \              0x6F 0x66    
   \              0x20 0x64    
   \              0x69 0x72    
   \              0x65 0x63    
   \              0x74 0x6F    
   \              0x72 0x79    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x63 0x68    
   \              0x61 0x6E    
   \              0x67 0x65    
   \              0x20 0x74    
   \              0x6F 0x0A    
   \              0x00         
   \   00000031   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    146          
    147          #endif //SHELLCFG_USES_MFS
    148          /* EOF */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       48  Shell_cd
             48 -> MFS_alloc_path
             48 -> MFS_free_path
             48 -> Shell_check_help_request
             48 -> Shell_get_current_filesystem_name
             48 -> Shell_set_current_filesystem_by_name
             48 -> _io_get_dev_for_path
             48 -> _io_get_fs_by_name
             48 -> _io_ioctl
             48 -> _io_printf
             48 -> _io_rel2abs
             48 -> strcpy


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      52  ?<Constant "   <directory> = name...">
      20  ?<Constant "%s <directory> \n">
      28  ?<Constant "Device \"%s\" not avail...">
      32  ?<Constant "Error changing direct...">
      40  ?<Constant "Error, invalid number...">
      44  ?<Constant "Error, unable to allo...">
      24  ?<Constant "Usage: %s <directory>\n">
     332  Shell_cd

 
 240 bytes in section .rodata
 332 bytes in section .text
 
 332 bytes of CODE  memory
 240 bytes of CONST memory

Errors: none
Warnings: none
