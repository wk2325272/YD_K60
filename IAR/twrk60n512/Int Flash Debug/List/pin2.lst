###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     04/May/2013  14:48:01 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\Freescale\mqx_test\YD_PRJ_NEW_20130323_git_\Source\pi #
#                    n2.c                                                     #
#    Command line =  E:\Freescale\mqx_test\YD_PRJ_NEW_20130323_git_\Source\pi #
#                    n2.c -D _DEBUG=1 -lC "E:\Freescale\mqx_test\YD_PRJ_NEW_2 #
#                    0130323_git_\IAR\twrk60n512\Int Flash Debug\List\" -lA   #
#                    "E:\Freescale\mqx_test\YD_PRJ_NEW_20130323_git_\IAR\twrk #
#                    60n512\Int Flash Debug\List\" --diag_suppress            #
#                    Pa039,Pa082,Pe186 -o "E:\Freescale\mqx_test\YD_PRJ_NEW_2 #
#                    0130323_git_\IAR\twrk60n512\Int Flash Debug\Obj\"        #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M4 -e --fpu=None            #
#                    --dlib_config "D:\Program Files\IAR Systems\Embedded     #
#                    Workbench 6.0\arm\INC\c\DLib_Config_Normal.h" -I         #
#                    E:\Freescale\mqx_test\YD_PRJ_NEW_20130323_git_\IAR\..\li #
#                    b\twrk60n512.iar\ -I E:\Freescale\mqx_test\YD_PRJ_NEW_20 #
#                    130323_git_\IAR\..\lib\twrk60n512.iar\bsp\ -I            #
#                    E:\Freescale\mqx_test\YD_PRJ_NEW_20130323_git_\IAR\..\li #
#                    b\twrk60n512.iar\psp\ -I E:\Freescale\mqx_test\YD_PRJ_NE #
#                    W_20130323_git_\IAR\..\lib\twrk60n512.iar\bsp\Generated_ #
#                    Code\ -I E:\Freescale\mqx_test\YD_PRJ_NEW_20130323_git_\ #
#                    IAR\..\lib\twrk60n512.iar\rtcs\ -I                       #
#                    E:\Freescale\mqx_test\YD_PRJ_NEW_20130323_git_\IAR\..\li #
#                    b\twrk60n512.iar\mfs\ -I E:\Freescale\mqx_test\YD_PRJ_NE #
#                    W_20130323_git_\IAR\..\lib\twrk60n512.iar\usb\host\ -I   #
#                    E:\Freescale\mqx_test\YD_PRJ_NEW_20130323_git_\IAR\..\li #
#                    b\twrk60n512.iar\shell\ -I E:\Freescale\mqx_test\YD_PRJ_ #
#                    NEW_20130323_git_\IAR\..\lib\twrk60n512.iar\usb\ -I      #
#                    E:\Freescale\mqx_test\YD_PRJ_NEW_20130323_git_\IAR\..\   #
#                    -I E:\Freescale\mqx_test\YD_PRJ_NEW_20130323_git_\IAR\.. #
#                    \Source\Source_MQX\ -I E:\Freescale\mqx_test\YD_PRJ_NEW_ #
#                    20130323_git_\IAR\..\Source\ -I "E:\Freescale\Freescale  #
#                    MQX 3.8\shell\source\include\" -Ol --use_c++_inline      #
#    List file    =  E:\Freescale\mqx_test\YD_PRJ_NEW_20130323_git_\IAR\twrk6 #
#                    0n512\Int Flash Debug\List\pin2.lst                      #
#    Object file  =  E:\Freescale\mqx_test\YD_PRJ_NEW_20130323_git_\IAR\twrk6 #
#                    0n512\Int Flash Debug\Obj\pin2.o                         #
#                                                                             #
#                                                                             #
###############################################################################

E:\Freescale\mqx_test\YD_PRJ_NEW_20130323_git_\Source\pin2.c
      1          /*******************************************************************************
      2          * File Name        : PIN2.c
      3          * Auth or             : WK
      4          * Vers ion            : V1.0.0
      5          * Date                :
      6          * Description        : 此任务用于处理 MAINTASK 与 ShellTASK 之间的转换
      7                                  通过按键 1 中断中的事件与此任务进行通信
      8          *******************************************************************************/
      9          
     10          #include "includes.h"
     11          

   \                                 In section .text, align 4, keep-with-next
     12          void PIN2(uint_32 temp)
     13          {
   \                     PIN2:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
     14            pointer ppin2_event;
     15            
     16             _event_create_auto_clear("pin2_event");
   \   00000004   0x481E             LDR.N    R0,??PIN2_0
   \   00000006   0x.... 0x....      BL       _event_create_auto_clear
     17             _event_open("pin2_event", &ppin2_event);
   \   0000000A   0xA902             ADD      R1,SP,#+8
   \   0000000C   0x481C             LDR.N    R0,??PIN2_0
   \   0000000E   0x.... 0x....      BL       _event_open
   \   00000012   0xE018             B.N      ??PIN2_1
     18             
     19             while(TRUE)
     20             {
     21                _event_wait_all(ppin2_event,0x04,0);
     22                
     23                /* wk --> 启动 Shell */
     24                _mqx_uint oldP1=12,oldP2=10;uint_32 id;
     25                static uchar flag=0;
     26                id=0x10002;
     27                if( flag == 0 )
     28                {
     29                  _task_set_priority(id+1,10,&oldP1);  // 切换SHELL任务的优先级为 10
     30                  flag=1;
     31                  printf("flag=%d\n",flag);
     32                }
     33                else if(flag == 1)
   \                     ??PIN2_2:
   \   00000014   0x481B             LDR.N    R0,??PIN2_0+0x4
   \   00000016   0x7800             LDRB     R0,[R0, #+0]
   \   00000018   0x2801             CMP      R0,#+1
   \   0000001A   0xD110             BNE.N    ??PIN2_3
     34                {
     35          //        _task_abort(0x10005);  // wk --> 销毁任务。 这里不能销毁，因为后面还学要在启动任务
     36                 /*
     37                  ** wk --> 将任务挂起。
     38                  ** 注意：必须将任务挂起才能改变任务的优先级
     39                  */
     40                  _taskq_suspend_task(id+1,NULL);  // 将任务挂起
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0x1C60             ADDS     R0,R4,#+1
   \   00000020   0x.... 0x....      BL       _taskq_suspend_task
     41                 
     42                  _task_set_priority(id+1,12,&oldP2); // 将SHELL的任务的优先级降到 12
   \   00000024   0xAA00             ADD      R2,SP,#+0
   \   00000026   0x210C             MOVS     R1,#+12
   \   00000028   0x1C60             ADDS     R0,R4,#+1
   \   0000002A   0x.... 0x....      BL       _task_set_priority
     43                  flag=0;
   \   0000002E   0x4815             LDR.N    R0,??PIN2_0+0x4
   \   00000030   0x2100             MOVS     R1,#+0
   \   00000032   0x7001             STRB     R1,[R0, #+0]
     44                  printf("flag=%d\n",flag);
   \   00000034   0x4813             LDR.N    R0,??PIN2_0+0x4
   \   00000036   0x7801             LDRB     R1,[R0, #+0]
   \   00000038   0x4813             LDR.N    R0,??PIN2_0+0x8
   \   0000003A   0x.... 0x....      BL       _io_printf
     45                }
     46                
     47                printf("id=%d\n",id);
   \                     ??PIN2_3:
   \   0000003E   0x0021             MOVS     R1,R4
   \   00000040   0x4812             LDR.N    R0,??PIN2_0+0xC
   \   00000042   0x.... 0x....      BL       _io_printf
   \                     ??PIN2_1:
   \   00000046   0x2200             MOVS     R2,#+0
   \   00000048   0x2104             MOVS     R1,#+4
   \   0000004A   0x9802             LDR      R0,[SP, #+8]
   \   0000004C   0x.... 0x....      BL       _event_wait_all
   \   00000050   0x200C             MOVS     R0,#+12
   \   00000052   0x9001             STR      R0,[SP, #+4]
   \   00000054   0x200A             MOVS     R0,#+10
   \   00000056   0x9000             STR      R0,[SP, #+0]
   \   00000058   0x4C0D             LDR.N    R4,??PIN2_0+0x10  ;; 0x10002
   \   0000005A   0x480A             LDR.N    R0,??PIN2_0+0x4
   \   0000005C   0x7800             LDRB     R0,[R0, #+0]
   \   0000005E   0x2800             CMP      R0,#+0
   \   00000060   0xD1D8             BNE.N    ??PIN2_2
   \   00000062   0xAA01             ADD      R2,SP,#+4
   \   00000064   0x210A             MOVS     R1,#+10
   \   00000066   0x1C60             ADDS     R0,R4,#+1
   \   00000068   0x.... 0x....      BL       _task_set_priority
   \   0000006C   0x4805             LDR.N    R0,??PIN2_0+0x4
   \   0000006E   0x2101             MOVS     R1,#+1
   \   00000070   0x7001             STRB     R1,[R0, #+0]
   \   00000072   0x4804             LDR.N    R0,??PIN2_0+0x4
   \   00000074   0x7801             LDRB     R1,[R0, #+0]
   \   00000076   0x4804             LDR.N    R0,??PIN2_0+0x8
   \   00000078   0x.... 0x....      BL       _io_printf
   \   0000007C   0xE7DF             B.N      ??PIN2_3
   \   0000007E   0xBF00             Nop      
   \                     ??PIN2_0:
   \   00000080   0x........         DC32     `?<Constant "pin2_event">`
   \   00000084   0x........         DC32     ??flag
   \   00000088   0x........         DC32     `?<Constant "flag=%d\\n">`
   \   0000008C   0x........         DC32     `?<Constant "id=%d\\n">`
   \   00000090   0x00010002         DC32     0x10002
     48               /* test end */
     49             }
     50          }

   \                                 In section .bss, align 1
   \                     ??flag:
   \   00000000                      DS8 1

   \                                 In section .rodata, align 4
   \                     `?<Constant "pin2_event">`:
   \   00000000   0x70 0x69          DC8 "pin2_event"
   \              0x6E 0x32    
   \              0x5F 0x65    
   \              0x76 0x65    
   \              0x6E 0x74    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "flag=%d\\n">`:
   \   00000000   0x66 0x6C          DC8 "flag=%d\012"
   \              0x61 0x67    
   \              0x3D 0x25    
   \              0x64 0x0A    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "id=%d\\n">`:
   \   00000000   0x69 0x64          DC8 "id=%d\012"
   \              0x3D 0x25    
   \              0x64 0x0A    
   \              0x00         
   \   00000007   0x00               DC8 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       24  PIN2
             24 -> _event_create_auto_clear
             24 -> _event_open
             24 -> _event_wait_all
             24 -> _io_printf
             24 -> _task_set_priority
             24 -> _taskq_suspend_task


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      12  ?<Constant "flag=%d\n">
       8  ?<Constant "id=%d\n">
      12  ?<Constant "pin2_event">
     148  PIN2
       1  flag

 
   1 byte  in section .bss
  32 bytes in section .rodata
 148 bytes in section .text
 
 148 bytes of CODE  memory
  32 bytes of CONST memory
   1 byte  of DATA  memory

Errors: none
Warnings: none
