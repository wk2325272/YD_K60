###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     02/Apr/2013  15:44:16 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  L:\git_workspace\YD_PRJ_NEW_20130323_git_\Source\mem_fla #
#                    sh.c                                                     #
#    Command line =  L:\git_workspace\YD_PRJ_NEW_20130323_git_\Source\mem_fla #
#                    sh.c -D _DEBUG=1 -lC "L:\git_workspace\YD_PRJ_NEW_201303 #
#                    23_git_\IAR\twrk60n512\Int Flash Debug\List\" -lA        #
#                    "L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\twrk60n51 #
#                    2\Int Flash Debug\List\" --diag_suppress                 #
#                    Pa039,Pa082,Pe186 -o "L:\git_workspace\YD_PRJ_NEW_201303 #
#                    23_git_\IAR\twrk60n512\Int Flash Debug\Obj\" --no_cse    #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\..\lib\twr #
#                    k60n512.iar\ -I L:\git_workspace\YD_PRJ_NEW_20130323_git #
#                    _\IAR\..\lib\twrk60n512.iar\bsp\ -I                      #
#                    L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\..\lib\twr #
#                    k60n512.iar\psp\ -I L:\git_workspace\YD_PRJ_NEW_20130323 #
#                    _git_\IAR\..\lib\twrk60n512.iar\bsp\Generated_Code\ -I   #
#                    L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\..\lib\twr #
#                    k60n512.iar\rtcs\ -I L:\git_workspace\YD_PRJ_NEW_2013032 #
#                    3_git_\IAR\..\lib\twrk60n512.iar\mfs\ -I                 #
#                    L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\..\lib\twr #
#                    k60n512.iar\usb\host\ -I L:\git_workspace\YD_PRJ_NEW_201 #
#                    30323_git_\IAR\..\lib\twrk60n512.iar\shell\ -I           #
#                    L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\..\lib\twr #
#                    k60n512.iar\usb\ -I L:\git_workspace\YD_PRJ_NEW_20130323 #
#                    _git_\IAR\..\ -I L:\git_workspace\YD_PRJ_NEW_20130323_gi #
#                    t_\IAR\..\Source\Source_MQX\ -I "E:\Freescale\Freescale  #
#                    MQX 3.8\shell\source\include\" -Ol --use_c++_inline      #
#    List file    =  L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\twrk60n512 #
#                    \Int Flash Debug\List\mem_flash.lst                      #
#    Object file  =  L:\git_workspace\YD_PRJ_NEW_20130323_git_\IAR\twrk60n512 #
#                    \Int Flash Debug\Obj\mem_flash.o                         #
#                                                                             #
#                                                                             #
###############################################################################

L:\git_workspace\YD_PRJ_NEW_20130323_git_\Source\mem_flash.c
      1          /**HEADER********************************************************************
      2          * 
      3          * Copyright (c) 2008 Freescale Semiconductor;
      4          * All Rights Reserved                       
      5          *
      6          * Copyright (c) 1989-2008 ARC International;
      7          * All Rights Reserved
      8          *
      9          *************************************************************************** 
     10          *
     11          * THIS SOFTWARE IS PROVIDED BY FREESCALE "AS IS" AND ANY EXPRESSED OR 
     12          * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
     13          * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  
     14          * IN NO EVENT SHALL FREESCALE OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
     15          * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
     16          * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
     17          * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
     18          * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
     19          * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
     20          * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
     21          * THE POSSIBILITY OF SUCH DAMAGE.
     22          *
     23          **************************************************************************
     24          *
     25          * $FileName: mem_flash.c$  512kb flash
     26          * $Version : 3.8.31.4$
     27          * $Date    : May-2-2012$
     28          *
     29          * Comments:
     30          *
     31          *   This file contains the source for the FlashX example program.
     32          *
     33          *END************************************************************************/
     34          #include <mqx.h>
     35          #include <bsp.h>
     36          #include <fio.h>
     37          #include <mfs.h>
     38          #include <Sh_mfs.h>
     39          #include <part_mgr.h>
     40          #include <io_gpio.h>
     41          #include <lwevent.h>
     42          #include <string.h>
     43          
     44          #if (BSP_M51EMDEMO || BSP_TWRMCF51MM || BSP_TWRMCF51JE)
     45              #if !BSPCFG_ENABLE_FLASHX2
     46              #error This application requires BSPCFG_ENABLE_FLASHX1 defined non-zero in user_config.h. Please recompile BSP with this option.
     47              #endif
     48              #define         FLASH_NAME "flashx2:bank1"
     49          #elif BSP_M54455EVB
     50              #if !BSPCFG_ENABLE_FLASHX0
     51              #error This application requires BSPCFG_ENABLE_FLASHX0 defined non-zero in user_config.h. Please recompile BSP with this option.
     52              #endif
     53              #define         FLASH_NAME "flashx0:bank0"
     54          #else
     55              #if !BSPCFG_ENABLE_FLASHX
     56              #error This application requires BSPCFG_ENABLE_FLASHX defined non-zero in user_config.h. Please recompile BSP with this option.
     57              #endif
     58              #define         FLASH_NAME "flashx:bank0"
     59          #endif
     60          
     61          /* function prototypes */
     62          void mem_flash_app(uint_32);
     63          
     64          /*TASK*-----------------------------------------------------
     65          * 
     66          * Task Name    : mem_flash_app
     67          * Comments     :
     68          *    This task finds a string at 'the end' of flash memory
     69          *    then it tries to rewrite it. The successfull rewrite
     70          *    can be proved by re-executing this example application.
     71          *
     72          *END*-----------------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
     73          void mem_flash_app
     74             (
     75                uint_32 initial_data
     76             )
     77          {
   \                     mem_flash_app:
   \   00000000   0xB57F             PUSH     {R0-R6,LR}
     78              ///////////////////////////////////////////////////////////// Flashx mfs demo =0x00060000~0x00080000#dx 20130103
     79          #define FLASH_NAME_B       "flashx:"   //FLASH_NAME
     80              char  flashx_filesystem_name[] = "f:",flashx_partman_name[]="pmb:";///////////////////°²×°ÅÌ·û
   \   00000002   0xA800             ADD      R0,SP,#+0
   \   00000004   0x494D             LDR.N    R1,??mem_flash_app_0
   \   00000006   0x680A             LDR      R2,[R1, #0]
   \   00000008   0x6002             STR      R2,[R0, #+0]
   \   0000000A   0xA802             ADD      R0,SP,#+8
   \   0000000C   0x494C             LDR.N    R1,??mem_flash_app_0+0x4
   \   0000000E   0xC90C             LDM      R1!,{R2,R3}
   \   00000010   0xC00C             STM      R0!,{R2,R3}
   \   00000012   0x3908             SUBS     R1,R1,#+8
   \   00000014   0x3808             SUBS     R0,R0,#+8
     81              MQX_FILE_PTR flashx_handle,flashx_file_handle,flashx_partman_handle;
     82              _mqx_uint  param; 
     83              uint_32 error;
     84              printf("\nMQX Flash Task.");
   \   00000016   0x484B             LDR.N    R0,??mem_flash_app_0+0x8
   \   00000018   0x.... 0x....      BL       _io_printf
     85              
     86              /* wk --> open flash device */
     87              flashx_handle = fopen(FLASH_NAME_B, NULL); // "flashx:bank0"
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0x484A             LDR.N    R0,??mem_flash_app_0+0xC
   \   00000020   0x.... 0x....      BL       _io_fopen
   \   00000024   0x0004             MOVS     R4,R0
     88              
     89               /*wk@130330 -->  test mfs function */
     90              uchar result;   
                           ^
Warning[Pe177]: variable "result" was declared but never referenced
     91          //    char pathname[261];
     92          //    ioctl(mfs_fs_ptr, IO_IOCTL_GET_CURRENT_DIR,(uint_32_ptr) pathname);
     93          //    printf("The current directory is: %s\n", pathname);  
     94             
     95              if (flashx_handle == NULL) {
   \   00000026   0x2C00             CMP      R4,#+0
   \   00000028   0xD106             BNE.N    ??mem_flash_app_1
     96                printf("\nUnable to open file %s", FLASH_NAME_B);
   \   0000002A   0x4947             LDR.N    R1,??mem_flash_app_0+0xC
   \   0000002C   0x4847             LDR.N    R0,??mem_flash_app_0+0x10
   \   0000002E   0x.... 0x....      BL       _io_printf
     97                _task_block();
   \   00000032   0x.... 0x....      BL       _task_block
   \   00000036   0xE003             B.N      ??mem_flash_app_2
     98             } else {
     99                printf("\nFlash file %s opened", FLASH_NAME_B);
   \                     ??mem_flash_app_1:
   \   00000038   0x4943             LDR.N    R1,??mem_flash_app_0+0xC
   \   0000003A   0x4845             LDR.N    R0,??mem_flash_app_0+0x14
   \   0000003C   0x.... 0x....      BL       _io_printf
    100             } 
    101             
    102             ioctl(flashx_handle, FLASH_IOCTL_ENABLE_SECTOR_CACHE, NULL);/////////////////////ÖØÒª
   \                     ??mem_flash_app_2:
   \   00000040   0x2200             MOVS     R2,#+0
   \   00000042   0xF240 0x210D      MOVW     R1,#+525
   \   00000046   0x0020             MOVS     R0,R4
   \   00000048   0x.... 0x....      BL       _io_ioctl
    103          //   int len;
    104          //   len = write(flashx_handle, "world",strlen("world"));
    105          //   fseek(flashx_handle, 0, IO_SEEK_SET);
    106          //   
    107          //   fseek(flashx_handle, -32, IO_SEEK_END);
    108          //   len = write(flashx_handle, "hello",strlen("hello"));
    109          
    110             /* wk --> °²×°·ÖÇø */
    111              error = _io_part_mgr_install(flashx_handle, flashx_partman_name, 0);// ·ÖÇø¹ÜÀí
   \   0000004C   0x2200             MOVS     R2,#+0
   \   0000004E   0xA902             ADD      R1,SP,#+8
   \   00000050   0x0020             MOVS     R0,R4
   \   00000052   0x.... 0x....      BL       _io_part_mgr_install
   \   00000056   0x0006             MOVS     R6,R0
    112              if (error!= MFS_NO_ERROR)
   \   00000058   0x2E00             CMP      R6,#+0
   \   0000005A   0xD008             BEQ.N    ??mem_flash_app_3
    113              {
    114                printf("\nError installing partition manager: %s", MFS_Error_text((uint_32)error));
   \   0000005C   0x0030             MOVS     R0,R6
   \   0000005E   0x.... 0x....      BL       MFS_Error_text
   \   00000062   0x0001             MOVS     R1,R0
   \   00000064   0x483B             LDR.N    R0,??mem_flash_app_0+0x18
   \   00000066   0x.... 0x....      BL       _io_printf
    115                _task_block();
   \   0000006A   0x.... 0x....      BL       _task_block
    116              }
    117              
    118              /* Open partition manager */
    119              flashx_partman_handle = fopen(flashx_partman_name, NULL);// ´ò¿ª·ÖÇø
   \                     ??mem_flash_app_3:
   \   0000006E   0x2100             MOVS     R1,#+0
   \   00000070   0xA802             ADD      R0,SP,#+8
   \   00000072   0x.... 0x....      BL       _io_fopen
   \   00000076   0x0005             MOVS     R5,R0
    120              if (flashx_partman_handle == NULL)
   \   00000078   0x2D00             CMP      R5,#+0
   \   0000007A   0xD10C             BNE.N    ??mem_flash_app_4
    121              {
    122                error = ferror(flashx_partman_handle);
   \   0000007C   0x0028             MOVS     R0,R5
   \   0000007E   0x.... 0x....      BL       _io_ferror
   \   00000082   0x0006             MOVS     R6,R0
    123                printf("\nError opening partition manager: %s", MFS_Error_text((uint_32)error));
   \   00000084   0x0030             MOVS     R0,R6
   \   00000086   0x.... 0x....      BL       MFS_Error_text
   \   0000008A   0x0001             MOVS     R1,R0
   \   0000008C   0x4832             LDR.N    R0,??mem_flash_app_0+0x1C
   \   0000008E   0x.... 0x....      BL       _io_printf
    124                _task_block();
   \   00000092   0x.... 0x....      BL       _task_block
    125              }
    126              /* Validate partition 1 */
    127              param = 1;
   \                     ??mem_flash_app_4:
   \   00000096   0x2001             MOVS     R0,#+1
   \   00000098   0x9001             STR      R0,[SP, #+4]
    128              error = _io_ioctl(flashx_partman_handle, IO_IOCTL_VAL_PART, &param);// ¿ØÖÆ·ÖÇø
   \   0000009A   0xAA01             ADD      R2,SP,#+4
   \   0000009C   0xF240 0x1123      MOVW     R1,#+291
   \   000000A0   0x0028             MOVS     R0,R5
   \   000000A2   0x.... 0x....      BL       _io_ioctl
   \   000000A6   0x0006             MOVS     R6,R0
    129              if (error == MQX_OK)
   \   000000A8   0x2E00             CMP      R6,#+0
   \   000000AA   0xD111             BNE.N    ??mem_flash_app_5
    130              { 
    131                /* Install MFS over Flashx driver */
    132                error = _io_mfs_install(flashx_partman_handle, flashx_filesystem_name, param);// °²×°ÎÄ¼þÏµÍ³£¬»ùÓÚ·ÖÇø
   \   000000AC   0x9A01             LDR      R2,[SP, #+4]
   \   000000AE   0xA900             ADD      R1,SP,#+0
   \   000000B0   0x0028             MOVS     R0,R5
   \   000000B2   0x.... 0x....      BL       _io_mfs_install
   \   000000B6   0x0006             MOVS     R6,R0
    133                if (error != MFS_NO_ERROR)
   \   000000B8   0x2E00             CMP      R6,#+0
   \   000000BA   0xD01A             BEQ.N    ??mem_flash_app_6
    134                {
    135                  printf("\nError initializing MFS: %s", MFS_Error_text((uint_32)error));
   \   000000BC   0x0030             MOVS     R0,R6
   \   000000BE   0x.... 0x....      BL       MFS_Error_text
   \   000000C2   0x0001             MOVS     R1,R0
   \   000000C4   0x4825             LDR.N    R0,??mem_flash_app_0+0x20
   \   000000C6   0x.... 0x....      BL       _io_printf
    136                  _task_block();
   \   000000CA   0x.... 0x....      BL       _task_block
   \   000000CE   0xE010             B.N      ??mem_flash_app_6
    137                }
    138              } else
    139              { 
    140                /* Install MFS over SD card driver */
    141                error = _io_mfs_install(flashx_handle, flashx_filesystem_name, (_file_size)0);// °²×°ÎÄ¼þÏµÍ³£¬ÎÞ·ÖÇø
   \                     ??mem_flash_app_5:
   \   000000D0   0x2200             MOVS     R2,#+0
   \   000000D2   0xA900             ADD      R1,SP,#+0
   \   000000D4   0x0020             MOVS     R0,R4
   \   000000D6   0x.... 0x....      BL       _io_mfs_install
   \   000000DA   0x0006             MOVS     R6,R0
    142                if (error != MFS_NO_ERROR)
   \   000000DC   0x2E00             CMP      R6,#+0
   \   000000DE   0xD008             BEQ.N    ??mem_flash_app_6
    143                {
    144                  printf("\nError initializing MFS: %s", MFS_Error_text((uint_32)error));
   \   000000E0   0x0030             MOVS     R0,R6
   \   000000E2   0x.... 0x....      BL       MFS_Error_text
   \   000000E6   0x0001             MOVS     R1,R0
   \   000000E8   0x481C             LDR.N    R0,??mem_flash_app_0+0x20
   \   000000EA   0x.... 0x....      BL       _io_printf
    145                  _task_block();
   \   000000EE   0x.... 0x....      BL       _task_block
    146                }
    147              }
    148          
    149             /* Open file system */
    150             flashx_file_handle = fopen(flashx_filesystem_name, NULL);// ´ò¿ªÎÄ¼þÏµÍ³
   \                     ??mem_flash_app_6:
   \   000000F2   0x2100             MOVS     R1,#+0
   \   000000F4   0xA800             ADD      R0,SP,#+0
   \   000000F6   0x.... 0x....      BL       _io_fopen
    151             error = ferror (flashx_file_handle);
   \   000000FA   0x.... 0x....      BL       _io_ferror
   \   000000FE   0x0006             MOVS     R6,R0
    152             if ((error != MFS_NO_ERROR) && (error != MFS_NOT_A_DOS_DISK))
   \   00000100   0x2E00             CMP      R6,#+0
   \   00000102   0xD00C             BEQ.N    ??mem_flash_app_7
   \   00000104   0xF243 0x001A      MOVW     R0,#+12314
   \   00000108   0x4286             CMP      R6,R0
   \   0000010A   0xD008             BEQ.N    ??mem_flash_app_7
    153             {
    154               printf("\nError opening filesystem: %s", MFS_Error_text((uint_32)error));
   \   0000010C   0x0030             MOVS     R0,R6
   \   0000010E   0x.... 0x....      BL       MFS_Error_text
   \   00000112   0x0001             MOVS     R1,R0
   \   00000114   0x4812             LDR.N    R0,??mem_flash_app_0+0x24
   \   00000116   0x.... 0x....      BL       _io_printf
    155               _task_block();
   \   0000011A   0x.... 0x....      BL       _task_block
    156             }
    157             if ( error == MFS_NOT_A_DOS_DISK )//////////////////
   \                     ??mem_flash_app_7:
   \   0000011E   0xF243 0x001A      MOVW     R0,#+12314
   \   00000122   0x4286             CMP      R6,R0
   \   00000124   0xD102             BNE.N    ??mem_flash_app_8
    158             {
    159               printf("\nNOT A DOS DISK! You must format to continue.");
   \   00000126   0x480F             LDR.N    R0,??mem_flash_app_0+0x28
   \   00000128   0x.... 0x....      BL       _io_printf
    160               
    161             }
    162            
    163             printf ("\nFlashx  installed to %s", flashx_filesystem_name);
   \                     ??mem_flash_app_8:
   \   0000012C   0xA900             ADD      R1,SP,#+0
   \   0000012E   0x480E             LDR.N    R0,??mem_flash_app_0+0x2C
   \   00000130   0x.... 0x....      BL       _io_printf
    164              ////////////////////////////////////////////////////////////////#dx 20130103
    165          
    166             _task_block();
   \   00000134   0x.... 0x....      BL       _task_block
    167             //_task_destroy(_task_get_id());
    168             
    169          }
   \   00000138   0xBD7F             POP      {R0-R6,PC}       ;; return
   \   0000013A   0xBF00             Nop      
   \                     ??mem_flash_app_0:
   \   0000013C   0x........         DC32     `?<Constant "f:">`
   \   00000140   0x........         DC32     `?<Constant "pmb:">`
   \   00000144   0x........         DC32     `?<Constant "\\nMQX Flash Task.">`
   \   00000148   0x........         DC32     `?<Constant "flashx:">`
   \   0000014C   0x........         DC32     `?<Constant "\\nUnable to open file %s">`
   \   00000150   0x........         DC32     `?<Constant "\\nFlash file %s opened">`
   \   00000154   0x........         DC32     `?<Constant "\\nError installing par...">`
   \   00000158   0x........         DC32     `?<Constant "\\nError opening partit...">`
   \   0000015C   0x........         DC32     `?<Constant "\\nError initializing M...">`
   \   00000160   0x........         DC32     `?<Constant "\\nError opening filesy...">`
   \   00000164   0x........         DC32     `?<Constant "\\nNOT A DOS DISK! You ...">`
   \   00000168   0x........         DC32     `?<Constant "\\nFlashx  installed to %s">`

   \                                 In section .rodata, align 4
   \                     `?<Constant "f:">`:
   \   00000000   0x66 0x3A          DC8 "f:"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "pmb:">`:
   \   00000000   0x70 0x6D          DC8 "pmb:"
   \              0x62 0x3A    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nMQX Flash Task.">`:
   \   00000000   0x0A 0x4D          DC8 "\012MQX Flash Task."
   \              0x51 0x58    
   \              0x20 0x46    
   \              0x6C 0x61    
   \              0x73 0x68    
   \              0x20 0x54    
   \              0x61 0x73    
   \              0x6B 0x2E    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "flashx:">`:
   \   00000000   0x66 0x6C          DC8 "flashx:"
   \              0x61 0x73    
   \              0x68 0x78    
   \              0x3A 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nUnable to open file %s">`:
   \   00000000   0x0A 0x55          DC8 "\012Unable to open file %s"
   \              0x6E 0x61    
   \              0x62 0x6C    
   \              0x65 0x20    
   \              0x74 0x6F    
   \              0x20 0x6F    
   \              0x70 0x65    
   \              0x6E 0x20    
   \              0x66 0x69    
   \              0x6C 0x65    
   \              0x20 0x25    
   \              0x73 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nFlash file %s opened">`:
   \   00000000   0x0A 0x46          DC8 "\012Flash file %s opened"
   \              0x6C 0x61    
   \              0x73 0x68    
   \              0x20 0x66    
   \              0x69 0x6C    
   \              0x65 0x20    
   \              0x25 0x73    
   \              0x20 0x6F    
   \              0x70 0x65    
   \              0x6E 0x65    
   \              0x64 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nError installing par...">`:
   \   00000000   0x0A 0x45          DC8 "\012Error installing partition manager: %s"
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x20 0x69    
   \              0x6E 0x73    
   \              0x74 0x61    
   \              0x6C 0x6C    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x70 0x61    
   \              0x72 0x74    
   \              0x69 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x6D 0x61    
   \              0x6E 0x61    
   \              0x67 0x65    
   \              0x72 0x3A    
   \              0x20 0x25    
   \              0x73 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nError opening partit...">`:
   \   00000000   0x0A 0x45          DC8 "\012Error opening partition manager: %s"
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x20 0x6F    
   \              0x70 0x65    
   \              0x6E 0x69    
   \              0x6E 0x67    
   \              0x20 0x70    
   \              0x61 0x72    
   \              0x74 0x69    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x6D    
   \              0x61 0x6E    
   \              0x61 0x67    
   \              0x65 0x72    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nError initializing M...">`:
   \   00000000   0x0A 0x45          DC8 "\012Error initializing MFS: %s"
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x20 0x69    
   \              0x6E 0x69    
   \              0x74 0x69    
   \              0x61 0x6C    
   \              0x69 0x7A    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x4D 0x46    
   \              0x53 0x3A    
   \              0x20 0x25    
   \              0x73 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nError opening filesy...">`:
   \   00000000   0x0A 0x45          DC8 "\012Error opening filesystem: %s"
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x20 0x6F    
   \              0x70 0x65    
   \              0x6E 0x69    
   \              0x6E 0x67    
   \              0x20 0x66    
   \              0x69 0x6C    
   \              0x65 0x73    
   \              0x79 0x73    
   \              0x74 0x65    
   \              0x6D 0x3A    
   \              0x20 0x25    
   \              0x73 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nNOT A DOS DISK! You ...">`:
   \   00000000   0x0A 0x4E          DC8 "\012NOT A DOS DISK! You must format to continue."
   \              0x4F 0x54    
   \              0x20 0x41    
   \              0x20 0x44    
   \              0x4F 0x53    
   \              0x20 0x44    
   \              0x49 0x53    
   \              0x4B 0x21    
   \              0x20 0x59    
   \              0x6F 0x75    
   \              0x20 0x6D    
   \              0x75 0x73    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x61 0x74    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x63 0x6F    
   \              0x6E 0x74    
   \              0x69 0x6E    
   \              0x75 0x65    
   \              0x2E 0x00    
   \   0000002E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nFlashx  installed to %s">`:
   \   00000000   0x0A 0x46          DC8 "\012Flashx  installed to %s"
   \              0x6C 0x61    
   \              0x73 0x68    
   \              0x78 0x20    
   \              0x20 0x69    
   \              0x6E 0x73    
   \              0x74 0x61    
   \              0x6C 0x6C    
   \              0x65 0x64    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x25 0x73    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    170          
    171          /* EOF */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       32  mem_flash_app
             32 -> MFS_Error_text
             32 -> _io_ferror
             32 -> _io_fopen
             32 -> _io_ioctl
             32 -> _io_mfs_install
             32 -> _io_part_mgr_install
             32 -> _io_printf
             32 -> _task_block


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      28  ?<Constant "\nError initializing M...">
      40  ?<Constant "\nError installing par...">
      32  ?<Constant "\nError opening filesy...">
      40  ?<Constant "\nError opening partit...">
      24  ?<Constant "\nFlash file %s opened">
      28  ?<Constant "\nFlashx  installed to %s">
      20  ?<Constant "\nMQX Flash Task.">
      48  ?<Constant "\nNOT A DOS DISK! You ...">
      24  ?<Constant "\nUnable to open file %s">
       4  ?<Constant "f:">
       8  ?<Constant "flashx:">
       8  ?<Constant "pmb:">
     364  mem_flash_app

 
 304 bytes in section .rodata
 364 bytes in section .text
 
 364 bytes of CODE  memory
 304 bytes of CONST memory

Errors: none
Warnings: 1
