###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     03/May/2013  20:12:13 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\Freescale\mqx_test\YD_PRJ_NEW_20130323_git_\Source\Sy #
#                    stem.C                                                   #
#    Command line =  E:\Freescale\mqx_test\YD_PRJ_NEW_20130323_git_\Source\Sy #
#                    stem.C -D _DEBUG=1 -lC "E:\Freescale\mqx_test\YD_PRJ_NEW #
#                    _20130323_git_\IAR\twrk60n512\Int Flash Debug\List\"     #
#                    -lA "E:\Freescale\mqx_test\YD_PRJ_NEW_20130323_git_\IAR\ #
#                    twrk60n512\Int Flash Debug\List\" --diag_suppress        #
#                    Pa039,Pa082,Pe186 -o "E:\Freescale\mqx_test\YD_PRJ_NEW_2 #
#                    0130323_git_\IAR\twrk60n512\Int Flash Debug\Obj\"        #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M4 -e --fpu=None            #
#                    --dlib_config "D:\Program Files\IAR Systems\Embedded     #
#                    Workbench 6.0\arm\INC\c\DLib_Config_Normal.h" -I         #
#                    E:\Freescale\mqx_test\YD_PRJ_NEW_20130323_git_\IAR\..\li #
#                    b\twrk60n512.iar\ -I E:\Freescale\mqx_test\YD_PRJ_NEW_20 #
#                    130323_git_\IAR\..\lib\twrk60n512.iar\bsp\ -I            #
#                    E:\Freescale\mqx_test\YD_PRJ_NEW_20130323_git_\IAR\..\li #
#                    b\twrk60n512.iar\psp\ -I E:\Freescale\mqx_test\YD_PRJ_NE #
#                    W_20130323_git_\IAR\..\lib\twrk60n512.iar\bsp\Generated_ #
#                    Code\ -I E:\Freescale\mqx_test\YD_PRJ_NEW_20130323_git_\ #
#                    IAR\..\lib\twrk60n512.iar\rtcs\ -I                       #
#                    E:\Freescale\mqx_test\YD_PRJ_NEW_20130323_git_\IAR\..\li #
#                    b\twrk60n512.iar\mfs\ -I E:\Freescale\mqx_test\YD_PRJ_NE #
#                    W_20130323_git_\IAR\..\lib\twrk60n512.iar\usb\host\ -I   #
#                    E:\Freescale\mqx_test\YD_PRJ_NEW_20130323_git_\IAR\..\li #
#                    b\twrk60n512.iar\shell\ -I E:\Freescale\mqx_test\YD_PRJ_ #
#                    NEW_20130323_git_\IAR\..\lib\twrk60n512.iar\usb\ -I      #
#                    E:\Freescale\mqx_test\YD_PRJ_NEW_20130323_git_\IAR\..\   #
#                    -I E:\Freescale\mqx_test\YD_PRJ_NEW_20130323_git_\IAR\.. #
#                    \Source\Source_MQX\ -I E:\Freescale\mqx_test\YD_PRJ_NEW_ #
#                    20130323_git_\IAR\..\Source\ -I "E:\Freescale\Freescale  #
#                    MQX 3.8\shell\source\include\" -Ol --use_c++_inline      #
#    List file    =  E:\Freescale\mqx_test\YD_PRJ_NEW_20130323_git_\IAR\twrk6 #
#                    0n512\Int Flash Debug\List\System.lst                    #
#    Object file  =  E:\Freescale\mqx_test\YD_PRJ_NEW_20130323_git_\IAR\twrk6 #
#                    0n512\Int Flash Debug\Obj\System.o                       #
#                                                                             #
#                                                                             #
###############################################################################

E:\Freescale\mqx_test\YD_PRJ_NEW_20130323_git_\Source\System.C
      1          /*******************************************************************************
      2          * File Name        : System.c
      3          * Author             : wk
      4          * Version            : V1.0.0
      5          * Date                :
      6          * Description        : —” ±≥Ã–Ú
      7          *******************************************************************************/
      8          
      9          #include "includes.h"
     10          
     11          // Defined for Delay_ms_Common()
     12          #define MCU_BUS_CLOCK 96000000L
     13          #define MCU_BUS_CYCLES_100US (MCU_BUS_CLOCK / 10000)
     14          

   \                                 In section .text, align 4, keep-with-next
     15          static void Cpu_Delay100US(U16 us100)
     16          {
     17            unsigned int i;
     18            while((us100--)){
   \                     Cpu_Delay100US:
   \                     ??Cpu_Delay100US_0:
   \   00000000   0x0001             MOVS     R1,R0
   \   00000002   0x1E48             SUBS     R0,R1,#+1
   \   00000004   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000006   0x2900             CMP      R1,#+0
   \   00000008   0xD009             BEQ.N    ??Cpu_Delay100US_1
     19              for(i=0; i < (MCU_BUS_CYCLES_100US/10); i++)
   \   0000000A   0x2100             MOVS     R1,#+0
   \                     ??Cpu_Delay100US_2:
   \   0000000C   0xF44F 0x7270      MOV      R2,#+960
   \   00000010   0x4291             CMP      R1,R2
   \   00000012   0xD2F5             BCS.N    ??Cpu_Delay100US_0
     20              {// 10 cycles delay
     21                asm("NOP");
   \   00000014   0xBF00             NOP              
     22                asm("NOP");
   \   00000016   0xBF00             NOP              
     23                asm("NOP");
   \   00000018   0xBF00             NOP              
     24              }
   \   0000001A   0x1C49             ADDS     R1,R1,#+1
   \   0000001C   0xE7F6             B.N      ??Cpu_Delay100US_2
     25            }
     26          }
   \                     ??Cpu_Delay100US_1:
   \   0000001E   0x4770             BX       LR               ;; return
     27          

   \                                 In section .text, align 2, keep-with-next
     28          void delay_ms(U16 period)   //delay routine (milliseconds)
     29          {
   \                     delay_ms:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0xE003             B.N      ??delay_ms_0
     30            
     31            while (period != 0)
     32            {
     33              Cpu_Delay100US (10);          
   \                     ??delay_ms_1:
   \   00000006   0x200A             MOVS     R0,#+10
   \   00000008   0x.... 0x....      BL       Cpu_Delay100US
     34              period--;    
   \   0000000C   0x1E64             SUBS     R4,R4,#+1
     35            }  
   \                     ??delay_ms_0:
   \   0000000E   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000010   0x2C00             CMP      R4,#+0
   \   00000012   0xD1F8             BNE.N    ??delay_ms_1
     36          }
   \   00000014   0xBD10             POP      {R4,PC}          ;; return
     37          
     38          

   \                                 In section .text, align 4, keep-with-next
     39          void delay_us(U16 uscnt)
     40          {
     41            while(uscnt--)
   \                     delay_us:
   \                     ??delay_us_0:
   \   00000000   0x0001             MOVS     R1,R0
   \   00000002   0x1E48             SUBS     R0,R1,#+1
   \   00000004   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000006   0x2900             CMP      R1,#+0
   \   00000008   0xD006             BEQ.N    ??delay_us_1
     42            {
     43              for(U16 i=0;i<24;i++)  //  1*10ns+ uscnt* (22*(4+x*nop) * 10ns)= 1us 
   \   0000000A   0x2100             MOVS     R1,#+0
   \                     ??delay_us_2:
   \   0000000C   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000000E   0x2918             CMP      R1,#+24
   \   00000010   0xD2F6             BCS.N    ??delay_us_0
     44              {
     45                asm("NOP");
   \   00000012   0xBF00             NOP              
     46              }
   \   00000014   0x1C49             ADDS     R1,R1,#+1
   \   00000016   0xE7F9             B.N      ??delay_us_2
     47            }
     48          }
   \                     ??delay_us_1:
   \   00000018   0x4770             BX       LR               ;; return

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  Cpu_Delay100US
        8  delay_ms
             8 -> Cpu_Delay100US
        0  delay_us


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      32  Cpu_Delay100US
      22  delay_ms
      26  delay_us

 
 80 bytes in section .text
 
 80 bytes of CODE memory

Errors: none
Warnings: none
